// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: sf/solana/serumhist/v1/serumhist.proto

package pbserumhist

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Side int32

const (
	Side_BID Side = 0
	Side_ASK Side = 1
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "BID",
		1: "ASK",
	}
	Side_value = map[string]int32{
		"BID": 0,
		"ASK": 1,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_solana_serumhist_v1_serumhist_proto_enumTypes[0].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_sf_solana_serumhist_v1_serumhist_proto_enumTypes[0]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{0}
}

type FeeTier int32

const (
	FeeTier_Base FeeTier = 0
	FeeTier_SRM2 FeeTier = 1
	FeeTier_SRM3 FeeTier = 2
	FeeTier_SRM4 FeeTier = 3
	FeeTier_SRM5 FeeTier = 4
	FeeTier_SRM6 FeeTier = 5
	FeeTier_MSRM FeeTier = 6
)

// Enum value maps for FeeTier.
var (
	FeeTier_name = map[int32]string{
		0: "Base",
		1: "SRM2",
		2: "SRM3",
		3: "SRM4",
		4: "SRM5",
		5: "SRM6",
		6: "MSRM",
	}
	FeeTier_value = map[string]int32{
		"Base": 0,
		"SRM2": 1,
		"SRM3": 2,
		"SRM4": 3,
		"SRM5": 4,
		"SRM6": 5,
		"MSRM": 6,
	}
)

func (x FeeTier) Enum() *FeeTier {
	p := new(FeeTier)
	*p = x
	return p
}

func (x FeeTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeTier) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_solana_serumhist_v1_serumhist_proto_enumTypes[1].Descriptor()
}

func (FeeTier) Type() protoreflect.EnumType {
	return &file_sf_solana_serumhist_v1_serumhist_proto_enumTypes[1]
}

func (x FeeTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeTier.Descriptor instead.
func (FeeTier) EnumDescriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{1}
}

type OrderType int32

const (
	OrderType_LIMIT               OrderType = 0
	OrderType_IMMEDIATE_OR_CANCEL OrderType = 1
	OrderType_POST_ONLY           OrderType = 2
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "LIMIT",
		1: "IMMEDIATE_OR_CANCEL",
		2: "POST_ONLY",
	}
	OrderType_value = map[string]int32{
		"LIMIT":               0,
		"IMMEDIATE_OR_CANCEL": 1,
		"POST_ONLY":           2,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_solana_serumhist_v1_serumhist_proto_enumTypes[2].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_sf_solana_serumhist_v1_serumhist_proto_enumTypes[2]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{2}
}

type OrderTransition_State int32

const (
	OrderTransition_STATE_UNKNOWN        OrderTransition_State = 0
	OrderTransition_STATE_APPROVED       OrderTransition_State = 1
	OrderTransition_STATE_CANCEL_PENDING OrderTransition_State = 2
	OrderTransition_STATE_CANCELLED      OrderTransition_State = 3
	OrderTransition_STATE_PARTIAL        OrderTransition_State = 4
	OrderTransition_STATE_EXECUTED       OrderTransition_State = 5
)

// Enum value maps for OrderTransition_State.
var (
	OrderTransition_State_name = map[int32]string{
		0: "STATE_UNKNOWN",
		1: "STATE_APPROVED",
		2: "STATE_CANCEL_PENDING",
		3: "STATE_CANCELLED",
		4: "STATE_PARTIAL",
		5: "STATE_EXECUTED",
	}
	OrderTransition_State_value = map[string]int32{
		"STATE_UNKNOWN":        0,
		"STATE_APPROVED":       1,
		"STATE_CANCEL_PENDING": 2,
		"STATE_CANCELLED":      3,
		"STATE_PARTIAL":        4,
		"STATE_EXECUTED":       5,
	}
)

func (x OrderTransition_State) Enum() *OrderTransition_State {
	p := new(OrderTransition_State)
	*p = x
	return p
}

func (x OrderTransition_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderTransition_State) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_solana_serumhist_v1_serumhist_proto_enumTypes[3].Descriptor()
}

func (OrderTransition_State) Type() protoreflect.EnumType {
	return &file_sf_solana_serumhist_v1_serumhist_proto_enumTypes[3]
}

func (x OrderTransition_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderTransition_State.Descriptor instead.
func (OrderTransition_State) EnumDescriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{3, 0}
}

type OrderTransition_Transition int32

const (
	OrderTransition_TRANS_INIT      OrderTransition_Transition = 0
	OrderTransition_TRANS_ACCEPTED  OrderTransition_Transition = 1
	OrderTransition_TRANS_CANCELLED OrderTransition_Transition = 2
	OrderTransition_TRANS_FILLED    OrderTransition_Transition = 3
	OrderTransition_TRANS_EXECUTED  OrderTransition_Transition = 4
)

// Enum value maps for OrderTransition_Transition.
var (
	OrderTransition_Transition_name = map[int32]string{
		0: "TRANS_INIT",
		1: "TRANS_ACCEPTED",
		2: "TRANS_CANCELLED",
		3: "TRANS_FILLED",
		4: "TRANS_EXECUTED",
	}
	OrderTransition_Transition_value = map[string]int32{
		"TRANS_INIT":      0,
		"TRANS_ACCEPTED":  1,
		"TRANS_CANCELLED": 2,
		"TRANS_FILLED":    3,
		"TRANS_EXECUTED":  4,
	}
)

func (x OrderTransition_Transition) Enum() *OrderTransition_Transition {
	p := new(OrderTransition_Transition)
	*p = x
	return p
}

func (x OrderTransition_Transition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderTransition_Transition) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_solana_serumhist_v1_serumhist_proto_enumTypes[4].Descriptor()
}

func (OrderTransition_Transition) Type() protoreflect.EnumType {
	return &file_sf_solana_serumhist_v1_serumhist_proto_enumTypes[4]
}

func (x OrderTransition_Transition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderTransition_Transition.Descriptor instead.
func (OrderTransition_Transition) EnumDescriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{3, 1}
}

type GetFillsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trader []byte `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	Market []byte `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *GetFillsRequest) Reset() {
	*x = GetFillsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFillsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFillsRequest) ProtoMessage() {}

func (x *GetFillsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFillsRequest.ProtoReflect.Descriptor instead.
func (*GetFillsRequest) Descriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{0}
}

func (x *GetFillsRequest) GetTrader() []byte {
	if x != nil {
		return x.Trader
	}
	return nil
}

func (x *GetFillsRequest) GetMarket() []byte {
	if x != nil {
		return x.Market
	}
	return nil
}

type FillsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fill    []*Fill `protobuf:"bytes,1,rep,name=fill,proto3" json:"fill,omitempty"`
	HasMore bool    `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *FillsResponse) Reset() {
	*x = FillsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FillsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillsResponse) ProtoMessage() {}

func (x *FillsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillsResponse.ProtoReflect.Descriptor instead.
func (*FillsResponse) Descriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{1}
}

func (x *FillsResponse) GetFill() []*Fill {
	if x != nil {
		return x.Fill
	}
	return nil
}

func (x *FillsResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type TrackOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market  []byte `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *TrackOrderRequest) Reset() {
	*x = TrackOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackOrderRequest) ProtoMessage() {}

func (x *TrackOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackOrderRequest.ProtoReflect.Descriptor instead.
func (*TrackOrderRequest) Descriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{2}
}

func (x *TrackOrderRequest) GetMarket() []byte {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *TrackOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type OrderTransition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousState OrderTransition_State      `protobuf:"varint,1,opt,name=previous_state,json=previousState,proto3,enum=sf.solana.serumhist.v1.OrderTransition_State" json:"previous_state,omitempty"`
	CurrentState  OrderTransition_State      `protobuf:"varint,2,opt,name=current_state,json=currentState,proto3,enum=sf.solana.serumhist.v1.OrderTransition_State" json:"current_state,omitempty"`
	Transition    OrderTransition_Transition `protobuf:"varint,3,opt,name=transition,proto3,enum=sf.solana.serumhist.v1.OrderTransition_Transition" json:"transition,omitempty"`
	Order         *Order                     `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	AddedFill     *Fill                      `protobuf:"bytes,5,opt,name=added_fill,json=addedFill,proto3" json:"added_fill,omitempty"`
	Cancellation  *InstructionRef            `protobuf:"bytes,6,opt,name=cancellation,proto3" json:"cancellation,omitempty"`
}

func (x *OrderTransition) Reset() {
	*x = OrderTransition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTransition) ProtoMessage() {}

func (x *OrderTransition) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTransition.ProtoReflect.Descriptor instead.
func (*OrderTransition) Descriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{3}
}

func (x *OrderTransition) GetPreviousState() OrderTransition_State {
	if x != nil {
		return x.PreviousState
	}
	return OrderTransition_STATE_UNKNOWN
}

func (x *OrderTransition) GetCurrentState() OrderTransition_State {
	if x != nil {
		return x.CurrentState
	}
	return OrderTransition_STATE_UNKNOWN
}

func (x *OrderTransition) GetTransition() OrderTransition_Transition {
	if x != nil {
		return x.Transition
	}
	return OrderTransition_TRANS_INIT
}

func (x *OrderTransition) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *OrderTransition) GetAddedFill() *Fill {
	if x != nil {
		return x.AddedFill
	}
	return nil
}

func (x *OrderTransition) GetCancellation() *InstructionRef {
	if x != nil {
		return x.Cancellation
	}
	return nil
}

type InstructionRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNum  uint64                 `protobuf:"varint,1,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	TrxId     []byte                 `protobuf:"bytes,2,opt,name=trx_id,json=trxId,proto3" json:"trx_id,omitempty"`
	TrxIdx    uint32                 `protobuf:"varint,3,opt,name=trx_idx,json=trxIdx,proto3" json:"trx_idx,omitempty"`
	InstIdx   uint32                 `protobuf:"varint,4,opt,name=inst_idx,json=instIdx,proto3" json:"inst_idx,omitempty"`
	BlockId   []byte                 `protobuf:"bytes,5,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *InstructionRef) Reset() {
	*x = InstructionRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstructionRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstructionRef) ProtoMessage() {}

func (x *InstructionRef) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstructionRef.ProtoReflect.Descriptor instead.
func (*InstructionRef) Descriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{4}
}

func (x *InstructionRef) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *InstructionRef) GetTrxId() []byte {
	if x != nil {
		return x.TrxId
	}
	return nil
}

func (x *InstructionRef) GetTrxIdx() uint32 {
	if x != nil {
		return x.TrxIdx
	}
	return 0
}

func (x *InstructionRef) GetInstIdx() uint32 {
	if x != nil {
		return x.InstIdx
	}
	return 0
}

func (x *InstructionRef) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *InstructionRef) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastWrittenBlockNum uint64 `protobuf:"varint,1,opt,name=last_written_block_num,json=lastWrittenBlockNum,proto3" json:"last_written_block_num,omitempty"`
	LastWrittenBlockId  []byte `protobuf:"bytes,2,opt,name=last_written_block_id,json=lastWrittenBlockId,proto3" json:"last_written_block_id,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{5}
}

func (x *Checkpoint) GetLastWrittenBlockNum() uint64 {
	if x != nil {
		return x.LastWrittenBlockNum
	}
	return 0
}

func (x *Checkpoint) GetLastWrittenBlockId() []byte {
	if x != nil {
		return x.LastWrittenBlockId
	}
	return nil
}

type Fill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trader            []byte                 `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	Market            []byte                 `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
	OrderId           string                 `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Side              Side                   `protobuf:"varint,4,opt,name=side,proto3,enum=sf.solana.serumhist.v1.Side" json:"side,omitempty"`
	Maker             bool                   `protobuf:"varint,5,opt,name=maker,proto3" json:"maker,omitempty"`
	NativeQtyPaid     uint64                 `protobuf:"varint,6,opt,name=native_qty_paid,json=nativeQtyPaid,proto3" json:"native_qty_paid,omitempty"`
	NativeQtyReceived uint64                 `protobuf:"varint,7,opt,name=native_qty_received,json=nativeQtyReceived,proto3" json:"native_qty_received,omitempty"`
	NativeFeeOrRebate uint64                 `protobuf:"varint,8,opt,name=native_fee_or_rebate,json=nativeFeeOrRebate,proto3" json:"native_fee_or_rebate,omitempty"`
	FeeTier           FeeTier                `protobuf:"varint,9,opt,name=fee_tier,json=feeTier,proto3,enum=sf.solana.serumhist.v1.FeeTier" json:"fee_tier,omitempty"`
	Timestamp         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BlockNum          uint64                 `protobuf:"varint,20,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	BlockId           []byte                 `protobuf:"bytes,24,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	TrxId             []byte                 `protobuf:"bytes,25,opt,name=trx_id,json=trxId,proto3" json:"trx_id,omitempty"`
	TrxIdx            uint32                 `protobuf:"varint,21,opt,name=trx_idx,json=trxIdx,proto3" json:"trx_idx,omitempty"`
	InstIdx           uint32                 `protobuf:"varint,22,opt,name=inst_idx,json=instIdx,proto3" json:"inst_idx,omitempty"`
	OrderSeqNum       uint64                 `protobuf:"varint,23,opt,name=order_seq_num,json=orderSeqNum,proto3" json:"order_seq_num,omitempty"`
}

func (x *Fill) Reset() {
	*x = Fill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fill) ProtoMessage() {}

func (x *Fill) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fill.ProtoReflect.Descriptor instead.
func (*Fill) Descriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{6}
}

func (x *Fill) GetTrader() []byte {
	if x != nil {
		return x.Trader
	}
	return nil
}

func (x *Fill) GetMarket() []byte {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *Fill) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Fill) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BID
}

func (x *Fill) GetMaker() bool {
	if x != nil {
		return x.Maker
	}
	return false
}

func (x *Fill) GetNativeQtyPaid() uint64 {
	if x != nil {
		return x.NativeQtyPaid
	}
	return 0
}

func (x *Fill) GetNativeQtyReceived() uint64 {
	if x != nil {
		return x.NativeQtyReceived
	}
	return 0
}

func (x *Fill) GetNativeFeeOrRebate() uint64 {
	if x != nil {
		return x.NativeFeeOrRebate
	}
	return 0
}

func (x *Fill) GetFeeTier() FeeTier {
	if x != nil {
		return x.FeeTier
	}
	return FeeTier_Base
}

func (x *Fill) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Fill) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *Fill) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *Fill) GetTrxId() []byte {
	if x != nil {
		return x.TrxId
	}
	return nil
}

func (x *Fill) GetTrxIdx() uint32 {
	if x != nil {
		return x.TrxIdx
	}
	return 0
}

func (x *Fill) GetInstIdx() uint32 {
	if x != nil {
		return x.InstIdx
	}
	return 0
}

func (x *Fill) GetOrderSeqNum() uint64 {
	if x != nil {
		return x.OrderSeqNum
	}
	return 0
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num         uint64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Market      []byte    `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
	Trader      []byte    `protobuf:"bytes,3,opt,name=trader,proto3" json:"trader,omitempty"`
	Side        Side      `protobuf:"varint,4,opt,name=side,proto3,enum=sf.solana.serumhist.v1.Side" json:"side,omitempty"`
	LimitPrice  uint64    `protobuf:"varint,5,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`
	MaxQuantity uint64    `protobuf:"varint,6,opt,name=max_quantity,json=maxQuantity,proto3" json:"max_quantity,omitempty"`
	Type        OrderType `protobuf:"varint,7,opt,name=type,proto3,enum=sf.solana.serumhist.v1.OrderType" json:"type,omitempty"`
	Fills       []*Fill   `protobuf:"bytes,10,rep,name=fills,proto3" json:"fills,omitempty"` // this only gets populated for transport
	BlockNum    uint64    `protobuf:"varint,20,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	BlockId     []byte    `protobuf:"bytes,24,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	TrxId       []byte    `protobuf:"bytes,25,opt,name=trx_id,json=trxId,proto3" json:"trx_id,omitempty"`
	TrxIdx      uint32    `protobuf:"varint,21,opt,name=trx_idx,json=trxIdx,proto3" json:"trx_idx,omitempty"`
	InstIdx     uint32    `protobuf:"varint,22,opt,name=inst_idx,json=instIdx,proto3" json:"inst_idx,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP(), []int{7}
}

func (x *Order) GetNum() uint64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *Order) GetMarket() []byte {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *Order) GetTrader() []byte {
	if x != nil {
		return x.Trader
	}
	return nil
}

func (x *Order) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BID
}

func (x *Order) GetLimitPrice() uint64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *Order) GetMaxQuantity() uint64 {
	if x != nil {
		return x.MaxQuantity
	}
	return 0
}

func (x *Order) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_LIMIT
}

func (x *Order) GetFills() []*Fill {
	if x != nil {
		return x.Fills
	}
	return nil
}

func (x *Order) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *Order) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *Order) GetTrxId() []byte {
	if x != nil {
		return x.TrxId
	}
	return nil
}

func (x *Order) GetTrxIdx() uint32 {
	if x != nil {
		return x.TrxIdx
	}
	return 0
}

func (x *Order) GetInstIdx() uint32 {
	if x != nil {
		return x.InstIdx
	}
	return 0
}

var File_sf_solana_serumhist_v1_serumhist_proto protoreflect.FileDescriptor

var file_sf_solana_serumhist_v1_serumhist_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x66, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x75,
	0x6d, 0x68, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x41, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x22, 0x5c, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f,
	0x72, 0x65, 0x22, 0x46, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc1, 0x05, 0x0a, 0x0f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73,
	0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x6c, 0x52, 0x09, 0x61, 0x64, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x4a,
	0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x22, 0x6b, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x04, 0x22, 0xcd,
	0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x15,
	0x0a, 0x06, 0x74, 0x72, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x74, 0x72, 0x78, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x78, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x72, 0x78, 0x49, 0x64, 0x78, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x74,
	0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c, 0x61,
	0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x22, 0xbf, 0x04, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x51, 0x74, 0x79, 0x50, 0x61, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65,
	0x65, 0x4f, 0x72, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x66, 0x65, 0x65,
	0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x54, 0x69, 0x65, 0x72, 0x52, 0x07, 0x66, 0x65,
	0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x72, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x72, 0x78, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x72, 0x78, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x72, 0x78, 0x49, 0x64, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x49,
	0x64, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x22, 0xad, 0x03, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x75, 0x6d, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d,
	0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x66, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x72, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x72, 0x78,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x78, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x72, 0x78, 0x49, 0x64, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x49, 0x64, 0x78, 0x2a, 0x18, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x49, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x4b, 0x10, 0x01,
	0x2a, 0x4f, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x61, 0x73, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x52, 0x4d, 0x32, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x52, 0x4d, 0x33, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x52, 0x4d,
	0x34, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x52, 0x4d, 0x35, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x52, 0x4d, 0x36, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x53, 0x52, 0x4d, 0x10,
	0x06, 0x2a, 0x3e, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4d, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x02, 0x32, 0x77, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x75,
	0x6d, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x32, 0x6a, 0x0a, 0x0c, 0x53, 0x65,
	0x72, 0x75, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x75,
	0x6d, 0x68, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61,
	0x73, 0x74, 0x2f, 0x73, 0x66, 0x2d, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x62, 0x2f,
	0x73, 0x66, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68,
	0x69, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x73, 0x65, 0x72, 0x75, 0x6d, 0x68, 0x69,
	0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_solana_serumhist_v1_serumhist_proto_rawDescOnce sync.Once
	file_sf_solana_serumhist_v1_serumhist_proto_rawDescData = file_sf_solana_serumhist_v1_serumhist_proto_rawDesc
)

func file_sf_solana_serumhist_v1_serumhist_proto_rawDescGZIP() []byte {
	file_sf_solana_serumhist_v1_serumhist_proto_rawDescOnce.Do(func() {
		file_sf_solana_serumhist_v1_serumhist_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_solana_serumhist_v1_serumhist_proto_rawDescData)
	})
	return file_sf_solana_serumhist_v1_serumhist_proto_rawDescData
}

var file_sf_solana_serumhist_v1_serumhist_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_sf_solana_serumhist_v1_serumhist_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_sf_solana_serumhist_v1_serumhist_proto_goTypes = []interface{}{
	(Side)(0),                       // 0: sf.solana.serumhist.v1.Side
	(FeeTier)(0),                    // 1: sf.solana.serumhist.v1.FeeTier
	(OrderType)(0),                  // 2: sf.solana.serumhist.v1.OrderType
	(OrderTransition_State)(0),      // 3: sf.solana.serumhist.v1.OrderTransition.State
	(OrderTransition_Transition)(0), // 4: sf.solana.serumhist.v1.OrderTransition.Transition
	(*GetFillsRequest)(nil),         // 5: sf.solana.serumhist.v1.GetFillsRequest
	(*FillsResponse)(nil),           // 6: sf.solana.serumhist.v1.FillsResponse
	(*TrackOrderRequest)(nil),       // 7: sf.solana.serumhist.v1.TrackOrderRequest
	(*OrderTransition)(nil),         // 8: sf.solana.serumhist.v1.OrderTransition
	(*InstructionRef)(nil),          // 9: sf.solana.serumhist.v1.InstructionRef
	(*Checkpoint)(nil),              // 10: sf.solana.serumhist.v1.Checkpoint
	(*Fill)(nil),                    // 11: sf.solana.serumhist.v1.Fill
	(*Order)(nil),                   // 12: sf.solana.serumhist.v1.Order
	(*timestamppb.Timestamp)(nil),   // 13: google.protobuf.Timestamp
}
var file_sf_solana_serumhist_v1_serumhist_proto_depIdxs = []int32{
	11, // 0: sf.solana.serumhist.v1.FillsResponse.fill:type_name -> sf.solana.serumhist.v1.Fill
	3,  // 1: sf.solana.serumhist.v1.OrderTransition.previous_state:type_name -> sf.solana.serumhist.v1.OrderTransition.State
	3,  // 2: sf.solana.serumhist.v1.OrderTransition.current_state:type_name -> sf.solana.serumhist.v1.OrderTransition.State
	4,  // 3: sf.solana.serumhist.v1.OrderTransition.transition:type_name -> sf.solana.serumhist.v1.OrderTransition.Transition
	12, // 4: sf.solana.serumhist.v1.OrderTransition.order:type_name -> sf.solana.serumhist.v1.Order
	11, // 5: sf.solana.serumhist.v1.OrderTransition.added_fill:type_name -> sf.solana.serumhist.v1.Fill
	9,  // 6: sf.solana.serumhist.v1.OrderTransition.cancellation:type_name -> sf.solana.serumhist.v1.InstructionRef
	13, // 7: sf.solana.serumhist.v1.InstructionRef.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 8: sf.solana.serumhist.v1.Fill.side:type_name -> sf.solana.serumhist.v1.Side
	1,  // 9: sf.solana.serumhist.v1.Fill.fee_tier:type_name -> sf.solana.serumhist.v1.FeeTier
	13, // 10: sf.solana.serumhist.v1.Fill.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 11: sf.solana.serumhist.v1.Order.side:type_name -> sf.solana.serumhist.v1.Side
	2,  // 12: sf.solana.serumhist.v1.Order.type:type_name -> sf.solana.serumhist.v1.OrderType
	11, // 13: sf.solana.serumhist.v1.Order.fills:type_name -> sf.solana.serumhist.v1.Fill
	7,  // 14: sf.solana.serumhist.v1.SerumOrderTracker.TrackOrder:input_type -> sf.solana.serumhist.v1.TrackOrderRequest
	5,  // 15: sf.solana.serumhist.v1.SerumHistory.GetFills:input_type -> sf.solana.serumhist.v1.GetFillsRequest
	8,  // 16: sf.solana.serumhist.v1.SerumOrderTracker.TrackOrder:output_type -> sf.solana.serumhist.v1.OrderTransition
	6,  // 17: sf.solana.serumhist.v1.SerumHistory.GetFills:output_type -> sf.solana.serumhist.v1.FillsResponse
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_sf_solana_serumhist_v1_serumhist_proto_init() }
func file_sf_solana_serumhist_v1_serumhist_proto_init() {
	if File_sf_solana_serumhist_v1_serumhist_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFillsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FillsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTransition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstructionRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_serumhist_v1_serumhist_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_solana_serumhist_v1_serumhist_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_sf_solana_serumhist_v1_serumhist_proto_goTypes,
		DependencyIndexes: file_sf_solana_serumhist_v1_serumhist_proto_depIdxs,
		EnumInfos:         file_sf_solana_serumhist_v1_serumhist_proto_enumTypes,
		MessageInfos:      file_sf_solana_serumhist_v1_serumhist_proto_msgTypes,
	}.Build()
	File_sf_solana_serumhist_v1_serumhist_proto = out.File
	file_sf_solana_serumhist_v1_serumhist_proto_rawDesc = nil
	file_sf_solana_serumhist_v1_serumhist_proto_goTypes = nil
	file_sf_solana_serumhist_v1_serumhist_proto_depIdxs = nil
}
