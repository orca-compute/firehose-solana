schema {
  query: Queries
  subscription: Subscription
}

type Queries {
  tokens: [TokenResponse!]!
  token(address: String!): TokenResponse
  registeredTokens: [RegisteredTokenResponse!]!
  registeredToken(address: String!): RegisteredTokenResponse
}

type Subscription {
  serumInstructionHistory(account: String!): SerumInstructionResponse
}

type SerumInstructionResponse {
  trxSignature: String!
  trxError: Boolean!
  instruction: SerumInstruction
}

union SerumInstruction = UndecodedInstruction | SerumInitializeMarket | SerumNewOrder | SerumMatchOrder | SerumConsumeEvents | SerumCancelOrder | SerumSettleFunds | SerumCancelOrderByClientId

type UndecodedInstruction {
  programIDIndex: Uint64!
  accountCount:   Uint64!
  accounts:       [Uint64!]!
  dataLength:     Uint64!
  data:           String!
  error:          String!
}

type SerumInitializeMarketAccounts {
  market: String!
  splCoinToken: String!
  splPriceToken: String!
  coinMint: String!
  priceMint: String!
}

type SerumInitializeMarket {
  baseLotSize: Uint64!
  quoteLotSize: Uint64!
  feeRateBps: Uint64!
  vaultSignerNonce: Uint64!
  quoteDustThreshold: Uint64!

  accounts : SerumInitializeMarketAccounts!
}

type Account {
  publicKey:  String!
  isSigner:   Boolean!
  isWritable: Boolean!
}
type SerumNewOrderAccounts {
  market: Account!
  openOrders: Account!
  requestQueue: Account!
  payer: Account!
  owner: Account!
  coinVault: Account!
  pcVault: Account!
  splTokenProgram: Account!
  rent: Account!
  srmDiscount: Account
}

type SerumNewOrder {
  side:        SideType!
  limitPrice:  Uint64!
  maxQuantity: Uint64!
  orderType:   OrderType!
  clientID:    Uint64!


  accounts: SerumNewOrderAccounts!
}

type SerumMatchOrderAccounts {
  market: Account!
  requestQueue: Account!
  eventQueue: Account!
  bids: Account!
  asks: Account!
  coinFeeReceivable: Account!
  pcFeeReceivable: Account!
}
type SerumMatchOrder {
  limit: Uint64!

  accounts : SerumMatchOrderAccounts!
}

type SerumConsumeEventsAccounts {
  openOrders: [Account!]!
  market: Account!
  eventQueue: Account!
  coinFeeReceivable: Account!
  pcFeeReceivable: Account!
}
type SerumConsumeEvents {
  limit: Uint64!

  accounts: SerumConsumeEventsAccounts!
}

type SerumCancelOrderAccounts {
  market: Account!
  requestQueue: Account!
  owner: Account!
}
type SerumCancelOrder {
  side: SideType!
  orderId: String!
  openOrders: String!
  openOrderSlot: Uint64!
  accounts: SerumCancelOrderAccounts!
}

type SerumSettleFundsAccounts{
  market: Account!
  openOrders: Account!
  owner: Account!
  coinVault: Account!
  pcVault: Account!
  coinWallet: Account!
  pcWallet: Account!
  signer: Account!
  splTokenProgram: Account!
  referrerPCWallet: Account
}
type SerumSettleFunds {
  accounts : SerumSettleFundsAccounts!
}

type SerumCancelOrderByClientIdAccounts {
  market: Account!
  openOrders: Account!
  requestQueue: Account!
  owner: Account!
}
type SerumCancelOrderByClientId {
  clientID: Uint64!
  accounts: SerumCancelOrderByClientIdAccounts!
}

enum SideType {
  ASK
  BID
  UNKNOWN
}

enum OrderType {
  LIMIT
  IMMEDIATE_OR_CANCEL
  POST_ONLY
  UNKNOWN
}

type RegisteredTokenResponse {
  address: String!
  mintAuthority: String!
  freezeAuthority: String!
  supply: Uint64!
  decimals: Int!
  symbol: String!
  name: String!
  logo: String!
  website: String!
}
type TokenResponse {
  address: String!
  mintAuthority: String!
  freezeAuthority: String!
  supply: Uint64!
  decimals: Int!
}

scalar Uint64
scalar JSON
