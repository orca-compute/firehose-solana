// Copyright 2019 dfuse Platform Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package codec

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"testing"

	pbcodec "github.com/dfuse-io/dfuse-solana/pb/dfuse/solana/codec/v1"
	"github.com/dfuse-io/solana-go/text"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_ReadSlot(t *testing.T) {
	tests := []struct {
		name              string
		line              string
		expectedSlotCount int
		expectedErr       []error
	}{
		{
			"received slot num before last seen one",
			`
DMLOG SLOT_PROCESS full 56967947 51gDaR9uZ6reFhg4C9fTytbjoadr3yjzwbwJrQ2GNebp FmvgPghmjenKAb4ysiRywQL7AkAviTSic322NMstpayr FmvgPghmjenKAb4ysiRywQL7AkAviTSic322NMstpayr 3645948608 53156012 56967482 56967947 337 56967482 56967898 526 483 399
DMLOG SLOT_END 56967947 1607156118 1608747966
DMLOG SLOT_PROCESS partial 56967924 11111111111111111111111111111111 E7Af21AZxcuUg5jH9FbKYnF5eUbgG8QVbHeuPpa8PL9C E7Af21AZxcuUg5jH9FbKYnF5eUbgG8QVbHeuPpa8PL9C 3645947136 53155993 56967485 56967924 317 56967485 56967899 0 0 0
DMLOG SLOT_PROCESS full 56967948 3eoAssxZszc6X8XZkjVJmYgsXiHgrLEfSMtpPoMEuViS 51gDaR9uZ6reFhg4C9fTytbjoadr3yjzwbwJrQ2GNebp 51gDaR9uZ6reFhg4C9fTytbjoadr3yjzwbwJrQ2GNebp 3645948672 53156013 56967485 56967948 337 56967485 56967899 457 402 355
			`,
			1,
			nil,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			buf := bytes.NewBufferString(test.line)

			cr, err := NewConsoleReader(buf)
			require.NoError(t, err)

			slotCount := 0
			for {
				o, err := cr.Read()
				if err == io.EOF {
					break
				}

				if test.expectedErr == nil {
					require.NoError(t, err)
				} else if slotCount < len(test.expectedErr) {
					require.Equal(t, test.expectedErr[slotCount], err)
				}

				fmt.Println(o)
				slotCount++
			}

			assert.Equal(t, test.expectedSlotCount, slotCount, "Expected to have read %d slot, read only %d", test.expectedSlotCount, slotCount)

			if test.expectedErr != nil {
				require.Equal(t, len(test.expectedErr), slotCount, "Your test expected errors does not match amount of slot read, read %d slots, but you have %d errors defined", slotCount)
			}
		})
	}
}

func Test_readSlot_Process(t *testing.T) {
	tests := []struct {
		name        string
		line        string
		expectedErr error
	}{
		{
			"SLOT PROCESS full",
			`SLOT_PROCESS full 0 GTWZGyjoRJTQ9rAdxyMiXYXef2aQwCTGiePYcfFXto2h GTWZGyjoRJTQ9rAdxyMiXYXef2aQwCTGiePYcfFXto2h GTWZGyjoRJTQ9rAdxyMiXYXef2aQwCTGiePYcfFXto2h 0 0 0 0 1 0 0 64 0 3`,
			nil,
		},
		{
			"SLOT PROCESS partial",
			`SLOT_PROCESS full 0 GTWZGyjoRJTQ9rAdxyMiXYXef2aQwCTGiePYcfFXto2h GTWZGyjoRJTQ9rAdxyMiXYXef2aQwCTGiePYcfFXto2h GTWZGyjoRJTQ9rAdxyMiXYXef2aQwCTGiePYcfFXto2h 0 0 0 0 1 0 0 64 0 3`,
			nil,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			ctx := newParseCtx()
			err := ctx.readSlotProcess(test.line)

			require.Equal(t, test.expectedErr, err)

			err = text.NewEncoder(os.Stdout).Encode(ctx.slot, nil)
			require.NoError(t, err)
			//fmt.Println("out:", string(buf.Bytes()))
		})
	}
}

func Test_readTransaction_Start(t *testing.T) {
	t.Skip("Seems this test is not in line with deep mind output")

	tests := []struct {
		name        string
		line        string
		expectedErr error
	}{
		{
			"TRANSACTION good",
			`TRANSACTION START 2KQspsbTqezudMvUTdjYdFHx37M1LKF1iUU6BW6jpmuvBifwsypFiHECipasaF9fUuorz4thi3fsCcmokh2AXVfN 0100030520492cf7f4b78fcb0993860cea450edd343e36187aed68c366e6420b63a08d1509a4358fa8bde757dc294e4562866094db00ce9f2d8f3cd4f243afb9a0e0798c06a7d517192f0aafc6f265e3fb77cc7ada82c529d0be3b136e2d00552000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b21000000000761481d357474bb7c4d7624ebd3bdb3d8355e73d11043fc0da3538000000000e91b52701a3abe9afe583beff4e75914573207499b463577958da9e66b5bddc10104040102030045020000000200000000000000d09b3b0300000000d19b3b0300000000e0c76fe89639cb93719e58ce9776c14caf83e4ed3e3c007f72f25638c436252a01c112d15f00000000`,
			nil,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			ctx := newParseCtx()
			err := ctx.readTransactionStart(test.line)

			require.Equal(t, test.expectedErr, err)

			err = text.NewEncoder(os.Stdout).Encode(ctx.slot, nil)
			require.NoError(t, err)
			//fmt.Println("out:", string(buf.Bytes()))

		})
	}
}

func Test_readTransaction_End(t *testing.T) {
	t.Skip("Seems this test is not in line with deep mind output")

	tests := []struct {
		name        string
		line        string
		expectedErr error
	}{
		{
			"TRANSACTION End good",
			`TRANSACTION END rAdPUg2K43akS1gCNsxzzsBU2Uiav3c2c796A7vin67X29X312LEb7GyoSPxNcEgoUmbCesXU2QgNy2TKcAnxZD`,
			nil,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			ctx := newParseCtx()
			err := ctx.readTransactionEnd(test.line)

			require.Equal(t, test.expectedErr, err)

			err = text.NewEncoder(os.Stdout).Encode(ctx.slot, nil)
			require.NoError(t, err)
			//fmt.Println("out:", string(buf.Bytes()))

		})
	}
}

func Test_readInstruction_Start(t *testing.T) {
	t.Skip("Seems this test is not in line with deep mind output")

	tests := []struct {
		name        string
		trxID       string
		line        string
		expectedErr error
	}{
		{
			name:        "Instruction good",
			trxID:       "2KQspsbTqezudMvUTdjYdFHx37M1LKF1iUU6BW6jpmuvBifwsypFiHECipasaF9fUuorz4thi3fsCcmokh2AXVfN",
			line:        `INSTRUCTION START 2KQspsbTqezudMvUTdjYdFHx37M1LKF1iUU6BW6jpmuvBifwsypFiHECipasaF9fUuorz4thi3fsCcmokh2AXVfN 1 0 Vote111111111111111111111111111111111111111 020000000200000000000000d09b3b0300000000d19b3b0300000000e0c76fe89639cb93719e58ce9776c14caf83e4ed3e3c007f72f25638c436252a01c112d15f00000000`,
			expectedErr: nil,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			ctx := newParseCtx()
			ctx.trxMap[test.trxID] = &pbcodec.Transaction{}
			err := ctx.readInstructionStart(test.line)

			require.Equal(t, test.expectedErr, err)

			text.NewEncoder(os.Stdout).Encode(ctx, nil)

		})
	}
}

func Test_readAccountChange_Start(t *testing.T) {
	t.Skip("Seems this test is not in line with deep mind output")

	tests := []struct {
		name        string
		trxID       string
		line        string
		expectedErr error
	}{
		{
			name:        "Account change",
			trxID:       "GDRAZ4PbkN3gkHguvoQMRGgz8wXZvoniapcLXLDjg4n2adfmUE9apaEK9fs9vVWLXk1Dv7hGLTnNJdnLVHUNqHp",
			line:        `ACCOUNT_CHANGE 4cPzbDZerMNa5ubB3atuuXSa3ehpLMDQ1L8cKZX7ka9pUP5dMJuKcsmBVYYDE1EKRja8UPioHd95PXBUtrdrWSMk 1 AVLN9vwtAtvDFWZJH1jmHi9p2XrRnQKM3bqGy738DKhG 01000000d1ee412af80c981c822eaa2013080b1dffd0cf127b83e63cf99d4485f6bb2d3ed1ee412af80c981c822eaa2013080b1dffd0cf127b83e63cf99d4485f6bb2d3e6400000000000000000001000000000000000000000000000000d1ee412af80c981c822eaa2013080b1dffd0cf127b83e63cf99d4485f6bb2d3efd1ee412af80c981c822eaa2013080b1dffd0cf127b83e63cf99d4485f6bb2d3ed1ee412af80c981c822eaa2013080b1dffd0cf127b83e63cf99d4485f6bb2d3e6401000000000000000000000000000000010000000001000000000000000000000000000000d1ee412af80c981c822eaa2013080b1dffd0cf127b83e63cf99d4485f6bb2d3ef00000000000000010000000000000000000000000000000015d4d85f`,
			expectedErr: nil,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			ctx := newParseCtx()
			ctx.trxMap[test.trxID] = &pbcodec.Transaction{
				Instructions: []*pbcodec.Instruction{{}},
			}
			err := ctx.readAccountChange(test.line)
			require.Equal(t, test.expectedErr, err)
			text.NewEncoder(os.Stdout).Encode(ctx, nil)

		})
	}
}

func Test_readLamportChange(t *testing.T) {
	tests := []struct {
		name        string
		trxID       string
		line        string
		expectedErr error
	}{
		{
			name:        "Lamport change",
			trxID:       "rAdPUg2K43akS1gCNsxzzsBU2Uiav3c2c796A7vin67X29X312LEb7GyoSPxNcEgoUmbCesXU2QgNy2TKcAnxZD",
			line:        `LAMPORT_CHANGE rAdPUg2K43akS1gCNsxzzsBU2Uiav3c2c796A7vin67X29X312LEb7GyoSPxNcEgoUmbCesXU2QgNy2TKcAnxZD 1 11111111111111111111111111111111 0 5000000000`,
			expectedErr: nil,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			ctx := newParseCtx()
			ctx.trxMap[test.trxID] = &pbcodec.Transaction{
				Instructions: []*pbcodec.Instruction{{}},
			}
			err := ctx.readLamportsChange(test.line)
			require.Equal(t, test.expectedErr, err)
			text.NewEncoder(os.Stdout).Encode(ctx, nil)

		})
	}
}

func Test_fromFile(t *testing.T) {
	t.Skip("Seems this test is not in line with deep mind output")

	f, err := os.Open("./test_data/syncer.dmlog")
	require.NoError(t, err)

	cr, err := NewConsoleReader(f)
	require.NoError(t, err)
	for {
		o, err := cr.Read()
		require.NoError(t, err)
		fmt.Println(o)
	}
}
