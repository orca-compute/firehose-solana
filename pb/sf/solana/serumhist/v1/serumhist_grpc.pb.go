// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pbserumhist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SerumOrderTrackerClient is the client API for SerumOrderTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SerumOrderTrackerClient interface {
	TrackOrder(ctx context.Context, in *TrackOrderRequest, opts ...grpc.CallOption) (SerumOrderTracker_TrackOrderClient, error)
}

type serumOrderTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewSerumOrderTrackerClient(cc grpc.ClientConnInterface) SerumOrderTrackerClient {
	return &serumOrderTrackerClient{cc}
}

func (c *serumOrderTrackerClient) TrackOrder(ctx context.Context, in *TrackOrderRequest, opts ...grpc.CallOption) (SerumOrderTracker_TrackOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &SerumOrderTracker_ServiceDesc.Streams[0], "/sf.solana.serumhist.v1.SerumOrderTracker/TrackOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &serumOrderTrackerTrackOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SerumOrderTracker_TrackOrderClient interface {
	Recv() (*OrderTransition, error)
	grpc.ClientStream
}

type serumOrderTrackerTrackOrderClient struct {
	grpc.ClientStream
}

func (x *serumOrderTrackerTrackOrderClient) Recv() (*OrderTransition, error) {
	m := new(OrderTransition)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SerumOrderTrackerServer is the server API for SerumOrderTracker service.
// All implementations should embed UnimplementedSerumOrderTrackerServer
// for forward compatibility
type SerumOrderTrackerServer interface {
	TrackOrder(*TrackOrderRequest, SerumOrderTracker_TrackOrderServer) error
}

// UnimplementedSerumOrderTrackerServer should be embedded to have forward compatible implementations.
type UnimplementedSerumOrderTrackerServer struct {
}

func (UnimplementedSerumOrderTrackerServer) TrackOrder(*TrackOrderRequest, SerumOrderTracker_TrackOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method TrackOrder not implemented")
}

// UnsafeSerumOrderTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SerumOrderTrackerServer will
// result in compilation errors.
type UnsafeSerumOrderTrackerServer interface {
	mustEmbedUnimplementedSerumOrderTrackerServer()
}

func RegisterSerumOrderTrackerServer(s grpc.ServiceRegistrar, srv SerumOrderTrackerServer) {
	s.RegisterService(&SerumOrderTracker_ServiceDesc, srv)
}

func _SerumOrderTracker_TrackOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrackOrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SerumOrderTrackerServer).TrackOrder(m, &serumOrderTrackerTrackOrderServer{stream})
}

type SerumOrderTracker_TrackOrderServer interface {
	Send(*OrderTransition) error
	grpc.ServerStream
}

type serumOrderTrackerTrackOrderServer struct {
	grpc.ServerStream
}

func (x *serumOrderTrackerTrackOrderServer) Send(m *OrderTransition) error {
	return x.ServerStream.SendMsg(m)
}

// SerumOrderTracker_ServiceDesc is the grpc.ServiceDesc for SerumOrderTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SerumOrderTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.solana.serumhist.v1.SerumOrderTracker",
	HandlerType: (*SerumOrderTrackerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TrackOrder",
			Handler:       _SerumOrderTracker_TrackOrder_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sf/solana/serumhist/v1/serumhist.proto",
}

// SerumHistoryClient is the client API for SerumHistory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SerumHistoryClient interface {
	GetFills(ctx context.Context, in *GetFillsRequest, opts ...grpc.CallOption) (*FillsResponse, error)
}

type serumHistoryClient struct {
	cc grpc.ClientConnInterface
}

func NewSerumHistoryClient(cc grpc.ClientConnInterface) SerumHistoryClient {
	return &serumHistoryClient{cc}
}

func (c *serumHistoryClient) GetFills(ctx context.Context, in *GetFillsRequest, opts ...grpc.CallOption) (*FillsResponse, error) {
	out := new(FillsResponse)
	err := c.cc.Invoke(ctx, "/sf.solana.serumhist.v1.SerumHistory/GetFills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SerumHistoryServer is the server API for SerumHistory service.
// All implementations should embed UnimplementedSerumHistoryServer
// for forward compatibility
type SerumHistoryServer interface {
	GetFills(context.Context, *GetFillsRequest) (*FillsResponse, error)
}

// UnimplementedSerumHistoryServer should be embedded to have forward compatible implementations.
type UnimplementedSerumHistoryServer struct {
}

func (UnimplementedSerumHistoryServer) GetFills(context.Context, *GetFillsRequest) (*FillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFills not implemented")
}

// UnsafeSerumHistoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SerumHistoryServer will
// result in compilation errors.
type UnsafeSerumHistoryServer interface {
	mustEmbedUnimplementedSerumHistoryServer()
}

func RegisterSerumHistoryServer(s grpc.ServiceRegistrar, srv SerumHistoryServer) {
	s.RegisterService(&SerumHistory_ServiceDesc, srv)
}

func _SerumHistory_GetFills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SerumHistoryServer).GetFills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.solana.serumhist.v1.SerumHistory/GetFills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SerumHistoryServer).GetFills(ctx, req.(*GetFillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SerumHistory_ServiceDesc is the grpc.ServiceDesc for SerumHistory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SerumHistory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.solana.serumhist.v1.SerumHistory",
	HandlerType: (*SerumHistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFills",
			Handler:    _SerumHistory_GetFills_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sf/solana/serumhist/v1/serumhist.proto",
}
