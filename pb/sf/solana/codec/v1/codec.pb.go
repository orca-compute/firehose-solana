// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: sf/solana/codec/v1/codec.proto

package pbcodec

import (
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TransactionErrorType int32

const (
	/// An account is already being processed in another transaction in a way
	/// that does not support parallelism
	// Account in use"
	TransactionErrorType_ACCOUNT_IN_USE TransactionErrorType = 0
	/// A `Pubkey` appears twice in the transaction's `account_keys`.  Instructions can reference
	/// `Pubkey`s more than once but the message must contain a list with no duplicate keys
	// Account loaded twice"
	TransactionErrorType_ACCOUNT_LOADED_TWICE TransactionErrorType = 1
	/// Attempt to debit an account but found no record of a prior credit.
	// Attempt to debit an account but found no record of a prior credit."
	TransactionErrorType_ACCOUNT_NOT_FOUND TransactionErrorType = 2
	/// Attempt to load a program that does not exist
	// Attempt to load a program that does not exist"
	TransactionErrorType_PROGRAM_ACCOUNT_NOT_FOUND TransactionErrorType = 3
	/// The from `Pubkey` does not have sufficient balance to pay the fee to schedule the transaction
	// Insufficient funds for fee"
	TransactionErrorType_INSUFFICIENT_FUNDS_FOR_FEE TransactionErrorType = 4
	/// This account may not be used to pay transaction fees
	// This account may not be used to pay transaction fees"
	TransactionErrorType_INVALID_ACCOUNT_FOR_FEE TransactionErrorType = 5
	/// The bank has seen this `Signature` before. This can occur under normal operation
	/// when a UDP packet is duplicated, as a user error from a client not updating
	/// its `recent_blockhash`, or as a double-spend attack.
	// The bank has seen this signature before"
	TransactionErrorType_DUPLICATE_SIGNATURE TransactionErrorType = 6
	/// The bank has not seen the given `recent_blockhash` or the transaction is too old and
	/// the `recent_blockhash` has been discarded.
	// Blockhash not found"
	TransactionErrorType_BLOCKHASH_NOT_FOUND TransactionErrorType = 7
	/// An error occurred while processing an instruction. The first element of the tuple
	/// indicates the instruction index in which the error occurred.
	// Error processing Instruction {0}: {1}"
	TransactionErrorType_INSTRUCTION_ERROR TransactionErrorType = 8
	/// Loader call chain is too deep
	// Loader call chain is too deep"
	TransactionErrorType_CALL_CHAIN_TOO_DEEP TransactionErrorType = 9
	/// Transaction requires a fee but has no signature present
	// Transaction requires a fee but has no signature present"
	TransactionErrorType_MISSING_SIGNATURE_FOR_FEE TransactionErrorType = 10
	/// Transaction contains an invalid account reference
	// Transaction contains an invalid account reference"
	TransactionErrorType_INVALID_ACCOUNT_INDEX TransactionErrorType = 11
	/// Transaction did not pass signature verification
	// Transaction did not pass signature verification"
	TransactionErrorType_SIGNATURE_FAILURE TransactionErrorType = 12
	/// This program may not be used for executing instructions
	// This program may not be used for executing instructions"
	TransactionErrorType_INVALID_PROGRAM_FOR_EXECUTION TransactionErrorType = 13
	/// Transaction failed to sanitize accounts offsets correctly
	/// implies that account locks are not taken for this TX, and should
	/// not be unlocked.
	// Transaction failed to sanitize accounts offsets correctly"
	TransactionErrorType_SANITIZE_FAILURE TransactionErrorType = 14
	// Transactions are currently disabled due to cluster maintenance"
	TransactionErrorType_CLUSTER_MAINTENANCE TransactionErrorType = 15
)

// Enum value maps for TransactionErrorType.
var (
	TransactionErrorType_name = map[int32]string{
		0:  "ACCOUNT_IN_USE",
		1:  "ACCOUNT_LOADED_TWICE",
		2:  "ACCOUNT_NOT_FOUND",
		3:  "PROGRAM_ACCOUNT_NOT_FOUND",
		4:  "INSUFFICIENT_FUNDS_FOR_FEE",
		5:  "INVALID_ACCOUNT_FOR_FEE",
		6:  "DUPLICATE_SIGNATURE",
		7:  "BLOCKHASH_NOT_FOUND",
		8:  "INSTRUCTION_ERROR",
		9:  "CALL_CHAIN_TOO_DEEP",
		10: "MISSING_SIGNATURE_FOR_FEE",
		11: "INVALID_ACCOUNT_INDEX",
		12: "SIGNATURE_FAILURE",
		13: "INVALID_PROGRAM_FOR_EXECUTION",
		14: "SANITIZE_FAILURE",
		15: "CLUSTER_MAINTENANCE",
	}
	TransactionErrorType_value = map[string]int32{
		"ACCOUNT_IN_USE":                0,
		"ACCOUNT_LOADED_TWICE":          1,
		"ACCOUNT_NOT_FOUND":             2,
		"PROGRAM_ACCOUNT_NOT_FOUND":     3,
		"INSUFFICIENT_FUNDS_FOR_FEE":    4,
		"INVALID_ACCOUNT_FOR_FEE":       5,
		"DUPLICATE_SIGNATURE":           6,
		"BLOCKHASH_NOT_FOUND":           7,
		"INSTRUCTION_ERROR":             8,
		"CALL_CHAIN_TOO_DEEP":           9,
		"MISSING_SIGNATURE_FOR_FEE":     10,
		"INVALID_ACCOUNT_INDEX":         11,
		"SIGNATURE_FAILURE":             12,
		"INVALID_PROGRAM_FOR_EXECUTION": 13,
		"SANITIZE_FAILURE":              14,
		"CLUSTER_MAINTENANCE":           15,
	}
)

func (x TransactionErrorType) Enum() *TransactionErrorType {
	p := new(TransactionErrorType)
	*p = x
	return p
}

func (x TransactionErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_solana_codec_v1_codec_proto_enumTypes[0].Descriptor()
}

func (TransactionErrorType) Type() protoreflect.EnumType {
	return &file_sf_solana_codec_v1_codec_proto_enumTypes[0]
}

func (x TransactionErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionErrorType.Descriptor instead.
func (TransactionErrorType) EnumDescriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{0}
}

type InstructionErrorType int32

const (
	/// Deprecated! Use CustomError instead! The program instruction returned an error
	// generic instruction error
	InstructionErrorType_GENERIC_ERROR InstructionErrorType = 0
	/// The arguments provided to a program were invalid
	// invalid program argument
	InstructionErrorType_INVALID_ARGUMENT InstructionErrorType = 1
	/// An instruction's data contents were invalid
	// invalid instruction data
	InstructionErrorType_INVALID_INSTRUCTION_DATA InstructionErrorType = 2
	/// An account's data contents was invalid
	// invalid account data for instruction
	InstructionErrorType_INVALID_ACCOUNT_DATA InstructionErrorType = 3
	/// An account's data was too small
	// account data too small for instruction
	InstructionErrorType_ACCOUNT_DATA_TOO_SMALL InstructionErrorType = 4
	/// An account's balance was too small to complete the instruction
	// insufficient funds for instruction
	InstructionErrorType_INSUFFICIENT_FUNDS InstructionErrorType = 5
	/// The account did not have the expected program id
	// incorrect program id for instruction
	InstructionErrorType_INCORRECT_PROGRAM_ID InstructionErrorType = 6
	/// A signature was required but not found
	// missing required signature for instruction
	InstructionErrorType_MISSING_REQUIRED_SIGNATURE InstructionErrorType = 7
	/// An initialize instruction was sent to an account that has already been initialized.
	// instruction requires an uninitialized account
	InstructionErrorType_ACCOUNT_ALREADY_INITIALIZED InstructionErrorType = 8
	/// An attempt to operate on an account that hasn't been initialized.
	// instruction requires an initialized account
	InstructionErrorType_UNINITIALIZED_ACCOUNT InstructionErrorType = 9
	/// Program's instruction lamport balance does not equal the balance after the instruction
	// sum of account balances before and after instruction do not match
	InstructionErrorType_UNBALANCED_INSTRUCTION InstructionErrorType = 10
	/// Program modified an account's program id
	// instruction modified the program id of an account
	InstructionErrorType_MODIFIED_PROGRAM_ID InstructionErrorType = 11
	/// Program spent the lamports of an account that doesn't belong to it
	// instruction spent from the balance of an account it does not own
	InstructionErrorType_EXTERNAL_ACCOUNT_LAMPORT_SPEND InstructionErrorType = 12
	/// Program modified the data of an account that doesn't belong to it
	// instruction modified data of an account it does not own
	InstructionErrorType_EXTERNAL_ACCOUNT_DATA_MODIFIED InstructionErrorType = 13
	/// Read-only account's lamports modified
	// instruction changed the balance of a read-only account
	InstructionErrorType_READONLY_LAMPORT_CHANGE InstructionErrorType = 14
	/// Read-only account's data was modified
	// instruction modified data of a read-only account
	InstructionErrorType_READONLY_DATA_MODIFIED InstructionErrorType = 15
	/// An account was referenced more than once in a single instruction
	// Deprecated, instructions can now contain duplicate accounts
	// instruction contains duplicate accounts
	InstructionErrorType_DUPLICATE_ACCOUNT_INDEX InstructionErrorType = 16
	/// Executable bit on account changed, but shouldn't have
	// instruction changed executable bit of an account
	InstructionErrorType_EXECUTABLE_MODIFIED InstructionErrorType = 17
	/// Rent_epoch account changed, but shouldn't have
	// instruction modified rent epoch of an account
	InstructionErrorType_RENT_EPOCH_MODIFIED InstructionErrorType = 18
	/// The instruction expected additional account keys
	// insufficient account keys for instruction
	InstructionErrorType_NOT_ENOUGH_ACCOUNT_KEYS InstructionErrorType = 19
	/// A non-system program changed the size of the account data
	// non-system instruction changed account size
	InstructionErrorType_ACCOUNT_DATA_SIZE_CHANGED InstructionErrorType = 20
	/// The instruction expected an executable account
	// instruction expected an executable account
	InstructionErrorType_ACCOUNT_NOT_EXECUTABLE InstructionErrorType = 21
	/// Failed to borrow a reference to account data, already borrowed
	// instruction tries to borrow reference for an account which is already borrowed
	InstructionErrorType_ACCOUNT_BORROW_FAILED InstructionErrorType = 22
	/// Account data has an outstanding reference after a program's execution
	// instruction left account with an outstanding reference borrowed
	InstructionErrorType_ACCOUNT_BORROW_OUTSTANDING InstructionErrorType = 23
	/// The same account was multiply passed to an on-chain program's entrypoint, but the program
	/// modified them differently.  A program can only modify one instance of the account because
	/// the runtime cannot determine which changes to pick or how to merge them if both are modified
	// instruction modifications of multiply-passed account differ
	InstructionErrorType_DUPLICATE_ACCOUNT_OUT_OF_SYNC InstructionErrorType = 24
	/// Allows on-chain programs to implement program-specific error types and see them returned
	/// by the Solana runtime. A program-specific error may be any type that is represented as
	/// or serialized to a u32 integer.
	// custom program error: {0:#x}
	InstructionErrorType_CUSTOM InstructionErrorType = 25
	/// The return value from the program was invalid.  Valid errors are either a defined builtin
	/// error value or a user-defined error in the lower 32 bits.
	// program returned invalid error code
	InstructionErrorType_INVALID_ERROR InstructionErrorType = 26
	/// Executable account's data was modified
	// instruction changed executable accounts data
	InstructionErrorType_EXECUTABLE_DATA_MODIFIED InstructionErrorType = 27
	/// Executable account's lamports modified
	// instruction changed the balance of a executable account
	InstructionErrorType_EXECUTABLE_LAMPORT_CHANGE InstructionErrorType = 28
	/// Executable accounts must be rent exempt
	// executable accounts must be rent exempt
	InstructionErrorType_EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT InstructionErrorType = 29
	/// Unsupported program id
	// Unsupported program id
	InstructionErrorType_UNSUPPORTED_PROGRAM_ID InstructionErrorType = 30
	/// Cross-program invocation call depth too deep
	// Cross-program invocation call depth too deep
	InstructionErrorType_CALL_DEPTH InstructionErrorType = 31
	/// An account required by the instruction is missing
	// An account required by the instruction is missing
	InstructionErrorType_MISSING_ACCOUNT InstructionErrorType = 32
	/// Cross-program invocation reentrancy not allowed for this instruction
	// Cross-program invocation reentrancy not allowed for this instruction
	InstructionErrorType_REENTRANCY_NOT_ALLOWED InstructionErrorType = 33
	/// Length of the seed is too long for address generation
	// Length of the seed is too long for address generation
	InstructionErrorType_MAX_SEED_LENGTH_EXCEEDED InstructionErrorType = 34
	/// Provided seeds do not result in a valid address
	// Provided seeds do not result in a valid address
	InstructionErrorType_INVALID_SEEDS InstructionErrorType = 35
	/// Failed to reallocate account data of this length
	// Failed to reallocate account data
	InstructionErrorType_INVALID_REALLOC InstructionErrorType = 36
	/// Computational budget exceeded
	// Computational budget exceeded
	InstructionErrorType_COMPUTATIONAL_BUDGET_EXCEEDED InstructionErrorType = 37
	/// Cross-program invocation with unauthorized signer or writable account
	// Cross-program invocation with unauthorized signer or writable account
	InstructionErrorType_PRIVILEGE_ESCALATION InstructionErrorType = 38
	// Failed to create program execution environment
	InstructionErrorType_PROGRAM_ENVIRONMENT_SETUP_FAILURE InstructionErrorType = 39
	// Program failed to complete
	InstructionErrorType_PROGRAM_FAILED_TO_COMPLETE InstructionErrorType = 40
	// Program failed to compile
	InstructionErrorType_PROGRAM_FAILED_TO_COMPILE InstructionErrorType = 41
	// Account is immutable
	InstructionErrorType_IMMUTABLE InstructionErrorType = 42
	// Incorrect authority provided
	InstructionErrorType_INCORRECT_AUTHORITY InstructionErrorType = 43
)

// Enum value maps for InstructionErrorType.
var (
	InstructionErrorType_name = map[int32]string{
		0:  "GENERIC_ERROR",
		1:  "INVALID_ARGUMENT",
		2:  "INVALID_INSTRUCTION_DATA",
		3:  "INVALID_ACCOUNT_DATA",
		4:  "ACCOUNT_DATA_TOO_SMALL",
		5:  "INSUFFICIENT_FUNDS",
		6:  "INCORRECT_PROGRAM_ID",
		7:  "MISSING_REQUIRED_SIGNATURE",
		8:  "ACCOUNT_ALREADY_INITIALIZED",
		9:  "UNINITIALIZED_ACCOUNT",
		10: "UNBALANCED_INSTRUCTION",
		11: "MODIFIED_PROGRAM_ID",
		12: "EXTERNAL_ACCOUNT_LAMPORT_SPEND",
		13: "EXTERNAL_ACCOUNT_DATA_MODIFIED",
		14: "READONLY_LAMPORT_CHANGE",
		15: "READONLY_DATA_MODIFIED",
		16: "DUPLICATE_ACCOUNT_INDEX",
		17: "EXECUTABLE_MODIFIED",
		18: "RENT_EPOCH_MODIFIED",
		19: "NOT_ENOUGH_ACCOUNT_KEYS",
		20: "ACCOUNT_DATA_SIZE_CHANGED",
		21: "ACCOUNT_NOT_EXECUTABLE",
		22: "ACCOUNT_BORROW_FAILED",
		23: "ACCOUNT_BORROW_OUTSTANDING",
		24: "DUPLICATE_ACCOUNT_OUT_OF_SYNC",
		25: "CUSTOM",
		26: "INVALID_ERROR",
		27: "EXECUTABLE_DATA_MODIFIED",
		28: "EXECUTABLE_LAMPORT_CHANGE",
		29: "EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT",
		30: "UNSUPPORTED_PROGRAM_ID",
		31: "CALL_DEPTH",
		32: "MISSING_ACCOUNT",
		33: "REENTRANCY_NOT_ALLOWED",
		34: "MAX_SEED_LENGTH_EXCEEDED",
		35: "INVALID_SEEDS",
		36: "INVALID_REALLOC",
		37: "COMPUTATIONAL_BUDGET_EXCEEDED",
		38: "PRIVILEGE_ESCALATION",
		39: "PROGRAM_ENVIRONMENT_SETUP_FAILURE",
		40: "PROGRAM_FAILED_TO_COMPLETE",
		41: "PROGRAM_FAILED_TO_COMPILE",
		42: "IMMUTABLE",
		43: "INCORRECT_AUTHORITY",
	}
	InstructionErrorType_value = map[string]int32{
		"GENERIC_ERROR":                      0,
		"INVALID_ARGUMENT":                   1,
		"INVALID_INSTRUCTION_DATA":           2,
		"INVALID_ACCOUNT_DATA":               3,
		"ACCOUNT_DATA_TOO_SMALL":             4,
		"INSUFFICIENT_FUNDS":                 5,
		"INCORRECT_PROGRAM_ID":               6,
		"MISSING_REQUIRED_SIGNATURE":         7,
		"ACCOUNT_ALREADY_INITIALIZED":        8,
		"UNINITIALIZED_ACCOUNT":              9,
		"UNBALANCED_INSTRUCTION":             10,
		"MODIFIED_PROGRAM_ID":                11,
		"EXTERNAL_ACCOUNT_LAMPORT_SPEND":     12,
		"EXTERNAL_ACCOUNT_DATA_MODIFIED":     13,
		"READONLY_LAMPORT_CHANGE":            14,
		"READONLY_DATA_MODIFIED":             15,
		"DUPLICATE_ACCOUNT_INDEX":            16,
		"EXECUTABLE_MODIFIED":                17,
		"RENT_EPOCH_MODIFIED":                18,
		"NOT_ENOUGH_ACCOUNT_KEYS":            19,
		"ACCOUNT_DATA_SIZE_CHANGED":          20,
		"ACCOUNT_NOT_EXECUTABLE":             21,
		"ACCOUNT_BORROW_FAILED":              22,
		"ACCOUNT_BORROW_OUTSTANDING":         23,
		"DUPLICATE_ACCOUNT_OUT_OF_SYNC":      24,
		"CUSTOM":                             25,
		"INVALID_ERROR":                      26,
		"EXECUTABLE_DATA_MODIFIED":           27,
		"EXECUTABLE_LAMPORT_CHANGE":          28,
		"EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT": 29,
		"UNSUPPORTED_PROGRAM_ID":             30,
		"CALL_DEPTH":                         31,
		"MISSING_ACCOUNT":                    32,
		"REENTRANCY_NOT_ALLOWED":             33,
		"MAX_SEED_LENGTH_EXCEEDED":           34,
		"INVALID_SEEDS":                      35,
		"INVALID_REALLOC":                    36,
		"COMPUTATIONAL_BUDGET_EXCEEDED":      37,
		"PRIVILEGE_ESCALATION":               38,
		"PROGRAM_ENVIRONMENT_SETUP_FAILURE":  39,
		"PROGRAM_FAILED_TO_COMPLETE":         40,
		"PROGRAM_FAILED_TO_COMPILE":          41,
		"IMMUTABLE":                          42,
		"INCORRECT_AUTHORITY":                43,
	}
)

func (x InstructionErrorType) Enum() *InstructionErrorType {
	p := new(InstructionErrorType)
	*p = x
	return p
}

func (x InstructionErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstructionErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_sf_solana_codec_v1_codec_proto_enumTypes[1].Descriptor()
}

func (InstructionErrorType) Type() protoreflect.EnumType {
	return &file_sf_solana_codec_v1_codec_proto_enumTypes[1]
}

func (x InstructionErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstructionErrorType.Descriptor instead.
func (InstructionErrorType) EnumDescriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{1}
}

type Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   // hash of the last Entry closing the slot
	Number                 uint64         `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`                          // slot number, not block number
	PreviousId             string         `protobuf:"bytes,3,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"` // corresponds to the previous SLOT hash
	Version                uint32         `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Block                  *Block         `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
	LastEntryHash          string         `protobuf:"bytes,6,opt,name=last_entry_hash,json=lastEntryHash,proto3" json:"last_entry_hash,omitempty"`
	Transactions           []*Transaction `protobuf:"bytes,7,rep,name=transactions,proto3" json:"transactions,omitempty"`
	TransactionCount       uint32         `protobuf:"varint,8,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	HasSplitAccountChanges bool           `protobuf:"varint,9,opt,name=has_split_account_changes,json=hasSplitAccountChanges,proto3" json:"has_split_account_changes,omitempty"`
	AccountChangesFileRef  string         `protobuf:"bytes,10,opt,name=account_changes_file_ref,json=accountChangesFileRef,proto3" json:"account_changes_file_ref,omitempty"`
}

func (x *Slot) Reset() {
	*x = Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{0}
}

func (x *Slot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Slot) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Slot) GetPreviousId() string {
	if x != nil {
		return x.PreviousId
	}
	return ""
}

func (x *Slot) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Slot) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *Slot) GetLastEntryHash() string {
	if x != nil {
		return x.LastEntryHash
	}
	return ""
}

func (x *Slot) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Slot) GetTransactionCount() uint32 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *Slot) GetHasSplitAccountChanges() bool {
	if x != nil {
		return x.HasSplitAccountChanges
	}
	return false
}

func (x *Slot) GetAccountChangesFileRef() string {
	if x != nil {
		return x.AccountChangesFileRef
	}
	return ""
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`          // corresponds to the Slot id (or hash)
	Number               uint64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"` // corresponds to the Slot number for this block
	Height               uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	PreviousId           string `protobuf:"bytes,4,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"` // corresponds to the previous_blockhash, might skip some slots, so beware
	PreviousBlockSlot    uint64 `protobuf:"varint,5,opt,name=previous_block_slot,json=previousBlockSlot,proto3" json:"previous_block_slot,omitempty"`
	GenesisUnixTimestamp uint64 `protobuf:"varint,6,opt,name=genesis_unix_timestamp,json=genesisUnixTimestamp,proto3" json:"genesis_unix_timestamp,omitempty"`
	ClockUnixTimestamp   uint64 `protobuf:"varint,7,opt,name=clock_unix_timestamp,json=clockUnixTimestamp,proto3" json:"clock_unix_timestamp,omitempty"`
	RootNum              uint64 `protobuf:"varint,8,opt,name=root_num,json=rootNum,proto3" json:"root_num,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{1}
}

func (x *Block) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Block) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Block) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Block) GetPreviousId() string {
	if x != nil {
		return x.PreviousId
	}
	return ""
}

func (x *Block) GetPreviousBlockSlot() uint64 {
	if x != nil {
		return x.PreviousBlockSlot
	}
	return 0
}

func (x *Block) GetGenesisUnixTimestamp() uint64 {
	if x != nil {
		return x.GenesisUnixTimestamp
	}
	return 0
}

func (x *Block) GetClockUnixTimestamp() uint64 {
	if x != nil {
		return x.ClockUnixTimestamp
	}
	return 0
}

func (x *Block) GetRootNum() uint64 {
	if x != nil {
		return x.RootNum
	}
	return 0
}

type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{2}
}

func (x *Batch) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// Bundled in separate files, referenced by `account_changes_file_ref`
type AccountChangesBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maps to the index of the `repeated` field for Block::transactions
	Transactions []*AccountChangesPerTrxIndex `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *AccountChangesBundle) Reset() {
	*x = AccountChangesBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountChangesBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountChangesBundle) ProtoMessage() {}

func (x *AccountChangesBundle) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountChangesBundle.ProtoReflect.Descriptor instead.
func (*AccountChangesBundle) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{3}
}

func (x *AccountChangesBundle) GetTransactions() []*AccountChangesPerTrxIndex {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type AccountChangesPerTrxIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrxId string `protobuf:"bytes,1,opt,name=TrxId,proto3" json:"TrxId,omitempty"`
	// Maps to the index within the `repeated` field of the proto for
	// Transaction::instructions
	Instructions []*AccountChangesPerInstruction `protobuf:"bytes,2,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (x *AccountChangesPerTrxIndex) Reset() {
	*x = AccountChangesPerTrxIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountChangesPerTrxIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountChangesPerTrxIndex) ProtoMessage() {}

func (x *AccountChangesPerTrxIndex) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountChangesPerTrxIndex.ProtoReflect.Descriptor instead.
func (*AccountChangesPerTrxIndex) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{4}
}

func (x *AccountChangesPerTrxIndex) GetTrxId() string {
	if x != nil {
		return x.TrxId
	}
	return ""
}

func (x *AccountChangesPerTrxIndex) GetInstructions() []*AccountChangesPerInstruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

type AccountChangesPerInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data to be put in Instruction::account_changes
	Changes []*AccountChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *AccountChangesPerInstruction) Reset() {
	*x = AccountChangesPerInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountChangesPerInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountChangesPerInstruction) ProtoMessage() {}

func (x *AccountChangesPerInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountChangesPerInstruction.ProtoReflect.Descriptor instead.
func (*AccountChangesPerInstruction) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{5}
}

func (x *AccountChangesPerInstruction) GetChanges() []*AccountChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction ID corresponds to the _first_
	// signature. Additional signatures are in `additional_signatures`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// slot_num could be zero for non-executed transactions
	SlotNum uint64 `protobuf:"varint,2,opt,name=slot_num,json=slotNum,proto3" json:"slot_num,omitempty"`
	// slot_hash could be empty for non-executed transactions
	SlotHash string `protobuf:"bytes,3,opt,name=slot_hash,json=slotHash,proto3" json:"slot_hash,omitempty"`
	// Index from within a single Slot, deterministically ordered to the
	// best of our ability using the transaction ID as a sort key for
	// the batch of transactions executed in parallel.
	Index                uint64         `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	AdditionalSignatures []string       `protobuf:"bytes,5,rep,name=additional_signatures,json=additionalSignatures,proto3" json:"additional_signatures,omitempty"`
	Header               *MessageHeader `protobuf:"bytes,6,opt,name=header,proto3" json:"header,omitempty"`
	// From the original Message object
	AccountKeys []string `protobuf:"bytes,7,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
	// From the original Message object
	RecentBlockhash string `protobuf:"bytes,8,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash,omitempty"`
	// What follows Once executed these can be set:
	LogMessages []string `protobuf:"bytes,12,rep,name=log_messages,json=logMessages,proto3" json:"log_messages,omitempty"`
	// Instructions, containing both top-level and nested transactions
	Instructions []*Instruction    `protobuf:"bytes,13,rep,name=instructions,proto3" json:"instructions,omitempty"`
	Failed       bool              `protobuf:"varint,15,opt,name=failed,proto3" json:"failed,omitempty"`
	Errors       *TransactionError `protobuf:"bytes,16,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{6}
}

func (x *Transaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction) GetSlotNum() uint64 {
	if x != nil {
		return x.SlotNum
	}
	return 0
}

func (x *Transaction) GetSlotHash() string {
	if x != nil {
		return x.SlotHash
	}
	return ""
}

func (x *Transaction) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Transaction) GetAdditionalSignatures() []string {
	if x != nil {
		return x.AdditionalSignatures
	}
	return nil
}

func (x *Transaction) GetHeader() *MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Transaction) GetAccountKeys() []string {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

func (x *Transaction) GetRecentBlockhash() string {
	if x != nil {
		return x.RecentBlockhash
	}
	return ""
}

func (x *Transaction) GetLogMessages() []string {
	if x != nil {
		return x.LogMessages
	}
	return nil
}

func (x *Transaction) GetInstructions() []*Instruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

func (x *Transaction) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *Transaction) GetErrors() *TransactionError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type MessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRequiredSignatures       uint32 `protobuf:"varint,1,opt,name=num_required_signatures,json=numRequiredSignatures,proto3" json:"num_required_signatures,omitempty"`
	NumReadonlySignedAccounts   uint32 `protobuf:"varint,2,opt,name=num_readonly_signed_accounts,json=numReadonlySignedAccounts,proto3" json:"num_readonly_signed_accounts,omitempty"`
	NumReadonlyUnsignedAccounts uint32 `protobuf:"varint,3,opt,name=num_readonly_unsigned_accounts,json=numReadonlyUnsignedAccounts,proto3" json:"num_readonly_unsigned_accounts,omitempty"`
}

func (x *MessageHeader) Reset() {
	*x = MessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader) ProtoMessage() {}

func (x *MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader.ProtoReflect.Descriptor instead.
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{7}
}

func (x *MessageHeader) GetNumRequiredSignatures() uint32 {
	if x != nil {
		return x.NumRequiredSignatures
	}
	return 0
}

func (x *MessageHeader) GetNumReadonlySignedAccounts() uint32 {
	if x != nil {
		return x.NumReadonlySignedAccounts
	}
	return 0
}

func (x *MessageHeader) GetNumReadonlyUnsignedAccounts() uint32 {
	if x != nil {
		return x.NumReadonlyUnsignedAccounts
	}
	return 0
}

type Instruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramId      string            `protobuf:"bytes,3,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	AccountKeys    []string          `protobuf:"bytes,4,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
	Data           []byte            `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Ordinal        uint32            `protobuf:"varint,6,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	ParentOrdinal  uint32            `protobuf:"varint,7,opt,name=parent_ordinal,json=parentOrdinal,proto3" json:"parent_ordinal,omitempty"`
	Depth          uint32            `protobuf:"varint,8,opt,name=depth,proto3" json:"depth,omitempty"`
	BalanceChanges []*BalanceChange  `protobuf:"bytes,9,rep,name=balance_changes,json=balanceChanges,proto3" json:"balance_changes,omitempty"`
	AccountChanges []*AccountChange  `protobuf:"bytes,10,rep,name=account_changes,json=accountChanges,proto3" json:"account_changes,omitempty"`
	Failed         bool              `protobuf:"varint,15,opt,name=failed,proto3" json:"failed,omitempty"`
	Error          *InstructionError `protobuf:"bytes,16,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Instruction) Reset() {
	*x = Instruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instruction) ProtoMessage() {}

func (x *Instruction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instruction.ProtoReflect.Descriptor instead.
func (*Instruction) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{8}
}

func (x *Instruction) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *Instruction) GetAccountKeys() []string {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

func (x *Instruction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Instruction) GetOrdinal() uint32 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

func (x *Instruction) GetParentOrdinal() uint32 {
	if x != nil {
		return x.ParentOrdinal
	}
	return 0
}

func (x *Instruction) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *Instruction) GetBalanceChanges() []*BalanceChange {
	if x != nil {
		return x.BalanceChanges
	}
	return nil
}

func (x *Instruction) GetAccountChanges() []*AccountChange {
	if x != nil {
		return x.AccountChanges
	}
	return nil
}

func (x *Instruction) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *Instruction) GetError() *InstructionError {
	if x != nil {
		return x.Error
	}
	return nil
}

type BalanceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey       string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	PrevLamports uint64 `protobuf:"varint,2,opt,name=prev_lamports,json=prevLamports,proto3" json:"prev_lamports,omitempty"`
	NewLamports  uint64 `protobuf:"varint,3,opt,name=new_lamports,json=newLamports,proto3" json:"new_lamports,omitempty"`
}

func (x *BalanceChange) Reset() {
	*x = BalanceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceChange) ProtoMessage() {}

func (x *BalanceChange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceChange.ProtoReflect.Descriptor instead.
func (*BalanceChange) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{9}
}

func (x *BalanceChange) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *BalanceChange) GetPrevLamports() uint64 {
	if x != nil {
		return x.PrevLamports
	}
	return 0
}

func (x *BalanceChange) GetNewLamports() uint64 {
	if x != nil {
		return x.NewLamports
	}
	return 0
}

type AccountChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey        string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	PrevData      []byte `protobuf:"bytes,2,opt,name=prev_data,json=prevData,proto3" json:"prev_data,omitempty"`
	NewData       []byte `protobuf:"bytes,3,opt,name=new_data,json=newData,proto3" json:"new_data,omitempty"`
	NewDataLength uint64 `protobuf:"varint,4,opt,name=new_data_length,json=newDataLength,proto3" json:"new_data_length,omitempty"`
}

func (x *AccountChange) Reset() {
	*x = AccountChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountChange) ProtoMessage() {}

func (x *AccountChange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountChange.ProtoReflect.Descriptor instead.
func (*AccountChange) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{10}
}

func (x *AccountChange) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *AccountChange) GetPrevData() []byte {
	if x != nil {
		return x.PrevData
	}
	return nil
}

func (x *AccountChange) GetNewData() []byte {
	if x != nil {
		return x.NewData
	}
	return nil
}

func (x *AccountChange) GetNewDataLength() uint64 {
	if x != nil {
		return x.NewDataLength
	}
	return 0
}

type TransactionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    TransactionErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=sf.solana.codec.v1.TransactionErrorType" json:"type,omitempty"`
	Payload *any.Any             `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *TransactionError) Reset() {
	*x = TransactionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionError) ProtoMessage() {}

func (x *TransactionError) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionError.ProtoReflect.Descriptor instead.
func (*TransactionError) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{11}
}

func (x *TransactionError) GetType() TransactionErrorType {
	if x != nil {
		return x.Type
	}
	return TransactionErrorType_ACCOUNT_IN_USE
}

func (x *TransactionError) GetPayload() *any.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

type TransactionInstructionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32            `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Error *InstructionError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TransactionInstructionError) Reset() {
	*x = TransactionInstructionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInstructionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInstructionError) ProtoMessage() {}

func (x *TransactionInstructionError) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInstructionError.ProtoReflect.Descriptor instead.
func (*TransactionInstructionError) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{12}
}

func (x *TransactionInstructionError) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TransactionInstructionError) GetError() *InstructionError {
	if x != nil {
		return x.Error
	}
	return nil
}

type InstructionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    InstructionErrorType `protobuf:"varint,2,opt,name=type,proto3,enum=sf.solana.codec.v1.InstructionErrorType" json:"type,omitempty"`
	Payload *any.Any             `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *InstructionError) Reset() {
	*x = InstructionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstructionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstructionError) ProtoMessage() {}

func (x *InstructionError) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstructionError.ProtoReflect.Descriptor instead.
func (*InstructionError) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{13}
}

func (x *InstructionError) GetType() InstructionErrorType {
	if x != nil {
		return x.Type
	}
	return InstructionErrorType_GENERIC_ERROR
}

func (x *InstructionError) GetPayload() *any.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

type InstructionErrorCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *InstructionErrorCustom) Reset() {
	*x = InstructionErrorCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstructionErrorCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstructionErrorCustom) ProtoMessage() {}

func (x *InstructionErrorCustom) ProtoReflect() protoreflect.Message {
	mi := &file_sf_solana_codec_v1_codec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstructionErrorCustom.ProtoReflect.Descriptor instead.
func (*InstructionErrorCustom) Descriptor() ([]byte, []int) {
	return file_sf_solana_codec_v1_codec_proto_rawDescGZIP(), []int{14}
}

func (x *InstructionErrorCustom) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_sf_solana_codec_v1_codec_proto protoreflect.FileDescriptor

var file_sf_solana_codec_v1_codec_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x66, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa8, 0x03, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x66, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x43, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x66, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x22, 0x9b, 0x02, 0x0a, 0x05, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x55, 0x6e,
	0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x55, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0x4c, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x43, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x69, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x51,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x54, 0x72, 0x78, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x72, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x72, 0x78, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x1c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xe7, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a,
	0x1e, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x75, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e,
	0x6c, 0x79, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x22, 0xa6, 0x03, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x4a, 0x0a, 0x0f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x3a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x0d, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6c, 0x61, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x76, 0x4c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77,
	0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x87, 0x01, 0x0a,
	0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6f, 0x0a, 0x1b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x28, 0x0a,
	0x16, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x2a, 0xbc, 0x03, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x5f, 0x54, 0x57, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x46,
	0x45, 0x45, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x44, 0x45, 0x45,
	0x50, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x46, 0x45, 0x45,
	0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x0b, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x41, 0x4e, 0x49, 0x54,
	0x49, 0x5a, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0e, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x0f, 0x2a, 0xce, 0x09, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52,
	0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e,
	0x44, 0x53, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x1e,
	0x0a, 0x1a, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x07, 0x12, 0x1f,
	0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x19, 0x0a, 0x15, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12,
	0x22, 0x0a, 0x1e, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x41, 0x44, 0x4f,
	0x4e, 0x4c, 0x59, 0x5f, 0x4c, 0x41, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x41, 0x44, 0x4f, 0x4e, 0x4c, 0x59,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x0f,
	0x12, 0x1b, 0x0a, 0x17, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x10, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x45,
	0x50, 0x4f, 0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x12, 0x12,
	0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x52, 0x52, 0x4f, 0x57, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x16, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x4f,
	0x52, 0x52, 0x4f, 0x57, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x17, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x10, 0x18, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x19, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x1a, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x1b, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x4c, 0x41, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x1c, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x4e, 0x54,
	0x5f, 0x45, 0x58, 0x45, 0x4d, 0x50, 0x54, 0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d,
	0x5f, 0x49, 0x44, 0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x45,
	0x50, 0x54, 0x48, 0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45,
	0x45, 0x4e, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0x21, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x45,
	0x45, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x53, 0x45, 0x45, 0x44, 0x53, 0x10, 0x23, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x10, 0x24, 0x12, 0x21, 0x0a, 0x1d,
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x55,
	0x44, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x25, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x45, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x26, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x27,
	0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x28,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x10, 0x29, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x2a, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x2b, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66,
	0x61, 0x73, 0x74, 0x2f, 0x73, 0x66, 0x2d, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x62,
	0x2f, 0x73, 0x66, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_sf_solana_codec_v1_codec_proto_rawDescOnce sync.Once
	file_sf_solana_codec_v1_codec_proto_rawDescData = file_sf_solana_codec_v1_codec_proto_rawDesc
)

func file_sf_solana_codec_v1_codec_proto_rawDescGZIP() []byte {
	file_sf_solana_codec_v1_codec_proto_rawDescOnce.Do(func() {
		file_sf_solana_codec_v1_codec_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_solana_codec_v1_codec_proto_rawDescData)
	})
	return file_sf_solana_codec_v1_codec_proto_rawDescData
}

var file_sf_solana_codec_v1_codec_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sf_solana_codec_v1_codec_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_sf_solana_codec_v1_codec_proto_goTypes = []interface{}{
	(TransactionErrorType)(0),            // 0: sf.solana.codec.v1.TransactionErrorType
	(InstructionErrorType)(0),            // 1: sf.solana.codec.v1.InstructionErrorType
	(*Slot)(nil),                         // 2: sf.solana.codec.v1.Slot
	(*Block)(nil),                        // 3: sf.solana.codec.v1.Block
	(*Batch)(nil),                        // 4: sf.solana.codec.v1.Batch
	(*AccountChangesBundle)(nil),         // 5: sf.solana.codec.v1.AccountChangesBundle
	(*AccountChangesPerTrxIndex)(nil),    // 6: sf.solana.codec.v1.AccountChangesPerTrxIndex
	(*AccountChangesPerInstruction)(nil), // 7: sf.solana.codec.v1.AccountChangesPerInstruction
	(*Transaction)(nil),                  // 8: sf.solana.codec.v1.Transaction
	(*MessageHeader)(nil),                // 9: sf.solana.codec.v1.MessageHeader
	(*Instruction)(nil),                  // 10: sf.solana.codec.v1.Instruction
	(*BalanceChange)(nil),                // 11: sf.solana.codec.v1.BalanceChange
	(*AccountChange)(nil),                // 12: sf.solana.codec.v1.AccountChange
	(*TransactionError)(nil),             // 13: sf.solana.codec.v1.TransactionError
	(*TransactionInstructionError)(nil),  // 14: sf.solana.codec.v1.TransactionInstructionError
	(*InstructionError)(nil),             // 15: sf.solana.codec.v1.InstructionError
	(*InstructionErrorCustom)(nil),       // 16: sf.solana.codec.v1.InstructionErrorCustom
	(*any.Any)(nil),                      // 17: google.protobuf.Any
}
var file_sf_solana_codec_v1_codec_proto_depIdxs = []int32{
	3,  // 0: sf.solana.codec.v1.Slot.block:type_name -> sf.solana.codec.v1.Block
	8,  // 1: sf.solana.codec.v1.Slot.transactions:type_name -> sf.solana.codec.v1.Transaction
	8,  // 2: sf.solana.codec.v1.Batch.transactions:type_name -> sf.solana.codec.v1.Transaction
	6,  // 3: sf.solana.codec.v1.AccountChangesBundle.transactions:type_name -> sf.solana.codec.v1.AccountChangesPerTrxIndex
	7,  // 4: sf.solana.codec.v1.AccountChangesPerTrxIndex.instructions:type_name -> sf.solana.codec.v1.AccountChangesPerInstruction
	12, // 5: sf.solana.codec.v1.AccountChangesPerInstruction.changes:type_name -> sf.solana.codec.v1.AccountChange
	9,  // 6: sf.solana.codec.v1.Transaction.header:type_name -> sf.solana.codec.v1.MessageHeader
	10, // 7: sf.solana.codec.v1.Transaction.instructions:type_name -> sf.solana.codec.v1.Instruction
	13, // 8: sf.solana.codec.v1.Transaction.errors:type_name -> sf.solana.codec.v1.TransactionError
	11, // 9: sf.solana.codec.v1.Instruction.balance_changes:type_name -> sf.solana.codec.v1.BalanceChange
	12, // 10: sf.solana.codec.v1.Instruction.account_changes:type_name -> sf.solana.codec.v1.AccountChange
	15, // 11: sf.solana.codec.v1.Instruction.error:type_name -> sf.solana.codec.v1.InstructionError
	0,  // 12: sf.solana.codec.v1.TransactionError.type:type_name -> sf.solana.codec.v1.TransactionErrorType
	17, // 13: sf.solana.codec.v1.TransactionError.payload:type_name -> google.protobuf.Any
	15, // 14: sf.solana.codec.v1.TransactionInstructionError.error:type_name -> sf.solana.codec.v1.InstructionError
	1,  // 15: sf.solana.codec.v1.InstructionError.type:type_name -> sf.solana.codec.v1.InstructionErrorType
	17, // 16: sf.solana.codec.v1.InstructionError.payload:type_name -> google.protobuf.Any
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_sf_solana_codec_v1_codec_proto_init() }
func file_sf_solana_codec_v1_codec_proto_init() {
	if File_sf_solana_codec_v1_codec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_solana_codec_v1_codec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountChangesBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountChangesPerTrxIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountChangesPerInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInstructionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstructionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_solana_codec_v1_codec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstructionErrorCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_solana_codec_v1_codec_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_solana_codec_v1_codec_proto_goTypes,
		DependencyIndexes: file_sf_solana_codec_v1_codec_proto_depIdxs,
		EnumInfos:         file_sf_solana_codec_v1_codec_proto_enumTypes,
		MessageInfos:      file_sf_solana_codec_v1_codec_proto_msgTypes,
	}.Build()
	File_sf_solana_codec_v1_codec_proto = out.File
	file_sf_solana_codec_v1_codec_proto_rawDesc = nil
	file_sf_solana_codec_v1_codec_proto_goTypes = nil
	file_sf_solana_codec_v1_codec_proto_depIdxs = nil
}
