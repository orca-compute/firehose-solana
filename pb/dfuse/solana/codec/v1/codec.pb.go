// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: dfuse/solana/codec/v1/codec.proto

package pbcodec

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   // hash of the last Entry closing the slot
	Number                 uint64         `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`                          // slot number, not block number
	PreviousId             string         `protobuf:"bytes,3,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"` // corresponds to the previous SLOT hash
	Version                uint32         `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Block                  *Block         `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
	Transactions           []*Transaction `protobuf:"bytes,7,rep,name=transactions,proto3" json:"transactions,omitempty"`
	TransactionCount       uint32         `protobuf:"varint,8,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	HasSplitAccountChanges bool           `protobuf:"varint,9,opt,name=has_split_account_changes,json=hasSplitAccountChanges,proto3" json:"has_split_account_changes,omitempty"`
	AccountChangesFileRef  string         `protobuf:"bytes,10,opt,name=account_changes_file_ref,json=accountChangesFileRef,proto3" json:"account_changes_file_ref,omitempty"`
}

func (x *Slot) Reset() {
	*x = Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_dfuse_solana_codec_v1_codec_proto_rawDescGZIP(), []int{0}
}

func (x *Slot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Slot) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Slot) GetPreviousId() string {
	if x != nil {
		return x.PreviousId
	}
	return ""
}

func (x *Slot) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Slot) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *Slot) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Slot) GetTransactionCount() uint32 {
	if x != nil {
		return x.TransactionCount
	}
	return 0
}

func (x *Slot) GetHasSplitAccountChanges() bool {
	if x != nil {
		return x.HasSplitAccountChanges
	}
	return false
}

func (x *Slot) GetAccountChangesFileRef() string {
	if x != nil {
		return x.AccountChangesFileRef
	}
	return ""
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`          // corresponds to the Slot id (or hash)
	Number               uint64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"` // corresponds to the Slot number for this block
	Height               uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	PreviousId           string `protobuf:"bytes,4,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"` // corresponds to the previous_blockhash, might skip some slots, so beware
	PreviousBlockSlot    uint64 `protobuf:"varint,5,opt,name=previous_block_slot,json=previousBlockSlot,proto3" json:"previous_block_slot,omitempty"`
	GenesisUnixTimestamp uint64 `protobuf:"varint,6,opt,name=genesis_unix_timestamp,json=genesisUnixTimestamp,proto3" json:"genesis_unix_timestamp,omitempty"`
	ClockUnixTimestamp   uint64 `protobuf:"varint,7,opt,name=clock_unix_timestamp,json=clockUnixTimestamp,proto3" json:"clock_unix_timestamp,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_dfuse_solana_codec_v1_codec_proto_rawDescGZIP(), []int{1}
}

func (x *Block) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Block) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Block) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Block) GetPreviousId() string {
	if x != nil {
		return x.PreviousId
	}
	return ""
}

func (x *Block) GetPreviousBlockSlot() uint64 {
	if x != nil {
		return x.PreviousBlockSlot
	}
	return 0
}

func (x *Block) GetGenesisUnixTimestamp() uint64 {
	if x != nil {
		return x.GenesisUnixTimestamp
	}
	return 0
}

func (x *Block) GetClockUnixTimestamp() uint64 {
	if x != nil {
		return x.ClockUnixTimestamp
	}
	return 0
}

type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_dfuse_solana_codec_v1_codec_proto_rawDescGZIP(), []int{2}
}

func (x *Batch) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// Bundled in separate files, referenced by `account_changes_file_ref`
type AccountChangesBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maps to the index of the `repeated` field for Block::transactions
	Transactions []*AccountChangesPerTrxIndex `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *AccountChangesBundle) Reset() {
	*x = AccountChangesBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountChangesBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountChangesBundle) ProtoMessage() {}

func (x *AccountChangesBundle) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountChangesBundle.ProtoReflect.Descriptor instead.
func (*AccountChangesBundle) Descriptor() ([]byte, []int) {
	return file_dfuse_solana_codec_v1_codec_proto_rawDescGZIP(), []int{3}
}

func (x *AccountChangesBundle) GetTransactions() []*AccountChangesPerTrxIndex {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type AccountChangesPerTrxIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maps to the index within the `repeated` field of the proto for
	// Transaction::instructions
	Instructions []*AccountChangesPerInstruction `protobuf:"bytes,1,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (x *AccountChangesPerTrxIndex) Reset() {
	*x = AccountChangesPerTrxIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountChangesPerTrxIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountChangesPerTrxIndex) ProtoMessage() {}

func (x *AccountChangesPerTrxIndex) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountChangesPerTrxIndex.ProtoReflect.Descriptor instead.
func (*AccountChangesPerTrxIndex) Descriptor() ([]byte, []int) {
	return file_dfuse_solana_codec_v1_codec_proto_rawDescGZIP(), []int{4}
}

func (x *AccountChangesPerTrxIndex) GetInstructions() []*AccountChangesPerInstruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

type AccountChangesPerInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data to be put in Instruction::account_changes
	Changes []*AccountChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *AccountChangesPerInstruction) Reset() {
	*x = AccountChangesPerInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountChangesPerInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountChangesPerInstruction) ProtoMessage() {}

func (x *AccountChangesPerInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountChangesPerInstruction.ProtoReflect.Descriptor instead.
func (*AccountChangesPerInstruction) Descriptor() ([]byte, []int) {
	return file_dfuse_solana_codec_v1_codec_proto_rawDescGZIP(), []int{5}
}

func (x *AccountChangesPerInstruction) GetChanges() []*AccountChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction ID corresponds to the _first_
	// signature. Additional signatures are in `additional_signatures`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// slot_num could be zero for non-executed transactions
	SlotNum uint64 `protobuf:"varint,2,opt,name=slot_num,json=slotNum,proto3" json:"slot_num,omitempty"`
	// slot_hash could be empty for non-executed transactions
	SlotHash string `protobuf:"bytes,3,opt,name=slot_hash,json=slotHash,proto3" json:"slot_hash,omitempty"`
	// Index from within a single Slot, deterministically ordered to the
	// best of our ability using the transaction ID as a sort key for
	// the batch of transactions executed in parallel.
	Index                uint64         `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	AdditionalSignatures []string       `protobuf:"bytes,5,rep,name=additional_signatures,json=additionalSignatures,proto3" json:"additional_signatures,omitempty"`
	Header               *MessageHeader `protobuf:"bytes,6,opt,name=header,proto3" json:"header,omitempty"`
	// From the original Message object
	AccountKeys []string `protobuf:"bytes,7,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
	// From the original Message object
	RecentBlockhash string `protobuf:"bytes,8,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash,omitempty"`
	// What follows Once executed these can be set:
	LogMessages []string `protobuf:"bytes,12,rep,name=log_messages,json=logMessages,proto3" json:"log_messages,omitempty"`
	// Instructions, containing both top-level and nested transactions
	Instructions []*Instruction `protobuf:"bytes,13,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_dfuse_solana_codec_v1_codec_proto_rawDescGZIP(), []int{6}
}

func (x *Transaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction) GetSlotNum() uint64 {
	if x != nil {
		return x.SlotNum
	}
	return 0
}

func (x *Transaction) GetSlotHash() string {
	if x != nil {
		return x.SlotHash
	}
	return ""
}

func (x *Transaction) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Transaction) GetAdditionalSignatures() []string {
	if x != nil {
		return x.AdditionalSignatures
	}
	return nil
}

func (x *Transaction) GetHeader() *MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Transaction) GetAccountKeys() []string {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

func (x *Transaction) GetRecentBlockhash() string {
	if x != nil {
		return x.RecentBlockhash
	}
	return ""
}

func (x *Transaction) GetLogMessages() []string {
	if x != nil {
		return x.LogMessages
	}
	return nil
}

func (x *Transaction) GetInstructions() []*Instruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

type MessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRequiredSignatures       uint32 `protobuf:"varint,1,opt,name=num_required_signatures,json=numRequiredSignatures,proto3" json:"num_required_signatures,omitempty"`
	NumReadonlySignedAccounts   uint32 `protobuf:"varint,2,opt,name=num_readonly_signed_accounts,json=numReadonlySignedAccounts,proto3" json:"num_readonly_signed_accounts,omitempty"`
	NumReadonlyUnsignedAccounts uint32 `protobuf:"varint,3,opt,name=num_readonly_unsigned_accounts,json=numReadonlyUnsignedAccounts,proto3" json:"num_readonly_unsigned_accounts,omitempty"`
}

func (x *MessageHeader) Reset() {
	*x = MessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader) ProtoMessage() {}

func (x *MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader.ProtoReflect.Descriptor instead.
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return file_dfuse_solana_codec_v1_codec_proto_rawDescGZIP(), []int{7}
}

func (x *MessageHeader) GetNumRequiredSignatures() uint32 {
	if x != nil {
		return x.NumRequiredSignatures
	}
	return 0
}

func (x *MessageHeader) GetNumReadonlySignedAccounts() uint32 {
	if x != nil {
		return x.NumReadonlySignedAccounts
	}
	return 0
}

func (x *MessageHeader) GetNumReadonlyUnsignedAccounts() uint32 {
	if x != nil {
		return x.NumReadonlyUnsignedAccounts
	}
	return 0
}

type Instruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramId      string           `protobuf:"bytes,3,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	AccountKeys    []string         `protobuf:"bytes,4,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
	Data           []byte           `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Ordinal        uint32           `protobuf:"varint,6,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	ParentOrdinal  uint32           `protobuf:"varint,7,opt,name=parent_ordinal,json=parentOrdinal,proto3" json:"parent_ordinal,omitempty"`
	Depth          uint32           `protobuf:"varint,8,opt,name=depth,proto3" json:"depth,omitempty"`
	BalanceChanges []*BalanceChange `protobuf:"bytes,9,rep,name=balance_changes,json=balanceChanges,proto3" json:"balance_changes,omitempty"`
	AccountChanges []*AccountChange `protobuf:"bytes,10,rep,name=account_changes,json=accountChanges,proto3" json:"account_changes,omitempty"`
}

func (x *Instruction) Reset() {
	*x = Instruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instruction) ProtoMessage() {}

func (x *Instruction) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instruction.ProtoReflect.Descriptor instead.
func (*Instruction) Descriptor() ([]byte, []int) {
	return file_dfuse_solana_codec_v1_codec_proto_rawDescGZIP(), []int{8}
}

func (x *Instruction) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *Instruction) GetAccountKeys() []string {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

func (x *Instruction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Instruction) GetOrdinal() uint32 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

func (x *Instruction) GetParentOrdinal() uint32 {
	if x != nil {
		return x.ParentOrdinal
	}
	return 0
}

func (x *Instruction) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *Instruction) GetBalanceChanges() []*BalanceChange {
	if x != nil {
		return x.BalanceChanges
	}
	return nil
}

func (x *Instruction) GetAccountChanges() []*AccountChange {
	if x != nil {
		return x.AccountChanges
	}
	return nil
}

type BalanceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey       string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	PrevLamports uint64 `protobuf:"varint,2,opt,name=prev_lamports,json=prevLamports,proto3" json:"prev_lamports,omitempty"`
	NewLamports  uint64 `protobuf:"varint,3,opt,name=new_lamports,json=newLamports,proto3" json:"new_lamports,omitempty"`
}

func (x *BalanceChange) Reset() {
	*x = BalanceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceChange) ProtoMessage() {}

func (x *BalanceChange) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceChange.ProtoReflect.Descriptor instead.
func (*BalanceChange) Descriptor() ([]byte, []int) {
	return file_dfuse_solana_codec_v1_codec_proto_rawDescGZIP(), []int{9}
}

func (x *BalanceChange) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *BalanceChange) GetPrevLamports() uint64 {
	if x != nil {
		return x.PrevLamports
	}
	return 0
}

func (x *BalanceChange) GetNewLamports() uint64 {
	if x != nil {
		return x.NewLamports
	}
	return 0
}

type AccountChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey        string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	PrevData      []byte `protobuf:"bytes,2,opt,name=prev_data,json=prevData,proto3" json:"prev_data,omitempty"`
	NewData       []byte `protobuf:"bytes,3,opt,name=new_data,json=newData,proto3" json:"new_data,omitempty"`
	NewDataLength uint64 `protobuf:"varint,4,opt,name=new_data_length,json=newDataLength,proto3" json:"new_data_length,omitempty"`
}

func (x *AccountChange) Reset() {
	*x = AccountChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountChange) ProtoMessage() {}

func (x *AccountChange) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_solana_codec_v1_codec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountChange.ProtoReflect.Descriptor instead.
func (*AccountChange) Descriptor() ([]byte, []int) {
	return file_dfuse_solana_codec_v1_codec_proto_rawDescGZIP(), []int{10}
}

func (x *AccountChange) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *AccountChange) GetPrevData() []byte {
	if x != nil {
		return x.PrevData
	}
	return nil
}

func (x *AccountChange) GetNewData() []byte {
	if x != nil {
		return x.NewData
	}
	return nil
}

func (x *AccountChange) GetNewDataLength() uint64 {
	if x != nil {
		return x.NewDataLength
	}
	return 0
}

var File_dfuse_solana_codec_v1_codec_proto protoreflect.FileDescriptor

var file_dfuse_solana_codec_v1_codec_proto_rawDesc = []byte{
	0x0a, 0x21, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x22, 0x86, 0x03, 0x0a, 0x04, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x22, 0x80, 0x02, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x6e,
	0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x4f, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x46, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6c, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x54, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x54,
	0x72, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x74, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x54, 0x72, 0x78, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x57, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x1c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64,
	0x66, 0x75, 0x73, 0x65, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x97, 0x03, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x3f, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e,
	0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x43, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61,
	0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x12, 0x4d, 0x0a, 0x0f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x66,
	0x75, 0x73, 0x65, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x66, 0x75,
	0x73, 0x65, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x22, 0x6f, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x4c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x65,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x43, 0x5a, 0x41, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2d,
	0x69, 0x6f, 0x2f, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2d, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2f,
	0x70, 0x62, 0x2f, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dfuse_solana_codec_v1_codec_proto_rawDescOnce sync.Once
	file_dfuse_solana_codec_v1_codec_proto_rawDescData = file_dfuse_solana_codec_v1_codec_proto_rawDesc
)

func file_dfuse_solana_codec_v1_codec_proto_rawDescGZIP() []byte {
	file_dfuse_solana_codec_v1_codec_proto_rawDescOnce.Do(func() {
		file_dfuse_solana_codec_v1_codec_proto_rawDescData = protoimpl.X.CompressGZIP(file_dfuse_solana_codec_v1_codec_proto_rawDescData)
	})
	return file_dfuse_solana_codec_v1_codec_proto_rawDescData
}

var file_dfuse_solana_codec_v1_codec_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_dfuse_solana_codec_v1_codec_proto_goTypes = []interface{}{
	(*Slot)(nil),                         // 0: dfuse.solana.codec.v1.Slot
	(*Block)(nil),                        // 1: dfuse.solana.codec.v1.Block
	(*Batch)(nil),                        // 2: dfuse.solana.codec.v1.Batch
	(*AccountChangesBundle)(nil),         // 3: dfuse.solana.codec.v1.AccountChangesBundle
	(*AccountChangesPerTrxIndex)(nil),    // 4: dfuse.solana.codec.v1.AccountChangesPerTrxIndex
	(*AccountChangesPerInstruction)(nil), // 5: dfuse.solana.codec.v1.AccountChangesPerInstruction
	(*Transaction)(nil),                  // 6: dfuse.solana.codec.v1.Transaction
	(*MessageHeader)(nil),                // 7: dfuse.solana.codec.v1.MessageHeader
	(*Instruction)(nil),                  // 8: dfuse.solana.codec.v1.Instruction
	(*BalanceChange)(nil),                // 9: dfuse.solana.codec.v1.BalanceChange
	(*AccountChange)(nil),                // 10: dfuse.solana.codec.v1.AccountChange
}
var file_dfuse_solana_codec_v1_codec_proto_depIdxs = []int32{
	1,  // 0: dfuse.solana.codec.v1.Slot.block:type_name -> dfuse.solana.codec.v1.Block
	6,  // 1: dfuse.solana.codec.v1.Slot.transactions:type_name -> dfuse.solana.codec.v1.Transaction
	6,  // 2: dfuse.solana.codec.v1.Batch.transactions:type_name -> dfuse.solana.codec.v1.Transaction
	4,  // 3: dfuse.solana.codec.v1.AccountChangesBundle.transactions:type_name -> dfuse.solana.codec.v1.AccountChangesPerTrxIndex
	5,  // 4: dfuse.solana.codec.v1.AccountChangesPerTrxIndex.instructions:type_name -> dfuse.solana.codec.v1.AccountChangesPerInstruction
	10, // 5: dfuse.solana.codec.v1.AccountChangesPerInstruction.changes:type_name -> dfuse.solana.codec.v1.AccountChange
	7,  // 6: dfuse.solana.codec.v1.Transaction.header:type_name -> dfuse.solana.codec.v1.MessageHeader
	8,  // 7: dfuse.solana.codec.v1.Transaction.instructions:type_name -> dfuse.solana.codec.v1.Instruction
	9,  // 8: dfuse.solana.codec.v1.Instruction.balance_changes:type_name -> dfuse.solana.codec.v1.BalanceChange
	10, // 9: dfuse.solana.codec.v1.Instruction.account_changes:type_name -> dfuse.solana.codec.v1.AccountChange
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_dfuse_solana_codec_v1_codec_proto_init() }
func file_dfuse_solana_codec_v1_codec_proto_init() {
	if File_dfuse_solana_codec_v1_codec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dfuse_solana_codec_v1_codec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_solana_codec_v1_codec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_solana_codec_v1_codec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_solana_codec_v1_codec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountChangesBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_solana_codec_v1_codec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountChangesPerTrxIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_solana_codec_v1_codec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountChangesPerInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_solana_codec_v1_codec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_solana_codec_v1_codec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_solana_codec_v1_codec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_solana_codec_v1_codec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_solana_codec_v1_codec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dfuse_solana_codec_v1_codec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dfuse_solana_codec_v1_codec_proto_goTypes,
		DependencyIndexes: file_dfuse_solana_codec_v1_codec_proto_depIdxs,
		MessageInfos:      file_dfuse_solana_codec_v1_codec_proto_msgTypes,
	}.Build()
	File_dfuse_solana_codec_v1_codec_proto = out.File
	file_dfuse_solana_codec_v1_codec_proto_rawDesc = nil
	file_dfuse_solana_codec_v1_codec_proto_goTypes = nil
	file_dfuse_solana_codec_v1_codec_proto_depIdxs = nil
}
