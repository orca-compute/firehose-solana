// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dfuse/solana/codec/v1/codec.proto

package pbcodec

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TransactionErrorType int32

const (
	/// An account is already being processed in another transaction in a way
	/// that does not support parallelism
	// Account in use"
	TransactionErrorType_ACCOUNT_IN_USE TransactionErrorType = 0
	/// A `Pubkey` appears twice in the transaction's `account_keys`.  Instructions can reference
	/// `Pubkey`s more than once but the message must contain a list with no duplicate keys
	// Account loaded twice"
	TransactionErrorType_ACCOUNT_LOADED_TWICE TransactionErrorType = 1
	/// Attempt to debit an account but found no record of a prior credit.
	// Attempt to debit an account but found no record of a prior credit."
	TransactionErrorType_ACCOUNT_NOT_FOUND TransactionErrorType = 2
	/// Attempt to load a program that does not exist
	// Attempt to load a program that does not exist"
	TransactionErrorType_PROGRAM_ACCOUNT_NOT_FOUND TransactionErrorType = 3
	/// The from `Pubkey` does not have sufficient balance to pay the fee to schedule the transaction
	// Insufficient funds for fee"
	TransactionErrorType_INSUFFICIENT_FUNDS_FOR_FEE TransactionErrorType = 4
	/// This account may not be used to pay transaction fees
	// This account may not be used to pay transaction fees"
	TransactionErrorType_INVALID_ACCOUNT_FOR_FEE TransactionErrorType = 5
	/// The bank has seen this `Signature` before. This can occur under normal operation
	/// when a UDP packet is duplicated, as a user error from a client not updating
	/// its `recent_blockhash`, or as a double-spend attack.
	// The bank has seen this signature before"
	TransactionErrorType_DUPLICATE_SIGNATURE TransactionErrorType = 6
	/// The bank has not seen the given `recent_blockhash` or the transaction is too old and
	/// the `recent_blockhash` has been discarded.
	// Blockhash not found"
	TransactionErrorType_BLOCKHASH_NOT_FOUND TransactionErrorType = 7
	/// An error occurred while processing an instruction. The first element of the tuple
	/// indicates the instruction index in which the error occurred.
	// Error processing Instruction {0}: {1}"
	TransactionErrorType_INSTRUCTION_ERROR TransactionErrorType = 8
	/// Loader call chain is too deep
	// Loader call chain is too deep"
	TransactionErrorType_CALL_CHAIN_TOO_DEEP TransactionErrorType = 9
	/// Transaction requires a fee but has no signature present
	// Transaction requires a fee but has no signature present"
	TransactionErrorType_MISSING_SIGNATURE_FOR_FEE TransactionErrorType = 10
	/// Transaction contains an invalid account reference
	// Transaction contains an invalid account reference"
	TransactionErrorType_INVALID_ACCOUNT_INDEX TransactionErrorType = 11
	/// Transaction did not pass signature verification
	// Transaction did not pass signature verification"
	TransactionErrorType_SIGNATURE_FAILURE TransactionErrorType = 12
	/// This program may not be used for executing instructions
	// This program may not be used for executing instructions"
	TransactionErrorType_INVALID_PROGRAM_FOR_EXECUTION TransactionErrorType = 13
	/// Transaction failed to sanitize accounts offsets correctly
	/// implies that account locks are not taken for this TX, and should
	/// not be unlocked.
	// Transaction failed to sanitize accounts offsets correctly"
	TransactionErrorType_SANITIZE_FAILURE TransactionErrorType = 14
	// Transactions are currently disabled due to cluster maintenance"
	TransactionErrorType_CLUSTER_MAINTENANCE TransactionErrorType = 15
)

var TransactionErrorType_name = map[int32]string{
	0:  "ACCOUNT_IN_USE",
	1:  "ACCOUNT_LOADED_TWICE",
	2:  "ACCOUNT_NOT_FOUND",
	3:  "PROGRAM_ACCOUNT_NOT_FOUND",
	4:  "INSUFFICIENT_FUNDS_FOR_FEE",
	5:  "INVALID_ACCOUNT_FOR_FEE",
	6:  "DUPLICATE_SIGNATURE",
	7:  "BLOCKHASH_NOT_FOUND",
	8:  "INSTRUCTION_ERROR",
	9:  "CALL_CHAIN_TOO_DEEP",
	10: "MISSING_SIGNATURE_FOR_FEE",
	11: "INVALID_ACCOUNT_INDEX",
	12: "SIGNATURE_FAILURE",
	13: "INVALID_PROGRAM_FOR_EXECUTION",
	14: "SANITIZE_FAILURE",
	15: "CLUSTER_MAINTENANCE",
}

var TransactionErrorType_value = map[string]int32{
	"ACCOUNT_IN_USE":                0,
	"ACCOUNT_LOADED_TWICE":          1,
	"ACCOUNT_NOT_FOUND":             2,
	"PROGRAM_ACCOUNT_NOT_FOUND":     3,
	"INSUFFICIENT_FUNDS_FOR_FEE":    4,
	"INVALID_ACCOUNT_FOR_FEE":       5,
	"DUPLICATE_SIGNATURE":           6,
	"BLOCKHASH_NOT_FOUND":           7,
	"INSTRUCTION_ERROR":             8,
	"CALL_CHAIN_TOO_DEEP":           9,
	"MISSING_SIGNATURE_FOR_FEE":     10,
	"INVALID_ACCOUNT_INDEX":         11,
	"SIGNATURE_FAILURE":             12,
	"INVALID_PROGRAM_FOR_EXECUTION": 13,
	"SANITIZE_FAILURE":              14,
	"CLUSTER_MAINTENANCE":           15,
}

func (x TransactionErrorType) String() string {
	return proto.EnumName(TransactionErrorType_name, int32(x))
}

func (TransactionErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{0}
}

type InstructionErrorType int32

const (
	/// Deprecated! Use CustomError instead! The program instruction returned an error
	// generic instruction error
	InstructionErrorType_GENERIC_ERROR InstructionErrorType = 0
	/// The arguments provided to a program were invalid
	// invalid program argument
	InstructionErrorType_INVALID_ARGUMENT InstructionErrorType = 1
	/// An instruction's data contents were invalid
	// invalid instruction data
	InstructionErrorType_INVALID_INSTRUCTION_DATA InstructionErrorType = 2
	/// An account's data contents was invalid
	// invalid account data for instruction
	InstructionErrorType_INVALID_ACCOUNT_DATA InstructionErrorType = 3
	/// An account's data was too small
	// account data too small for instruction
	InstructionErrorType_ACCOUNT_DATA_TOO_SMALL InstructionErrorType = 4
	/// An account's balance was too small to complete the instruction
	// insufficient funds for instruction
	InstructionErrorType_INSUFFICIENT_FUNDS InstructionErrorType = 5
	/// The account did not have the expected program id
	// incorrect program id for instruction
	InstructionErrorType_INCORRECT_PROGRAM_ID InstructionErrorType = 6
	/// A signature was required but not found
	// missing required signature for instruction
	InstructionErrorType_MISSING_REQUIRED_SIGNATURE InstructionErrorType = 7
	/// An initialize instruction was sent to an account that has already been initialized.
	// instruction requires an uninitialized account
	InstructionErrorType_ACCOUNT_ALREADY_INITIALIZED InstructionErrorType = 8
	/// An attempt to operate on an account that hasn't been initialized.
	// instruction requires an initialized account
	InstructionErrorType_UNINITIALIZED_ACCOUNT InstructionErrorType = 9
	/// Program's instruction lamport balance does not equal the balance after the instruction
	// sum of account balances before and after instruction do not match
	InstructionErrorType_UNBALANCED_INSTRUCTION InstructionErrorType = 10
	/// Program modified an account's program id
	// instruction modified the program id of an account
	InstructionErrorType_MODIFIED_PROGRAM_ID InstructionErrorType = 11
	/// Program spent the lamports of an account that doesn't belong to it
	// instruction spent from the balance of an account it does not own
	InstructionErrorType_EXTERNAL_ACCOUNT_LAMPORT_SPEND InstructionErrorType = 12
	/// Program modified the data of an account that doesn't belong to it
	// instruction modified data of an account it does not own
	InstructionErrorType_EXTERNAL_ACCOUNT_DATA_MODIFIED InstructionErrorType = 13
	/// Read-only account's lamports modified
	// instruction changed the balance of a read-only account
	InstructionErrorType_READONLY_LAMPORT_CHANGE InstructionErrorType = 14
	/// Read-only account's data was modified
	// instruction modified data of a read-only account
	InstructionErrorType_READONLY_DATA_MODIFIED InstructionErrorType = 15
	/// An account was referenced more than once in a single instruction
	// Deprecated, instructions can now contain duplicate accounts
	// instruction contains duplicate accounts
	InstructionErrorType_DUPLICATE_ACCOUNT_INDEX InstructionErrorType = 16
	/// Executable bit on account changed, but shouldn't have
	// instruction changed executable bit of an account
	InstructionErrorType_EXECUTABLE_MODIFIED InstructionErrorType = 17
	/// Rent_epoch account changed, but shouldn't have
	// instruction modified rent epoch of an account
	InstructionErrorType_RENT_EPOCH_MODIFIED InstructionErrorType = 18
	/// The instruction expected additional account keys
	// insufficient account keys for instruction
	InstructionErrorType_NOT_ENOUGH_ACCOUNT_KEYS InstructionErrorType = 19
	/// A non-system program changed the size of the account data
	// non-system instruction changed account size
	InstructionErrorType_ACCOUNT_DATA_SIZE_CHANGED InstructionErrorType = 20
	/// The instruction expected an executable account
	// instruction expected an executable account
	InstructionErrorType_ACCOUNT_NOT_EXECUTABLE InstructionErrorType = 21
	/// Failed to borrow a reference to account data, already borrowed
	// instruction tries to borrow reference for an account which is already borrowed
	InstructionErrorType_ACCOUNT_BORROW_FAILED InstructionErrorType = 22
	/// Account data has an outstanding reference after a program's execution
	// instruction left account with an outstanding reference borrowed
	InstructionErrorType_ACCOUNT_BORROW_OUTSTANDING InstructionErrorType = 23
	/// The same account was multiply passed to an on-chain program's entrypoint, but the program
	/// modified them differently.  A program can only modify one instance of the account because
	/// the runtime cannot determine which changes to pick or how to merge them if both are modified
	// instruction modifications of multiply-passed account differ
	InstructionErrorType_DUPLICATE_ACCOUNT_OUT_OF_SYNC InstructionErrorType = 24
	/// Allows on-chain programs to implement program-specific error types and see them returned
	/// by the Solana runtime. A program-specific error may be any type that is represented as
	/// or serialized to a u32 integer.
	// custom program error: {0:#x}
	InstructionErrorType_CUSTOM InstructionErrorType = 25
	/// The return value from the program was invalid.  Valid errors are either a defined builtin
	/// error value or a user-defined error in the lower 32 bits.
	// program returned invalid error code
	InstructionErrorType_INVALID_ERROR InstructionErrorType = 26
	/// Executable account's data was modified
	// instruction changed executable accounts data
	InstructionErrorType_EXECUTABLE_DATA_MODIFIED InstructionErrorType = 27
	/// Executable account's lamports modified
	// instruction changed the balance of a executable account
	InstructionErrorType_EXECUTABLE_LAMPORT_CHANGE InstructionErrorType = 28
	/// Executable accounts must be rent exempt
	// executable accounts must be rent exempt
	InstructionErrorType_EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT InstructionErrorType = 29
	/// Unsupported program id
	// Unsupported program id
	InstructionErrorType_UNSUPPORTED_PROGRAM_ID InstructionErrorType = 30
	/// Cross-program invocation call depth too deep
	// Cross-program invocation call depth too deep
	InstructionErrorType_CALL_DEPTH InstructionErrorType = 31
	/// An account required by the instruction is missing
	// An account required by the instruction is missing
	InstructionErrorType_MISSING_ACCOUNT InstructionErrorType = 32
	/// Cross-program invocation reentrancy not allowed for this instruction
	// Cross-program invocation reentrancy not allowed for this instruction
	InstructionErrorType_REENTRANCY_NOT_ALLOWED InstructionErrorType = 33
	/// Length of the seed is too long for address generation
	// Length of the seed is too long for address generation
	InstructionErrorType_MAX_SEED_LENGTH_EXCEEDED InstructionErrorType = 34
	/// Provided seeds do not result in a valid address
	// Provided seeds do not result in a valid address
	InstructionErrorType_INVALID_SEEDS InstructionErrorType = 35
	/// Failed to reallocate account data of this length
	// Failed to reallocate account data
	InstructionErrorType_INVALID_REALLOC InstructionErrorType = 36
	/// Computational budget exceeded
	// Computational budget exceeded
	InstructionErrorType_COMPUTATIONAL_BUDGET_EXCEEDED InstructionErrorType = 37
	/// Cross-program invocation with unauthorized signer or writable account
	// Cross-program invocation with unauthorized signer or writable account
	InstructionErrorType_PRIVILEGE_ESCALATION InstructionErrorType = 38
	// Failed to create program execution environment
	InstructionErrorType_PROGRAM_ENVIRONMENT_SETUP_FAILURE InstructionErrorType = 39
	// Program failed to complete
	InstructionErrorType_PROGRAM_FAILED_TO_COMPLETE InstructionErrorType = 40
	// Program failed to compile
	InstructionErrorType_PROGRAM_FAILED_TO_COMPILE InstructionErrorType = 41
	// Account is immutable
	InstructionErrorType_IMMUTABLE InstructionErrorType = 42
	// Incorrect authority provided
	InstructionErrorType_INCORRECT_AUTHORITY InstructionErrorType = 43
)

var InstructionErrorType_name = map[int32]string{
	0:  "GENERIC_ERROR",
	1:  "INVALID_ARGUMENT",
	2:  "INVALID_INSTRUCTION_DATA",
	3:  "INVALID_ACCOUNT_DATA",
	4:  "ACCOUNT_DATA_TOO_SMALL",
	5:  "INSUFFICIENT_FUNDS",
	6:  "INCORRECT_PROGRAM_ID",
	7:  "MISSING_REQUIRED_SIGNATURE",
	8:  "ACCOUNT_ALREADY_INITIALIZED",
	9:  "UNINITIALIZED_ACCOUNT",
	10: "UNBALANCED_INSTRUCTION",
	11: "MODIFIED_PROGRAM_ID",
	12: "EXTERNAL_ACCOUNT_LAMPORT_SPEND",
	13: "EXTERNAL_ACCOUNT_DATA_MODIFIED",
	14: "READONLY_LAMPORT_CHANGE",
	15: "READONLY_DATA_MODIFIED",
	16: "DUPLICATE_ACCOUNT_INDEX",
	17: "EXECUTABLE_MODIFIED",
	18: "RENT_EPOCH_MODIFIED",
	19: "NOT_ENOUGH_ACCOUNT_KEYS",
	20: "ACCOUNT_DATA_SIZE_CHANGED",
	21: "ACCOUNT_NOT_EXECUTABLE",
	22: "ACCOUNT_BORROW_FAILED",
	23: "ACCOUNT_BORROW_OUTSTANDING",
	24: "DUPLICATE_ACCOUNT_OUT_OF_SYNC",
	25: "CUSTOM",
	26: "INVALID_ERROR",
	27: "EXECUTABLE_DATA_MODIFIED",
	28: "EXECUTABLE_LAMPORT_CHANGE",
	29: "EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT",
	30: "UNSUPPORTED_PROGRAM_ID",
	31: "CALL_DEPTH",
	32: "MISSING_ACCOUNT",
	33: "REENTRANCY_NOT_ALLOWED",
	34: "MAX_SEED_LENGTH_EXCEEDED",
	35: "INVALID_SEEDS",
	36: "INVALID_REALLOC",
	37: "COMPUTATIONAL_BUDGET_EXCEEDED",
	38: "PRIVILEGE_ESCALATION",
	39: "PROGRAM_ENVIRONMENT_SETUP_FAILURE",
	40: "PROGRAM_FAILED_TO_COMPLETE",
	41: "PROGRAM_FAILED_TO_COMPILE",
	42: "IMMUTABLE",
	43: "INCORRECT_AUTHORITY",
}

var InstructionErrorType_value = map[string]int32{
	"GENERIC_ERROR":                      0,
	"INVALID_ARGUMENT":                   1,
	"INVALID_INSTRUCTION_DATA":           2,
	"INVALID_ACCOUNT_DATA":               3,
	"ACCOUNT_DATA_TOO_SMALL":             4,
	"INSUFFICIENT_FUNDS":                 5,
	"INCORRECT_PROGRAM_ID":               6,
	"MISSING_REQUIRED_SIGNATURE":         7,
	"ACCOUNT_ALREADY_INITIALIZED":        8,
	"UNINITIALIZED_ACCOUNT":              9,
	"UNBALANCED_INSTRUCTION":             10,
	"MODIFIED_PROGRAM_ID":                11,
	"EXTERNAL_ACCOUNT_LAMPORT_SPEND":     12,
	"EXTERNAL_ACCOUNT_DATA_MODIFIED":     13,
	"READONLY_LAMPORT_CHANGE":            14,
	"READONLY_DATA_MODIFIED":             15,
	"DUPLICATE_ACCOUNT_INDEX":            16,
	"EXECUTABLE_MODIFIED":                17,
	"RENT_EPOCH_MODIFIED":                18,
	"NOT_ENOUGH_ACCOUNT_KEYS":            19,
	"ACCOUNT_DATA_SIZE_CHANGED":          20,
	"ACCOUNT_NOT_EXECUTABLE":             21,
	"ACCOUNT_BORROW_FAILED":              22,
	"ACCOUNT_BORROW_OUTSTANDING":         23,
	"DUPLICATE_ACCOUNT_OUT_OF_SYNC":      24,
	"CUSTOM":                             25,
	"INVALID_ERROR":                      26,
	"EXECUTABLE_DATA_MODIFIED":           27,
	"EXECUTABLE_LAMPORT_CHANGE":          28,
	"EXECUTABLE_ACCOUNT_NOT_RENT_EXEMPT": 29,
	"UNSUPPORTED_PROGRAM_ID":             30,
	"CALL_DEPTH":                         31,
	"MISSING_ACCOUNT":                    32,
	"REENTRANCY_NOT_ALLOWED":             33,
	"MAX_SEED_LENGTH_EXCEEDED":           34,
	"INVALID_SEEDS":                      35,
	"INVALID_REALLOC":                    36,
	"COMPUTATIONAL_BUDGET_EXCEEDED":      37,
	"PRIVILEGE_ESCALATION":               38,
	"PROGRAM_ENVIRONMENT_SETUP_FAILURE":  39,
	"PROGRAM_FAILED_TO_COMPLETE":         40,
	"PROGRAM_FAILED_TO_COMPILE":          41,
	"IMMUTABLE":                          42,
	"INCORRECT_AUTHORITY":                43,
}

func (x InstructionErrorType) String() string {
	return proto.EnumName(InstructionErrorType_name, int32(x))
}

func (InstructionErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{1}
}

type Slot struct {
	Id                     string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number                 uint64         `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	PreviousId             string         `protobuf:"bytes,3,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"`
	Version                uint32         `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Block                  *Block         `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
	Transactions           []*Transaction `protobuf:"bytes,7,rep,name=transactions,proto3" json:"transactions,omitempty"`
	TransactionCount       uint32         `protobuf:"varint,8,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	HasSplitAccountChanges bool           `protobuf:"varint,9,opt,name=has_split_account_changes,json=hasSplitAccountChanges,proto3" json:"has_split_account_changes,omitempty"`
	AccountChangesFileRef  string         `protobuf:"bytes,10,opt,name=account_changes_file_ref,json=accountChangesFileRef,proto3" json:"account_changes_file_ref,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}       `json:"-"`
	XXX_unrecognized       []byte         `json:"-"`
	XXX_sizecache          int32          `json:"-"`
}

func (m *Slot) Reset()         { *m = Slot{} }
func (m *Slot) String() string { return proto.CompactTextString(m) }
func (*Slot) ProtoMessage()    {}
func (*Slot) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{0}
}

func (m *Slot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Slot.Unmarshal(m, b)
}
func (m *Slot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Slot.Marshal(b, m, deterministic)
}
func (m *Slot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slot.Merge(m, src)
}
func (m *Slot) XXX_Size() int {
	return xxx_messageInfo_Slot.Size(m)
}
func (m *Slot) XXX_DiscardUnknown() {
	xxx_messageInfo_Slot.DiscardUnknown(m)
}

var xxx_messageInfo_Slot proto.InternalMessageInfo

func (m *Slot) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Slot) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Slot) GetPreviousId() string {
	if m != nil {
		return m.PreviousId
	}
	return ""
}

func (m *Slot) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Slot) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *Slot) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Slot) GetTransactionCount() uint32 {
	if m != nil {
		return m.TransactionCount
	}
	return 0
}

func (m *Slot) GetHasSplitAccountChanges() bool {
	if m != nil {
		return m.HasSplitAccountChanges
	}
	return false
}

func (m *Slot) GetAccountChangesFileRef() string {
	if m != nil {
		return m.AccountChangesFileRef
	}
	return ""
}

type Block struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number               uint64   `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Height               uint64   `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	PreviousId           string   `protobuf:"bytes,4,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"`
	PreviousBlockSlot    uint64   `protobuf:"varint,5,opt,name=previous_block_slot,json=previousBlockSlot,proto3" json:"previous_block_slot,omitempty"`
	GenesisUnixTimestamp uint64   `protobuf:"varint,6,opt,name=genesis_unix_timestamp,json=genesisUnixTimestamp,proto3" json:"genesis_unix_timestamp,omitempty"`
	ClockUnixTimestamp   uint64   `protobuf:"varint,7,opt,name=clock_unix_timestamp,json=clockUnixTimestamp,proto3" json:"clock_unix_timestamp,omitempty"`
	RootNum              uint64   `protobuf:"varint,8,opt,name=root_num,json=rootNum,proto3" json:"root_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{1}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Block) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetPreviousId() string {
	if m != nil {
		return m.PreviousId
	}
	return ""
}

func (m *Block) GetPreviousBlockSlot() uint64 {
	if m != nil {
		return m.PreviousBlockSlot
	}
	return 0
}

func (m *Block) GetGenesisUnixTimestamp() uint64 {
	if m != nil {
		return m.GenesisUnixTimestamp
	}
	return 0
}

func (m *Block) GetClockUnixTimestamp() uint64 {
	if m != nil {
		return m.ClockUnixTimestamp
	}
	return 0
}

func (m *Block) GetRootNum() uint64 {
	if m != nil {
		return m.RootNum
	}
	return 0
}

type Batch struct {
	Transactions         []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{2}
}

func (m *Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batch.Unmarshal(m, b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return xxx_messageInfo_Batch.Size(m)
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// Bundled in separate files, referenced by `account_changes_file_ref`
type AccountChangesBundle struct {
	// Maps to the index of the `repeated` field for Block::transactions
	Transactions         []*AccountChangesPerTrxIndex `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *AccountChangesBundle) Reset()         { *m = AccountChangesBundle{} }
func (m *AccountChangesBundle) String() string { return proto.CompactTextString(m) }
func (*AccountChangesBundle) ProtoMessage()    {}
func (*AccountChangesBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{3}
}

func (m *AccountChangesBundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountChangesBundle.Unmarshal(m, b)
}
func (m *AccountChangesBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountChangesBundle.Marshal(b, m, deterministic)
}
func (m *AccountChangesBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountChangesBundle.Merge(m, src)
}
func (m *AccountChangesBundle) XXX_Size() int {
	return xxx_messageInfo_AccountChangesBundle.Size(m)
}
func (m *AccountChangesBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountChangesBundle.DiscardUnknown(m)
}

var xxx_messageInfo_AccountChangesBundle proto.InternalMessageInfo

func (m *AccountChangesBundle) GetTransactions() []*AccountChangesPerTrxIndex {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type AccountChangesPerTrxIndex struct {
	TrxId string `protobuf:"bytes,1,opt,name=TrxId,proto3" json:"TrxId,omitempty"`
	// Maps to the index within the `repeated` field of the proto for
	// Transaction::instructions
	Instructions         []*AccountChangesPerInstruction `protobuf:"bytes,2,rep,name=instructions,proto3" json:"instructions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *AccountChangesPerTrxIndex) Reset()         { *m = AccountChangesPerTrxIndex{} }
func (m *AccountChangesPerTrxIndex) String() string { return proto.CompactTextString(m) }
func (*AccountChangesPerTrxIndex) ProtoMessage()    {}
func (*AccountChangesPerTrxIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{4}
}

func (m *AccountChangesPerTrxIndex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountChangesPerTrxIndex.Unmarshal(m, b)
}
func (m *AccountChangesPerTrxIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountChangesPerTrxIndex.Marshal(b, m, deterministic)
}
func (m *AccountChangesPerTrxIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountChangesPerTrxIndex.Merge(m, src)
}
func (m *AccountChangesPerTrxIndex) XXX_Size() int {
	return xxx_messageInfo_AccountChangesPerTrxIndex.Size(m)
}
func (m *AccountChangesPerTrxIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountChangesPerTrxIndex.DiscardUnknown(m)
}

var xxx_messageInfo_AccountChangesPerTrxIndex proto.InternalMessageInfo

func (m *AccountChangesPerTrxIndex) GetTrxId() string {
	if m != nil {
		return m.TrxId
	}
	return ""
}

func (m *AccountChangesPerTrxIndex) GetInstructions() []*AccountChangesPerInstruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

type AccountChangesPerInstruction struct {
	// Data to be put in Instruction::account_changes
	Changes              []*AccountChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AccountChangesPerInstruction) Reset()         { *m = AccountChangesPerInstruction{} }
func (m *AccountChangesPerInstruction) String() string { return proto.CompactTextString(m) }
func (*AccountChangesPerInstruction) ProtoMessage()    {}
func (*AccountChangesPerInstruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{5}
}

func (m *AccountChangesPerInstruction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountChangesPerInstruction.Unmarshal(m, b)
}
func (m *AccountChangesPerInstruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountChangesPerInstruction.Marshal(b, m, deterministic)
}
func (m *AccountChangesPerInstruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountChangesPerInstruction.Merge(m, src)
}
func (m *AccountChangesPerInstruction) XXX_Size() int {
	return xxx_messageInfo_AccountChangesPerInstruction.Size(m)
}
func (m *AccountChangesPerInstruction) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountChangesPerInstruction.DiscardUnknown(m)
}

var xxx_messageInfo_AccountChangesPerInstruction proto.InternalMessageInfo

func (m *AccountChangesPerInstruction) GetChanges() []*AccountChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

type Transaction struct {
	// The transaction ID corresponds to the _first_
	// signature. Additional signatures are in `additional_signatures`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// slot_num could be zero for non-executed transactions
	SlotNum uint64 `protobuf:"varint,2,opt,name=slot_num,json=slotNum,proto3" json:"slot_num,omitempty"`
	// slot_hash could be empty for non-executed transactions
	SlotHash string `protobuf:"bytes,3,opt,name=slot_hash,json=slotHash,proto3" json:"slot_hash,omitempty"`
	// Index from within a single Slot, deterministically ordered to the
	// best of our ability using the transaction ID as a sort key for
	// the batch of transactions executed in parallel.
	Index                uint64         `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	AdditionalSignatures []string       `protobuf:"bytes,5,rep,name=additional_signatures,json=additionalSignatures,proto3" json:"additional_signatures,omitempty"`
	Header               *MessageHeader `protobuf:"bytes,6,opt,name=header,proto3" json:"header,omitempty"`
	// From the original Message object
	AccountKeys []string `protobuf:"bytes,7,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
	// From the original Message object
	RecentBlockhash string `protobuf:"bytes,8,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash,omitempty"`
	// What follows Once executed these can be set:
	LogMessages []string `protobuf:"bytes,12,rep,name=log_messages,json=logMessages,proto3" json:"log_messages,omitempty"`
	// Instructions, containing both top-level and nested transactions
	Instructions         []*Instruction    `protobuf:"bytes,13,rep,name=instructions,proto3" json:"instructions,omitempty"`
	Failed               bool              `protobuf:"varint,15,opt,name=failed,proto3" json:"failed,omitempty"`
	Error                *TransactionError `protobuf:"bytes,16,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{6}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Transaction) GetSlotNum() uint64 {
	if m != nil {
		return m.SlotNum
	}
	return 0
}

func (m *Transaction) GetSlotHash() string {
	if m != nil {
		return m.SlotHash
	}
	return ""
}

func (m *Transaction) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Transaction) GetAdditionalSignatures() []string {
	if m != nil {
		return m.AdditionalSignatures
	}
	return nil
}

func (m *Transaction) GetHeader() *MessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Transaction) GetAccountKeys() []string {
	if m != nil {
		return m.AccountKeys
	}
	return nil
}

func (m *Transaction) GetRecentBlockhash() string {
	if m != nil {
		return m.RecentBlockhash
	}
	return ""
}

func (m *Transaction) GetLogMessages() []string {
	if m != nil {
		return m.LogMessages
	}
	return nil
}

func (m *Transaction) GetInstructions() []*Instruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

func (m *Transaction) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *Transaction) GetError() *TransactionError {
	if m != nil {
		return m.Error
	}
	return nil
}

type MessageHeader struct {
	NumRequiredSignatures       uint32   `protobuf:"varint,1,opt,name=num_required_signatures,json=numRequiredSignatures,proto3" json:"num_required_signatures,omitempty"`
	NumReadonlySignedAccounts   uint32   `protobuf:"varint,2,opt,name=num_readonly_signed_accounts,json=numReadonlySignedAccounts,proto3" json:"num_readonly_signed_accounts,omitempty"`
	NumReadonlyUnsignedAccounts uint32   `protobuf:"varint,3,opt,name=num_readonly_unsigned_accounts,json=numReadonlyUnsignedAccounts,proto3" json:"num_readonly_unsigned_accounts,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *MessageHeader) Reset()         { *m = MessageHeader{} }
func (m *MessageHeader) String() string { return proto.CompactTextString(m) }
func (*MessageHeader) ProtoMessage()    {}
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{7}
}

func (m *MessageHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageHeader.Unmarshal(m, b)
}
func (m *MessageHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageHeader.Marshal(b, m, deterministic)
}
func (m *MessageHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageHeader.Merge(m, src)
}
func (m *MessageHeader) XXX_Size() int {
	return xxx_messageInfo_MessageHeader.Size(m)
}
func (m *MessageHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MessageHeader proto.InternalMessageInfo

func (m *MessageHeader) GetNumRequiredSignatures() uint32 {
	if m != nil {
		return m.NumRequiredSignatures
	}
	return 0
}

func (m *MessageHeader) GetNumReadonlySignedAccounts() uint32 {
	if m != nil {
		return m.NumReadonlySignedAccounts
	}
	return 0
}

func (m *MessageHeader) GetNumReadonlyUnsignedAccounts() uint32 {
	if m != nil {
		return m.NumReadonlyUnsignedAccounts
	}
	return 0
}

type Instruction struct {
	ProgramId            string            `protobuf:"bytes,3,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	AccountKeys          []string          `protobuf:"bytes,4,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
	Data                 []byte            `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Ordinal              uint32            `protobuf:"varint,6,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	ParentOrdinal        uint32            `protobuf:"varint,7,opt,name=parent_ordinal,json=parentOrdinal,proto3" json:"parent_ordinal,omitempty"`
	Depth                uint32            `protobuf:"varint,8,opt,name=depth,proto3" json:"depth,omitempty"`
	BalanceChanges       []*BalanceChange  `protobuf:"bytes,9,rep,name=balance_changes,json=balanceChanges,proto3" json:"balance_changes,omitempty"`
	AccountChanges       []*AccountChange  `protobuf:"bytes,10,rep,name=account_changes,json=accountChanges,proto3" json:"account_changes,omitempty"`
	Failed               bool              `protobuf:"varint,15,opt,name=failed,proto3" json:"failed,omitempty"`
	Error                *InstructionError `protobuf:"bytes,16,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Instruction) Reset()         { *m = Instruction{} }
func (m *Instruction) String() string { return proto.CompactTextString(m) }
func (*Instruction) ProtoMessage()    {}
func (*Instruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{8}
}

func (m *Instruction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instruction.Unmarshal(m, b)
}
func (m *Instruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instruction.Marshal(b, m, deterministic)
}
func (m *Instruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instruction.Merge(m, src)
}
func (m *Instruction) XXX_Size() int {
	return xxx_messageInfo_Instruction.Size(m)
}
func (m *Instruction) XXX_DiscardUnknown() {
	xxx_messageInfo_Instruction.DiscardUnknown(m)
}

var xxx_messageInfo_Instruction proto.InternalMessageInfo

func (m *Instruction) GetProgramId() string {
	if m != nil {
		return m.ProgramId
	}
	return ""
}

func (m *Instruction) GetAccountKeys() []string {
	if m != nil {
		return m.AccountKeys
	}
	return nil
}

func (m *Instruction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Instruction) GetOrdinal() uint32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

func (m *Instruction) GetParentOrdinal() uint32 {
	if m != nil {
		return m.ParentOrdinal
	}
	return 0
}

func (m *Instruction) GetDepth() uint32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *Instruction) GetBalanceChanges() []*BalanceChange {
	if m != nil {
		return m.BalanceChanges
	}
	return nil
}

func (m *Instruction) GetAccountChanges() []*AccountChange {
	if m != nil {
		return m.AccountChanges
	}
	return nil
}

func (m *Instruction) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *Instruction) GetError() *InstructionError {
	if m != nil {
		return m.Error
	}
	return nil
}

type BalanceChange struct {
	Pubkey               string   `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	PrevLamports         uint64   `protobuf:"varint,2,opt,name=prev_lamports,json=prevLamports,proto3" json:"prev_lamports,omitempty"`
	NewLamports          uint64   `protobuf:"varint,3,opt,name=new_lamports,json=newLamports,proto3" json:"new_lamports,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BalanceChange) Reset()         { *m = BalanceChange{} }
func (m *BalanceChange) String() string { return proto.CompactTextString(m) }
func (*BalanceChange) ProtoMessage()    {}
func (*BalanceChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{9}
}

func (m *BalanceChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BalanceChange.Unmarshal(m, b)
}
func (m *BalanceChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BalanceChange.Marshal(b, m, deterministic)
}
func (m *BalanceChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceChange.Merge(m, src)
}
func (m *BalanceChange) XXX_Size() int {
	return xxx_messageInfo_BalanceChange.Size(m)
}
func (m *BalanceChange) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceChange.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceChange proto.InternalMessageInfo

func (m *BalanceChange) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *BalanceChange) GetPrevLamports() uint64 {
	if m != nil {
		return m.PrevLamports
	}
	return 0
}

func (m *BalanceChange) GetNewLamports() uint64 {
	if m != nil {
		return m.NewLamports
	}
	return 0
}

type AccountChange struct {
	Pubkey               string   `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	PrevData             []byte   `protobuf:"bytes,2,opt,name=prev_data,json=prevData,proto3" json:"prev_data,omitempty"`
	NewData              []byte   `protobuf:"bytes,3,opt,name=new_data,json=newData,proto3" json:"new_data,omitempty"`
	NewDataLength        uint64   `protobuf:"varint,4,opt,name=new_data_length,json=newDataLength,proto3" json:"new_data_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountChange) Reset()         { *m = AccountChange{} }
func (m *AccountChange) String() string { return proto.CompactTextString(m) }
func (*AccountChange) ProtoMessage()    {}
func (*AccountChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{10}
}

func (m *AccountChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountChange.Unmarshal(m, b)
}
func (m *AccountChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountChange.Marshal(b, m, deterministic)
}
func (m *AccountChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountChange.Merge(m, src)
}
func (m *AccountChange) XXX_Size() int {
	return xxx_messageInfo_AccountChange.Size(m)
}
func (m *AccountChange) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountChange.DiscardUnknown(m)
}

var xxx_messageInfo_AccountChange proto.InternalMessageInfo

func (m *AccountChange) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *AccountChange) GetPrevData() []byte {
	if m != nil {
		return m.PrevData
	}
	return nil
}

func (m *AccountChange) GetNewData() []byte {
	if m != nil {
		return m.NewData
	}
	return nil
}

func (m *AccountChange) GetNewDataLength() uint64 {
	if m != nil {
		return m.NewDataLength
	}
	return 0
}

type TransactionError struct {
	Type                 TransactionErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=dfuse.solana.codec.v1.TransactionErrorType" json:"type,omitempty"`
	Payload              *any.Any             `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TransactionError) Reset()         { *m = TransactionError{} }
func (m *TransactionError) String() string { return proto.CompactTextString(m) }
func (*TransactionError) ProtoMessage()    {}
func (*TransactionError) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{11}
}

func (m *TransactionError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionError.Unmarshal(m, b)
}
func (m *TransactionError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionError.Marshal(b, m, deterministic)
}
func (m *TransactionError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionError.Merge(m, src)
}
func (m *TransactionError) XXX_Size() int {
	return xxx_messageInfo_TransactionError.Size(m)
}
func (m *TransactionError) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionError.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionError proto.InternalMessageInfo

func (m *TransactionError) GetType() TransactionErrorType {
	if m != nil {
		return m.Type
	}
	return TransactionErrorType_ACCOUNT_IN_USE
}

func (m *TransactionError) GetPayload() *any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

type TransactionInstructionError struct {
	Index                uint32            `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Error                *InstructionError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TransactionInstructionError) Reset()         { *m = TransactionInstructionError{} }
func (m *TransactionInstructionError) String() string { return proto.CompactTextString(m) }
func (*TransactionInstructionError) ProtoMessage()    {}
func (*TransactionInstructionError) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{12}
}

func (m *TransactionInstructionError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionInstructionError.Unmarshal(m, b)
}
func (m *TransactionInstructionError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionInstructionError.Marshal(b, m, deterministic)
}
func (m *TransactionInstructionError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInstructionError.Merge(m, src)
}
func (m *TransactionInstructionError) XXX_Size() int {
	return xxx_messageInfo_TransactionInstructionError.Size(m)
}
func (m *TransactionInstructionError) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInstructionError.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInstructionError proto.InternalMessageInfo

func (m *TransactionInstructionError) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TransactionInstructionError) GetError() *InstructionError {
	if m != nil {
		return m.Error
	}
	return nil
}

type InstructionError struct {
	Type                 InstructionErrorType `protobuf:"varint,2,opt,name=type,proto3,enum=dfuse.solana.codec.v1.InstructionErrorType" json:"type,omitempty"`
	Payload              *any.Any             `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *InstructionError) Reset()         { *m = InstructionError{} }
func (m *InstructionError) String() string { return proto.CompactTextString(m) }
func (*InstructionError) ProtoMessage()    {}
func (*InstructionError) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{13}
}

func (m *InstructionError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstructionError.Unmarshal(m, b)
}
func (m *InstructionError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstructionError.Marshal(b, m, deterministic)
}
func (m *InstructionError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstructionError.Merge(m, src)
}
func (m *InstructionError) XXX_Size() int {
	return xxx_messageInfo_InstructionError.Size(m)
}
func (m *InstructionError) XXX_DiscardUnknown() {
	xxx_messageInfo_InstructionError.DiscardUnknown(m)
}

var xxx_messageInfo_InstructionError proto.InternalMessageInfo

func (m *InstructionError) GetType() InstructionErrorType {
	if m != nil {
		return m.Type
	}
	return InstructionErrorType_GENERIC_ERROR
}

func (m *InstructionError) GetPayload() *any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

type InstructionErrorCustom struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstructionErrorCustom) Reset()         { *m = InstructionErrorCustom{} }
func (m *InstructionErrorCustom) String() string { return proto.CompactTextString(m) }
func (*InstructionErrorCustom) ProtoMessage()    {}
func (*InstructionErrorCustom) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cf9f0a2b7e0e4b, []int{14}
}

func (m *InstructionErrorCustom) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstructionErrorCustom.Unmarshal(m, b)
}
func (m *InstructionErrorCustom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstructionErrorCustom.Marshal(b, m, deterministic)
}
func (m *InstructionErrorCustom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstructionErrorCustom.Merge(m, src)
}
func (m *InstructionErrorCustom) XXX_Size() int {
	return xxx_messageInfo_InstructionErrorCustom.Size(m)
}
func (m *InstructionErrorCustom) XXX_DiscardUnknown() {
	xxx_messageInfo_InstructionErrorCustom.DiscardUnknown(m)
}

var xxx_messageInfo_InstructionErrorCustom proto.InternalMessageInfo

func (m *InstructionErrorCustom) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterEnum("dfuse.solana.codec.v1.TransactionErrorType", TransactionErrorType_name, TransactionErrorType_value)
	proto.RegisterEnum("dfuse.solana.codec.v1.InstructionErrorType", InstructionErrorType_name, InstructionErrorType_value)
	proto.RegisterType((*Slot)(nil), "dfuse.solana.codec.v1.Slot")
	proto.RegisterType((*Block)(nil), "dfuse.solana.codec.v1.Block")
	proto.RegisterType((*Batch)(nil), "dfuse.solana.codec.v1.Batch")
	proto.RegisterType((*AccountChangesBundle)(nil), "dfuse.solana.codec.v1.AccountChangesBundle")
	proto.RegisterType((*AccountChangesPerTrxIndex)(nil), "dfuse.solana.codec.v1.AccountChangesPerTrxIndex")
	proto.RegisterType((*AccountChangesPerInstruction)(nil), "dfuse.solana.codec.v1.AccountChangesPerInstruction")
	proto.RegisterType((*Transaction)(nil), "dfuse.solana.codec.v1.Transaction")
	proto.RegisterType((*MessageHeader)(nil), "dfuse.solana.codec.v1.MessageHeader")
	proto.RegisterType((*Instruction)(nil), "dfuse.solana.codec.v1.Instruction")
	proto.RegisterType((*BalanceChange)(nil), "dfuse.solana.codec.v1.BalanceChange")
	proto.RegisterType((*AccountChange)(nil), "dfuse.solana.codec.v1.AccountChange")
	proto.RegisterType((*TransactionError)(nil), "dfuse.solana.codec.v1.TransactionError")
	proto.RegisterType((*TransactionInstructionError)(nil), "dfuse.solana.codec.v1.TransactionInstructionError")
	proto.RegisterType((*InstructionError)(nil), "dfuse.solana.codec.v1.InstructionError")
	proto.RegisterType((*InstructionErrorCustom)(nil), "dfuse.solana.codec.v1.InstructionErrorCustom")
}

func init() { proto.RegisterFile("dfuse/solana/codec/v1/codec.proto", fileDescriptor_10cf9f0a2b7e0e4b) }

var fileDescriptor_10cf9f0a2b7e0e4b = []byte{
	// 2008 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xdd, 0x6e, 0xdb, 0xc8,
	0x15, 0x5e, 0x59, 0xb2, 0x65, 0x1d, 0x5b, 0xf6, 0x64, 0x22, 0x3b, 0x72, 0x9c, 0x1f, 0x47, 0xbb,
	0xc9, 0x7a, 0x13, 0x54, 0xde, 0x4d, 0x8a, 0x16, 0x45, 0x7f, 0x16, 0x14, 0x39, 0x96, 0x88, 0x50,
	0xa4, 0x3a, 0x24, 0x13, 0x3b, 0x17, 0x1d, 0xd0, 0x12, 0x2d, 0x11, 0x91, 0x48, 0x95, 0xa4, 0x92,
	0xf8, 0xba, 0x40, 0x0b, 0xf4, 0x15, 0xfa, 0x10, 0x7d, 0x81, 0xbe, 0x42, 0xfb, 0x28, 0x7d, 0x86,
	0x62, 0x86, 0xa4, 0x44, 0xc9, 0x76, 0x9a, 0x6e, 0xef, 0x38, 0xe7, 0x3b, 0xff, 0xe7, 0x9b, 0x33,
	0x82, 0xe0, 0xc9, 0xe0, 0x72, 0x16, 0xb9, 0x27, 0x51, 0x30, 0x76, 0x7c, 0xe7, 0xa4, 0x1f, 0x0c,
	0xdc, 0xfe, 0xc9, 0x87, 0x1f, 0x92, 0x8f, 0xe6, 0x34, 0x0c, 0xe2, 0x00, 0xef, 0x09, 0x95, 0x66,
	0xa2, 0xd2, 0x4c, 0x90, 0x0f, 0x3f, 0xdc, 0x3f, 0x18, 0x06, 0xc1, 0x70, 0xec, 0x9e, 0x08, 0xa5,
	0x8b, 0xd9, 0xe5, 0x89, 0xe3, 0x5f, 0x25, 0x16, 0x8d, 0x3f, 0x17, 0xa1, 0x64, 0x8e, 0x83, 0x18,
	0xef, 0xc0, 0x9a, 0x37, 0xa8, 0x17, 0x8e, 0x0a, 0xc7, 0x15, 0xba, 0xe6, 0x0d, 0xf0, 0x3e, 0x6c,
	0xf8, 0xb3, 0xc9, 0x85, 0x1b, 0xd6, 0xd7, 0x8e, 0x0a, 0xc7, 0x25, 0x9a, 0x9e, 0xf0, 0x63, 0xd8,
	0x9a, 0x86, 0xee, 0x07, 0x2f, 0x98, 0x45, 0xcc, 0x1b, 0xd4, 0x8b, 0xc2, 0x00, 0x32, 0x91, 0x3a,
	0xc0, 0x75, 0x28, 0x7f, 0x70, 0xc3, 0xc8, 0x0b, 0xfc, 0x7a, 0xe9, 0xa8, 0x70, 0x5c, 0xa5, 0xd9,
	0x11, 0xbf, 0x84, 0xf5, 0x8b, 0x71, 0xd0, 0x7f, 0x5f, 0x5f, 0x3f, 0x2a, 0x1c, 0x6f, 0xbd, 0x7c,
	0xd0, 0xbc, 0x31, 0xdb, 0x66, 0x8b, 0xeb, 0xd0, 0x44, 0x15, 0x9f, 0xc2, 0x76, 0x1c, 0x3a, 0x7e,
	0xe4, 0xf4, 0x63, 0x2f, 0xf0, 0xa3, 0x7a, 0xf9, 0xa8, 0x78, 0xbc, 0xf5, 0xb2, 0x71, 0x8b, 0xa9,
	0xb5, 0x50, 0xa5, 0x4b, 0x76, 0xf8, 0x05, 0xdc, 0xc9, 0x9d, 0x59, 0x3f, 0x98, 0xf9, 0x71, 0x7d,
	0x53, 0xe4, 0x87, 0x72, 0x80, 0xcc, 0xe5, 0xf8, 0x57, 0x70, 0x30, 0x72, 0x22, 0x16, 0x4d, 0xc7,
	0x5e, 0xcc, 0x9c, 0xbe, 0x50, 0x66, 0xfd, 0x91, 0xe3, 0x0f, 0xdd, 0xa8, 0x5e, 0x39, 0x2a, 0x1c,
	0x6f, 0xd2, 0xfd, 0x91, 0x13, 0x99, 0x1c, 0x97, 0x12, 0x58, 0x4e, 0x50, 0xfc, 0x4b, 0xa8, 0xaf,
	0x18, 0xb0, 0x4b, 0x6f, 0xec, 0xb2, 0xd0, 0xbd, 0xac, 0x83, 0xe8, 0xd5, 0x9e, 0xb3, 0x64, 0x71,
	0xea, 0x8d, 0x5d, 0xea, 0x5e, 0x36, 0xfe, 0xb6, 0x06, 0xeb, 0xa2, 0xf2, 0x2f, 0x9e, 0xc4, 0x3e,
	0x6c, 0x8c, 0x5c, 0x6f, 0x38, 0x8a, 0xc5, 0x10, 0x4a, 0x34, 0x3d, 0xad, 0x4e, 0xa8, 0x74, 0x6d,
	0x42, 0x4d, 0xb8, 0x3b, 0x57, 0x10, 0x5d, 0x66, 0xd1, 0x38, 0x88, 0xc5, 0x54, 0x4a, 0xf4, 0x4e,
	0x06, 0x89, 0x64, 0x04, 0x35, 0x7e, 0x0e, 0xfb, 0x43, 0xd7, 0x77, 0x23, 0x2f, 0x62, 0x33, 0xdf,
	0xfb, 0xc4, 0x62, 0x6f, 0xe2, 0x46, 0xb1, 0x33, 0x99, 0xd6, 0x37, 0x84, 0x49, 0x2d, 0x45, 0x6d,
	0xdf, 0xfb, 0x64, 0x65, 0x18, 0xfe, 0x1e, 0x6a, 0x7d, 0xe1, 0x7c, 0xc5, 0xa6, 0x2c, 0x6c, 0xb0,
	0xc0, 0x96, 0x2d, 0x0e, 0x60, 0x33, 0x0c, 0x82, 0x98, 0xf9, 0xb3, 0x89, 0x18, 0x4d, 0x89, 0x96,
	0xf9, 0x59, 0x9f, 0x4d, 0x1a, 0x06, 0xac, 0xb7, 0x9c, 0xb8, 0x3f, 0xba, 0xc6, 0x87, 0xc2, 0x4f,
	0xe3, 0x43, 0x63, 0x0c, 0xb5, 0xe5, 0xc9, 0xb5, 0x66, 0xfe, 0x60, 0xec, 0x62, 0xeb, 0x46, 0xff,
	0xdf, 0xdf, 0xe2, 0x7f, 0xd9, 0x45, 0xcf, 0x0d, 0xad, 0xf0, 0x93, 0xea, 0x0f, 0xdc, 0x4f, 0x2b,
	0xd1, 0xfe, 0x5a, 0x80, 0x83, 0x5b, 0x75, 0x71, 0x0d, 0xd6, 0xf9, 0x77, 0x36, 0xf3, 0xe4, 0x80,
	0xdf, 0xc2, 0xb6, 0xe7, 0x47, 0x71, 0x38, 0x4b, 0x33, 0x59, 0x13, 0x99, 0xbc, 0xfa, 0xd2, 0x4c,
	0xd4, 0x85, 0x2d, 0x5d, 0x72, 0xd4, 0xf8, 0x03, 0x3c, 0xf8, 0x9c, 0x36, 0xfe, 0x1d, 0x94, 0x33,
	0xae, 0x27, 0xd5, 0x7f, 0xf3, 0x25, 0x31, 0x69, 0x66, 0xd4, 0xf8, 0x77, 0x11, 0xb6, 0x72, 0x8d,
	0xbf, 0xc6, 0xe7, 0x03, 0xd8, 0xe4, 0x7c, 0x13, 0x63, 0x4e, 0x18, 0x5d, 0xe6, 0x67, 0x7d, 0x36,
	0xc1, 0x87, 0x50, 0x11, 0xd0, 0xc8, 0x89, 0x46, 0xe9, 0x6a, 0x11, 0xba, 0x1d, 0x27, 0x1a, 0xf1,
	0x36, 0x79, 0xbc, 0x5f, 0x82, 0xd1, 0x25, 0x9a, 0x1c, 0xf0, 0x2b, 0xd8, 0x73, 0x06, 0x03, 0x8f,
	0x47, 0x72, 0xc6, 0x2c, 0xf2, 0x86, 0xbe, 0x13, 0xcf, 0x42, 0x37, 0xaa, 0xaf, 0x1f, 0x15, 0x8f,
	0x2b, 0xb4, 0xb6, 0x00, 0xcd, 0x39, 0x86, 0x7f, 0xc3, 0xaf, 0x8e, 0x33, 0x70, 0x43, 0xc1, 0xe0,
	0xdb, 0x2b, 0xec, 0xba, 0x51, 0xe4, 0x0c, 0xdd, 0x8e, 0xd0, 0xa5, 0xa9, 0x0d, 0x7e, 0x02, 0xdb,
	0xd9, 0x1d, 0x7f, 0xef, 0x5e, 0x25, 0x3b, 0xa9, 0x42, 0xb7, 0x52, 0xd9, 0x6b, 0xf7, 0x2a, 0xc2,
	0xdf, 0x01, 0x0a, 0xdd, 0xbe, 0xeb, 0xc7, 0xc9, 0x05, 0x13, 0xf5, 0x6c, 0x8a, 0x7a, 0x76, 0x13,
	0x79, 0x2b, 0x13, 0x73, 0x6f, 0xe3, 0x60, 0xc8, 0x26, 0x49, 0xa8, 0xa8, 0xbe, 0x9d, 0x78, 0x1b,
	0x07, 0xc3, 0x34, 0x7a, 0xc4, 0x49, 0xbf, 0x44, 0x85, 0xea, 0x67, 0x49, 0x7f, 0xeb, 0xe4, 0xf9,
	0xc6, 0xb8, 0x74, 0xbc, 0xb1, 0x3b, 0xa8, 0xef, 0x8a, 0x25, 0x96, 0x9e, 0xf0, 0x6f, 0x61, 0xdd,
	0x0d, 0xc3, 0x20, 0xac, 0x23, 0xd1, 0x8d, 0x6f, 0xff, 0xfb, 0x6d, 0x22, 0x5c, 0x9d, 0x26, 0x56,
	0x8d, 0x7f, 0x16, 0xa0, 0xba, 0xd4, 0x29, 0xfc, 0x0b, 0xb8, 0xe7, 0xcf, 0x26, 0x2c, 0x74, 0xff,
	0x38, 0xf3, 0x42, 0x77, 0x90, 0x1f, 0x4b, 0x41, 0xec, 0xdc, 0x3d, 0x7f, 0x36, 0xa1, 0x29, 0x9a,
	0x9b, 0xcb, 0x8f, 0xf0, 0x20, 0xb1, 0x73, 0x06, 0x81, 0x3f, 0xbe, 0x12, 0x76, 0xee, 0x20, 0x5b,
	0xc1, 0x91, 0xa0, 0x4b, 0x95, 0x1e, 0x08, 0xe3, 0x44, 0xc5, 0x14, 0x1a, 0x29, 0x13, 0x23, 0x2c,
	0xc3, 0xa3, 0x25, 0x07, 0x33, 0x7f, 0xd5, 0x45, 0x51, 0xb8, 0x38, 0xcc, 0xb9, 0xb0, 0x53, 0x9d,
	0xcc, 0x49, 0xe3, 0xef, 0x45, 0xd8, 0xca, 0x5f, 0x88, 0x87, 0x00, 0xd3, 0x30, 0x18, 0x86, 0xce,
	0x64, 0xf1, 0xe2, 0x55, 0x52, 0x89, 0x3a, 0xb8, 0x46, 0x87, 0xd2, 0x75, 0x3a, 0x60, 0x28, 0x0d,
	0x9c, 0xd8, 0x11, 0x2b, 0x76, 0x9b, 0x8a, 0x6f, 0xfe, 0x4e, 0x06, 0xe1, 0xc0, 0xf3, 0x9d, 0xb1,
	0x20, 0x61, 0x95, 0x66, 0x47, 0xfc, 0x14, 0x76, 0xa6, 0x4e, 0xc8, 0xc9, 0x93, 0x29, 0x94, 0x85,
	0x42, 0x35, 0x91, 0x1a, 0xa9, 0x5a, 0x0d, 0xd6, 0x07, 0xee, 0x34, 0x1e, 0xa5, 0xcf, 0x58, 0x72,
	0xc0, 0x5d, 0xd8, 0xbd, 0x70, 0xc6, 0x8e, 0xdf, 0x77, 0x73, 0x2f, 0xd6, 0xe7, 0x6e, 0x71, 0x2b,
	0xd1, 0x4e, 0x6f, 0xf1, 0xce, 0x45, 0xfe, 0x18, 0x71, 0x77, 0xab, 0x0f, 0x20, 0xfc, 0x0f, 0x4b,
	0x61, 0x67, 0xf9, 0xb1, 0xfb, 0x7f, 0x19, 0x98, 0x9b, 0xca, 0x12, 0x03, 0x03, 0xa8, 0x2e, 0x95,
	0xc1, 0xe3, 0x4c, 0x67, 0x17, 0xef, 0xdd, 0xab, 0x74, 0xef, 0xa4, 0x27, 0xfc, 0x35, 0x54, 0xf9,
	0xfb, 0xc6, 0xc6, 0xce, 0x64, 0x1a, 0x84, 0x29, 0xa3, 0x4a, 0x74, 0x9b, 0x0b, 0xb5, 0x54, 0xc6,
	0x07, 0xea, 0xbb, 0x1f, 0x17, 0x3a, 0xc9, 0xf3, 0xba, 0xe5, 0xbb, 0x1f, 0x33, 0x95, 0xc6, 0x5f,
	0x0a, 0x50, 0x5d, 0xaa, 0xf4, 0xd6, 0x88, 0x87, 0x50, 0x11, 0x11, 0xc5, 0xfc, 0xd7, 0xc4, 0xfc,
	0x37, 0xb9, 0x40, 0xe1, 0x1c, 0x38, 0x80, 0x4d, 0x1e, 0x49, 0x60, 0x45, 0x81, 0x95, 0x7d, 0xf7,
	0xa3, 0x80, 0x9e, 0xc1, 0x6e, 0x06, 0xb1, 0xb1, 0xeb, 0x0f, 0xe3, 0x51, 0xba, 0xf7, 0xaa, 0xa9,
	0x86, 0x26, 0x84, 0x8d, 0x3f, 0x15, 0x00, 0xad, 0x5e, 0x4c, 0xfc, 0x23, 0x94, 0xe2, 0xab, 0xa9,
	0x2b, 0x52, 0xd9, 0x79, 0xf9, 0xe2, 0x0b, 0xef, 0xb3, 0x75, 0x35, 0x75, 0xa9, 0x30, 0xc4, 0x4d,
	0x28, 0x4f, 0x9d, 0xab, 0x71, 0xe0, 0x0c, 0x44, 0xce, 0x5b, 0x2f, 0x6b, 0xcd, 0xe4, 0x37, 0x64,
	0x33, 0xfb, 0x0d, 0xd9, 0x94, 0xfc, 0x2b, 0x9a, 0x29, 0x35, 0x42, 0x38, 0xcc, 0x79, 0x5b, 0x1d,
	0x13, 0xa7, 0xaa, 0x78, 0xea, 0xd2, 0xdb, 0x9f, 0x1c, 0x16, 0x43, 0x5f, 0xfb, 0x49, 0x43, 0xe7,
	0x95, 0x5f, 0x8b, 0x94, 0x55, 0xbe, 0xf6, 0xd9, 0xca, 0x57, 0xcd, 0x6e, 0xae, 0xbc, 0xf8, 0x25,
	0x95, 0x1f, 0xc3, 0xfe, 0xaa, 0x37, 0x79, 0x16, 0xc5, 0xc1, 0x24, 0xf7, 0xee, 0x55, 0xf9, 0xbb,
	0xf7, 0xfc, 0x1f, 0x45, 0xa8, 0xdd, 0xd4, 0x72, 0x8c, 0x61, 0x47, 0x92, 0x65, 0xc3, 0xd6, 0x2d,
	0xa6, 0xea, 0xcc, 0x36, 0x09, 0xfa, 0x0a, 0xd7, 0xa1, 0x96, 0xc9, 0x34, 0x43, 0x52, 0x88, 0xc2,
	0xac, 0xb7, 0xaa, 0x4c, 0x50, 0x01, 0xef, 0xc1, 0x9d, 0x0c, 0xd1, 0x0d, 0x8b, 0x9d, 0x1a, 0xb6,
	0xae, 0xa0, 0x35, 0xfc, 0x10, 0x0e, 0x7a, 0xd4, 0x68, 0x53, 0xa9, 0xcb, 0xae, 0xc3, 0x45, 0xfc,
	0x08, 0xee, 0xab, 0xba, 0x69, 0x9f, 0x9e, 0xaa, 0xb2, 0x4a, 0x74, 0x8b, 0x9d, 0xda, 0xba, 0x62,
	0xb2, 0x53, 0x83, 0xb2, 0x53, 0x42, 0x50, 0x09, 0x1f, 0xc2, 0x3d, 0x55, 0x7f, 0x23, 0x69, 0xaa,
	0x32, 0x37, 0xcf, 0xc0, 0x75, 0x7c, 0x0f, 0xee, 0x2a, 0x76, 0x4f, 0x53, 0x65, 0xc9, 0x22, 0xcc,
	0x54, 0xdb, 0xba, 0x64, 0xd9, 0x94, 0xa0, 0x0d, 0x0e, 0xb4, 0x34, 0x43, 0x7e, 0xdd, 0x91, 0xcc,
	0x4e, 0x2e, 0x5c, 0x99, 0x27, 0xa9, 0xea, 0xa6, 0x45, 0x6d, 0xd9, 0x52, 0x0d, 0x9d, 0x11, 0x4a,
	0x0d, 0x8a, 0x36, 0xb9, 0xbe, 0x2c, 0x69, 0x1a, 0x93, 0x3b, 0x92, 0xaa, 0x33, 0xcb, 0x30, 0x98,
	0x42, 0x48, 0x0f, 0x55, 0x78, 0xf6, 0x5d, 0xd5, 0x34, 0x55, 0xbd, 0xbd, 0xf0, 0x3f, 0x4f, 0x00,
	0xf0, 0x01, 0xec, 0xad, 0x66, 0xa7, 0xea, 0x0a, 0x39, 0x43, 0x5b, 0x3c, 0x52, 0xce, 0x42, 0x52,
	0x35, 0x9e, 0xd9, 0x36, 0x7e, 0x02, 0x0f, 0x33, 0x8b, 0xac, 0x2d, 0xdc, 0x1d, 0x39, 0x23, 0xb2,
	0xcd, 0x53, 0x42, 0x55, 0x5c, 0x03, 0x64, 0x4a, 0xba, 0x6a, 0xa9, 0xef, 0x16, 0x86, 0x3b, 0x22,
	0x45, 0xcd, 0x36, 0x2d, 0x42, 0x59, 0x57, 0x52, 0x75, 0x8b, 0xe8, 0x92, 0x2e, 0x13, 0xb4, 0xfb,
	0xfc, 0x5f, 0x15, 0xa8, 0xdd, 0xc4, 0x1b, 0x7c, 0x07, 0xaa, 0x6d, 0xa2, 0x13, 0xaa, 0xca, 0x69,
	0x9d, 0x5f, 0x71, 0xd7, 0xf3, 0x7c, 0x69, 0xdb, 0xee, 0x12, 0xdd, 0x42, 0x05, 0xfc, 0x00, 0xea,
	0x99, 0x34, 0xdf, 0x1c, 0x45, 0xb2, 0x24, 0xb4, 0xc6, 0x27, 0xbe, 0x5a, 0xa3, 0x40, 0x8a, 0xf8,
	0x3e, 0xec, 0xe7, 0x25, 0xa2, 0x6f, 0x66, 0x57, 0xd2, 0x34, 0x54, 0xc2, 0xfb, 0x80, 0xaf, 0xcf,
	0x15, 0xad, 0x27, 0xde, 0x64, 0x83, 0x52, 0x22, 0x5b, 0xf3, 0x0e, 0xa8, 0x0a, 0xda, 0xe0, 0x4c,
	0xc8, 0x5a, 0x4d, 0xc9, 0xef, 0x6d, 0x95, 0x12, 0x25, 0x37, 0xd3, 0x32, 0x7e, 0x0c, 0x87, 0x59,
	0x34, 0x49, 0xa3, 0x44, 0x52, 0xce, 0x99, 0xca, 0xbb, 0x24, 0x69, 0xea, 0x3b, 0xa2, 0xa0, 0x4d,
	0x3e, 0x0c, 0x5b, 0xcf, 0x89, 0xb2, 0x74, 0x51, 0x85, 0x67, 0x6a, 0xeb, 0x2d, 0x49, 0xe3, 0x2d,
	0x5b, 0x2a, 0x12, 0x01, 0x6f, 0x6c, 0xd7, 0x50, 0xd4, 0x53, 0x95, 0x28, 0xf9, 0x84, 0xb6, 0x70,
	0x03, 0x1e, 0x91, 0x33, 0x8b, 0x50, 0x5d, 0xd2, 0xe6, 0x95, 0x6b, 0x52, 0xb7, 0x67, 0x50, 0x8b,
	0x99, 0x3d, 0xa2, 0x2b, 0x68, 0xfb, 0x46, 0x1d, 0xd1, 0x8b, 0xcc, 0x25, 0xaa, 0x72, 0x0a, 0xf3,
	0x74, 0x0d, 0x5d, 0x3b, 0x9f, 0xdb, 0xcb, 0x1d, 0x49, 0x6f, 0xf3, 0xb1, 0xde, 0x87, 0xfd, 0x39,
	0xb8, 0x6c, 0xb8, 0xcb, 0x0d, 0x17, 0xf4, 0x5e, 0xe6, 0x17, 0xe2, 0x69, 0x27, 0xa4, 0x91, 0x5a,
	0x1a, 0x59, 0x58, 0xdd, 0xe1, 0x00, 0xe5, 0x1d, 0x27, 0x3d, 0x43, 0xee, 0x2c, 0x00, 0xcc, 0xdd,
	0xf1, 0xab, 0x40, 0x74, 0xc3, 0x6e, 0x77, 0xe6, 0xfe, 0x5e, 0x93, 0x73, 0x13, 0xdd, 0xe5, 0x44,
	0x5f, 0xca, 0xdf, 0xe4, 0xec, 0x4b, 0xb2, 0x54, 0x50, 0x2d, 0x3f, 0x6a, 0xe1, 0x63, 0x1e, 0x19,
	0xed, 0xf1, 0xbe, 0x67, 0x58, 0xcb, 0xa0, 0xd4, 0x78, 0x2b, 0x58, 0x4b, 0x14, 0xb4, 0xcf, 0x67,
	0xba, 0x02, 0x19, 0xb6, 0x65, 0x5a, 0x92, 0xae, 0xa8, 0x7a, 0x1b, 0xdd, 0xe3, 0xb7, 0xe1, 0x7a,
	0x85, 0x86, 0x6d, 0x31, 0xe3, 0x94, 0x99, 0xe7, 0xba, 0x8c, 0xea, 0x18, 0x60, 0x43, 0xb6, 0x4d,
	0xcb, 0xe8, 0xa2, 0x03, 0xce, 0xe8, 0x8c, 0x8a, 0x09, 0xa3, 0xef, 0x73, 0xee, 0xe6, 0xda, 0xb0,
	0xdc, 0xc1, 0x43, 0x5e, 0x55, 0x0e, 0x5d, 0x69, 0xfe, 0x03, 0xfc, 0x0c, 0x1a, 0x39, 0x38, 0x5f,
	0x60, 0xd2, 0xc1, 0x33, 0xd2, 0xed, 0x59, 0xe8, 0x61, 0x42, 0x1f, 0xd3, 0xee, 0x71, 0xeb, 0x65,
	0x96, 0x3c, 0xc2, 0x3b, 0x00, 0x62, 0x75, 0x28, 0xa4, 0x67, 0x75, 0xd0, 0x63, 0x7c, 0x17, 0x76,
	0x33, 0x1a, 0x67, 0xfc, 0x3b, 0x4a, 0xa6, 0x4c, 0x74, 0x8b, 0x4a, 0xba, 0x7c, 0x2e, 0x02, 0x48,
	0x9a, 0x66, 0xbc, 0x25, 0x0a, 0x7a, 0xc2, 0x2b, 0xe8, 0x4a, 0x67, 0xcc, 0x24, 0x44, 0x61, 0x1a,
	0xd1, 0xdb, 0x56, 0x87, 0x91, 0x33, 0x99, 0x10, 0x85, 0x28, 0xa8, 0x91, 0x2f, 0x99, 0x6b, 0x98,
	0xe8, 0x6b, 0x1e, 0x21, 0x13, 0x51, 0xc2, 0xfd, 0xc8, 0xe8, 0x1b, 0xde, 0x49, 0xd9, 0xe8, 0xf6,
	0x6c, 0x4b, 0xe2, 0xb4, 0x96, 0x34, 0xd6, 0xb2, 0x95, 0x36, 0xb1, 0x16, 0xae, 0x9e, 0xf2, 0xab,
	0xd7, 0xa3, 0xea, 0x1b, 0x55, 0x23, 0x6d, 0xc2, 0x88, 0x29, 0x4b, 0x9a, 0xd0, 0x45, 0xcf, 0xf0,
	0x53, 0x78, 0x92, 0xd5, 0x44, 0xf4, 0x37, 0x2a, 0x35, 0x74, 0xbe, 0x19, 0x98, 0x49, 0x2c, 0xbb,
	0x37, 0x5f, 0x41, 0xdf, 0xf2, 0x69, 0xce, 0x77, 0x96, 0x98, 0x30, 0xb3, 0x0c, 0xc6, 0xa3, 0x6a,
	0xc4, 0x22, 0xe8, 0x38, 0xbf, 0xea, 0x97, 0x71, 0x55, 0x23, 0xe8, 0x3b, 0x5c, 0x85, 0x8a, 0xda,
	0xed, 0xa6, 0xb4, 0x79, 0xce, 0x79, 0xba, 0xd8, 0x04, 0x92, 0x6d, 0x75, 0x0c, 0xaa, 0x5a, 0xe7,
	0xe8, 0x45, 0x4b, 0x7e, 0x27, 0x0d, 0xbd, 0x78, 0x34, 0xbb, 0x68, 0xf6, 0x83, 0xc9, 0x89, 0x78,
	0x28, 0x7f, 0xe6, 0x05, 0xe9, 0x47, 0xfa, 0x2f, 0xd3, 0xf4, 0xe2, 0xe4, 0xc6, 0x7f, 0x9d, 0x7e,
	0x3d, 0xbd, 0x10, 0x9f, 0x17, 0x1b, 0xe2, 0x55, 0x7c, 0xf5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xbe, 0x1f, 0xc5, 0x8c, 0x9d, 0x12, 0x00, 0x00,
}
