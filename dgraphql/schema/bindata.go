// Code generated by go-bindata. DO NOT EDIT.
// sources:
// query.graphql (815B)
// query_alpha.graphql (14B)
// registered_token.graphql (208B)
// schema.graphql (59B)
// serum_fill.graphql (1.504kB)
// serum_market.graphql (110B)
// subscription.graphql (22B)
// subscription_alpha.graphql (21B)
// token.graphql (180B)

package schema

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xcd\x6e\xdb\x4c\x0c\xbc\xeb\x29\xc6\xba\x7c\x09\x10\x04\xf9\x80\xa2\x07\x5f\x03\x14\x6d\x0f\xfd\xb1\xd3\x53\xd1\xc3\x5a\x4b\x59\x84\xd7\x4b\x95\xa4\x6c\x08\x41\xde\xbd\x58\x09\x32\x10\x23\x45\x6f\x24\xc5\x99\xe1\x8c\xd6\xc7\x9e\xf0\x7d\x20\x1d\xf1\x5c\x55\x80\xcb\x81\xb2\xad\xf1\xf3\xa9\x14\x1b\xb2\x5e\xb2\xd1\xea\xd7\xea\xf2\xf1\x26\xc4\xa8\x64\xb6\xc6\xd6\x95\xf3\x7e\x75\xbb\xc6\xab\xe5\xb2\xa9\xb4\x67\x73\x52\x8a\x4f\x0b\xe1\xe6\xf5\xe8\x8a\xfa\x0a\xf0\x96\xc8\x5f\x08\x0a\xba\xae\xeb\x0d\xf9\xa0\x19\x29\x98\xe3\xff\x87\x07\xb4\x9c\x92\xa1\x15\x85\x77\x84\x3d\x9f\x28\xc3\x35\x44\xd2\xff\x0c\xfd\xb0\x4b\xdc\xe0\x40\xe3\x3d\x66\xa0\x81\x55\xe9\x44\x6a\xbc\x4b\x04\xc9\x69\x44\x0c\x1e\x60\x82\xc4\x27\x9a\x9b\x2c\x8e\x91\x1c\x7d\x50\x87\xb4\x08\xb0\x24\x0e\xef\x82\x83\x0d\x9c\x27\x31\x15\x71\x18\x39\xce\x9c\xd2\x84\xd9\x11\x74\x92\xa1\x88\x73\x47\x19\x4d\x48\x89\xe2\x7d\x5d\xd7\x15\x60\xa4\xc3\xf1\x03\xa7\xf4\x91\xcd\x45\xc7\x9b\xf9\xce\x8b\xf7\x3b\x1c\x83\x1e\xc8\x97\xc1\xed\x1a\xdb\x05\xf2\x28\x39\x53\xe3\x2c\x79\x55\xbd\x54\x55\x5d\xd7\x8f\x83\x9a\xa8\x41\xe9\xf7\xc0\x4a\x11\x2e\x68\x24\x3b\xe7\x81\x40\xec\x1d\x69\x89\xe5\x1c\x34\x42\x14\xbb\xd0\x1c\x4a\x6d\x68\x55\x8e\x08\x48\x6c\x93\xb7\x3e\xec\x39\x07\xa7\x08\x4a\x74\xa4\xec\x56\xae\x9d\xde\xcb\xb7\xb0\xa7\x4f\xb9\x95\xe7\x0a\x98\xc2\x6f\x26\xcd\x82\x2a\xfe\x5b\x56\xf3\x05\xb5\x0c\x0b\xed\x1d\x06\x23\xb0\x97\x93\x8c\x82\x36\xdd\x12\x99\xf4\xbd\x18\x3b\x21\xb2\xce\x76\xe6\x68\x00\xf3\xa0\x3e\x7b\xba\x04\x52\xbd\xad\x3b\xfd\xfb\x7f\xc8\x2e\x49\x2c\xf4\x94\xe3\x35\xf9\x4b\x55\x59\x13\x52\x50\xfc\xe0\xec\xef\xdf\x2d\xdd\xe7\xed\xd7\x2f\x7f\x02\x00\x00\xff\xff\x84\x0c\x85\x71\x2f\x03\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 815, mode: os.FileMode(0644), modTime: time.Unix(1608324834, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x26, 0x5f, 0x1c, 0xcf, 0x4c, 0x2c, 0x59, 0x3, 0xcc, 0xf2, 0xab, 0xd1, 0xf6, 0xdc, 0x54, 0xbb, 0xb3, 0x69, 0x49, 0x8e, 0xbe, 0x8c, 0xfd, 0x7, 0x3d, 0x6b, 0xa0, 0xd1, 0x42, 0x91, 0xbb, 0xfa}}
	return a, nil
}

var _query_alphaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2c\x4d\x2d\xaa\x54\xa8\xae\xe5\x02\x04\x00\x00\xff\xff\x76\xca\x60\x3d\x0e\x00\x00\x00")

func query_alphaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_query_alphaGraphql,
		"query_alpha.graphql",
	)
}

func query_alphaGraphql() (*asset, error) {
	bytes, err := query_alphaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query_alpha.graphql", size: 14, mode: os.FileMode(0644), modTime: time.Unix(1608153826, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x58, 0xf, 0x86, 0xb0, 0x43, 0x44, 0x23, 0x5f, 0x97, 0xd3, 0xde, 0x25, 0xbd, 0x4b, 0x29, 0x22, 0xad, 0x9b, 0x95, 0xef, 0x8, 0x81, 0x45, 0x11, 0x3a, 0x12, 0x62, 0xab, 0x4c, 0x93, 0xf8}}
	return a, nil
}

var _registered_tokenGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8b\x31\x0e\xc2\x30\x0c\x45\xf7\x9e\xc2\xdc\x01\x31\x74\x63\x64\x2d\x70\x80\x96\x7c\x82\x45\x62\x47\xb1\x2b\x14\x10\x77\x47\x30\x65\x60\x7c\xff\xbd\xef\xad\x80\x26\x44\x36\x47\x45\x38\xe9\x1d\x32\xc1\x8a\x8a\x81\x5e\x03\xd1\x1c\x42\x85\xd9\x48\x47\xaf\x2c\x71\x33\x10\x65\x16\xdf\xaf\x7e\xd3\xca\xde\x7a\x71\xad\xc0\x13\x7f\x95\xad\xa5\xa4\x36\xd2\x99\xc5\x77\xdb\xef\x12\x70\xe1\x3c\x27\x1b\xe9\x20\xfe\x4b\x5a\x5e\x34\xf5\x27\x99\x33\x7a\x4e\x1a\xb5\xe7\x07\x16\x63\xef\x92\xf7\xf0\x09\x00\x00\xff\xff\x65\x08\x1e\x7a\xd0\x00\x00\x00")

func registered_tokenGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_registered_tokenGraphql,
		"registered_token.graphql",
	)
}

func registered_tokenGraphql() (*asset, error) {
	bytes, err := registered_tokenGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registered_token.graphql", size: 208, mode: os.FileMode(0644), modTime: time.Unix(1608153758, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xad, 0xf8, 0x27, 0xfd, 0xab, 0x5a, 0x68, 0x60, 0x15, 0x89, 0x72, 0xbe, 0xcc, 0xcf, 0x4f, 0xcf, 0x8c, 0x4c, 0x3b, 0xe6, 0xcb, 0x89, 0x83, 0xe7, 0x3c, 0x5d, 0x1a, 0xf6, 0xe1, 0xec, 0xb5}}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x60\x81\xe2\xd2\xa4\xe2\xe4\xa2\xcc\x82\x92\xcc\xfc\x3c\x2b\x85\x60\x24\x1e\x57\x2d\x17\x20\x00\x00\xff\xff\x52\xd9\x58\xe5\x3b\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 59, mode: os.FileMode(0644), modTime: time.Unix(1608156028, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0xba, 0x8f, 0x74, 0x29, 0x4e, 0xaf, 0x41, 0x66, 0x2b, 0x4e, 0x31, 0x85, 0x84, 0x19, 0x59, 0x50, 0x81, 0xda, 0x72, 0x50, 0x56, 0xaf, 0xe3, 0xd8, 0xb7, 0x35, 0xbc, 0xd1, 0x85, 0xf3, 0xc6}}
	return a, nil
}

var _serum_fillGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\x4f\x73\xdb\x36\x10\xc5\xef\xfc\x14\x1b\x5e\x62\xcf\xb8\xd2\x4c\x9b\xe6\xc0\x9b\xf2\xa7\x1d\x8f\x6b\xb7\x09\x95\xc9\x21\x93\x03\x48\x3c\x92\xa8\x41\x80\x06\x16\x71\x35\x9d\x7e\xf7\x0e\x00\xca\x94\x14\x79\x72\x82\x04\xec\xfe\xf6\xbd\xc5\x82\x45\x59\x96\xdb\x01\xf4\xd6\x1a\x83\x96\x95\x35\xc4\xbb\x09\xd4\x59\x47\x82\x6a\xb8\x30\xfe\xa6\xb4\x5e\x51\x0d\x10\x0f\xa0\x2f\xbf\x3b\x31\x0d\x1f\xfe\xa0\xd6\x3a\x50\x6b\x4d\x8b\x89\xfd\xd7\x8b\x81\x79\xf2\xd5\x7a\x2d\x6d\xeb\x57\xb2\x0b\x1e\x2b\x65\xd7\x7d\x50\x12\x7e\x1d\x63\x7f\xda\xc7\xae\xfb\x48\x78\xd0\xeb\xcb\xb2\x2c\x8b\x54\xed\xa9\xce\x81\x8c\x7f\x0b\xa2\x72\x43\x5a\x79\x26\xdb\x11\x64\x0f\x4f\x6c\x97\xd8\xb2\xa0\xbc\x5b\xd1\x97\xa7\xcd\xf7\xb2\xc7\xd7\x17\x45\xcc\xbd\x36\x9d\x75\xa3\xc8\x9e\x2c\x09\x25\x69\x12\xbd\x32\x69\x27\x26\x4f\xa2\x47\x0c\xaa\xe8\xaf\xf9\xd7\x8b\xe2\xbf\x22\x76\xa4\xd8\x90\x57\xa6\xd7\x07\xca\x08\x1a\x23\x4c\xd2\x12\xfb\xd0\x2e\x4a\xa3\xc4\x55\xf1\xbd\x99\xa8\x25\xdb\x28\xcb\x0f\x01\x6e\x47\x6d\x70\xde\xba\x2b\x12\x5a\xdb\x47\x65\x7a\xda\xd9\x10\xb5\xb5\xd6\xb0\x32\x01\xd4\x81\xdb\x21\x1e\x38\xf8\xa0\xd9\x13\xbe\xc1\x90\xe8\x18\x8e\x94\x61\x38\x17\xa6\x54\xd3\x76\x31\xd7\x1d\xc8\xb8\xa2\x47\xc5\x83\x0d\x4c\xa3\xf2\x51\x3d\x09\x6a\x20\x78\x15\x85\xd1\x5c\xba\xa2\x9a\x9d\x32\x7d\xee\x50\xbe\xfa\xc5\xa2\x6d\xfe\x46\xbb\x4f\x30\x56\xa2\x5a\x0e\x53\x6b\x8e\xfd\xed\xbd\x45\x88\x75\x12\x8e\x82\x51\x0f\x01\xa4\x24\x0c\xab\x4e\xc1\xa5\x39\x7a\x1c\x54\x3b\x10\x0f\xca\x1f\xe4\x2a\x4f\x8d\x0d\x46\x12\xdb\xb9\x60\x42\x5c\xcb\x73\x12\xd9\x09\x09\xf7\xd2\xd3\x14\x1a\xad\x5a\xba\xc7\x2e\x91\x8f\x99\x57\xa4\x56\x58\xa5\xdb\xb1\x26\x4e\xab\x60\x6a\xc2\x8e\xac\x23\x0f\xad\x97\x8c\x51\xb8\x7b\xec\x7d\x66\xf6\xb9\xaa\x39\xec\x59\x0b\x2f\xfd\xec\xfa\x7b\x2b\x39\x73\xee\xde\x6d\xfa\x33\x73\x3f\x27\x90\x57\x12\x67\x1a\xd2\xc5\xd9\x80\xe2\x01\x8e\xde\x5c\xbf\xa3\x8b\x28\x1b\xee\x32\x3a\xd8\xd4\x37\x74\xd1\x84\x1d\xdc\xe5\x5c\x24\x42\x2a\xaa\x95\xc4\x76\x37\xe1\xa8\x5d\xf6\x1e\xe6\x94\xef\x59\x38\xf6\xd4\x39\x3b\xce\x80\x46\x78\x6c\x63\x68\x45\x69\xf9\x11\x01\x46\xfa\xc5\xe3\x43\xb0\xfc\x5c\xba\x09\x63\x03\x17\x87\x54\x5b\x3e\xc5\x74\x4a\x6b\xc8\x7c\x4d\xa9\x7f\x71\x6e\xaf\xc8\x61\x72\xf0\x30\xec\xd3\xd1\x04\xd7\xc2\xb0\xe8\xb1\x7f\x71\x39\xf8\x04\x26\x95\x9c\xf5\x68\xcb\x6f\x6d\x30\x5c\xd1\x27\x65\xf8\xf5\xab\xc3\x86\x4c\x4e\xb5\xa0\x29\x7e\x02\x9e\x86\x00\xff\x88\x96\x0f\xbe\x70\x99\x92\x22\xcf\x21\x72\x20\xb0\x8d\x53\xad\xf1\x0d\xfa\x84\xd7\x2d\x90\x2e\x87\x55\x47\x49\xe9\x01\xc1\x84\xf1\x18\x15\xdf\xd0\x9b\x4d\xfd\xbe\x20\xaa\x3f\xde\xfe\x9c\x97\x5f\xf2\xf2\x2a\x2f\xbf\xe6\xe5\x75\x41\x74\x5b\x7f\xbc\x5d\x38\xf3\xd5\x27\xc6\xa6\xbe\x89\xa4\xeb\x77\x05\xd1\xa7\xbb\x9b\xbb\x3f\x3f\xdf\xc5\xc0\xff\x03\x00\x00\xff\xff\x41\xf3\xa8\x4d\xe0\x05\x00\x00")

func serum_fillGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_fillGraphql,
		"serum_fill.graphql",
	)
}

func serum_fillGraphql() (*asset, error) {
	bytes, err := serum_fillGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_fill.graphql", size: 1504, mode: os.FileMode(0644), modTime: time.Unix(1610471296, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0x5, 0x2a, 0x82, 0xad, 0xdc, 0x66, 0x3c, 0xe1, 0x99, 0xcc, 0xed, 0x95, 0xb7, 0xbe, 0x4e, 0x9d, 0x74, 0xb8, 0x9e, 0xb9, 0xc6, 0x38, 0xad, 0xa, 0x32, 0x87, 0x2f, 0xb, 0x21, 0x16, 0x3a}}
	return a, nil
}

var _serum_marketGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x4e\x2d\x2a\xcd\xf5\x4d\x2c\xca\x4e\x2d\x51\x50\xa8\xe6\x52\x50\x48\x4c\x49\x29\x4a\x2d\x2e\xb6\x52\x08\x2e\x29\xca\xcc\x4b\x57\xe4\x52\x50\xc8\x4b\xcc\x4d\x45\xf0\xb9\x94\x15\x14\x14\xf4\xf5\x15\x0a\x32\x12\x8b\x53\x15\x8c\xc0\xdc\xe4\xfc\xcc\xbc\x90\xfc\xec\xd4\x3c\x05\x30\x09\x16\x2b\x48\x46\x16\xa9\x05\x04\x00\x00\xff\xff\x43\x18\x5c\x95\x6e\x00\x00\x00")

func serum_marketGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_marketGraphql,
		"serum_market.graphql",
	)
}

func serum_marketGraphql() (*asset, error) {
	bytes, err := serum_marketGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_market.graphql", size: 110, mode: os.FileMode(0644), modTime: time.Unix(1608237307, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x9f, 0xd3, 0x7, 0x2c, 0x57, 0x3c, 0xd4, 0x62, 0x3b, 0x83, 0xb4, 0xfc, 0x4b, 0x33, 0xe0, 0x26, 0x15, 0x4a, 0x7a, 0x5c, 0x6b, 0x7e, 0x97, 0x2e, 0x5, 0x41, 0xd3, 0x3a, 0x29, 0x57, 0x44}}
	return a, nil
}

var _subscriptionGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2e\x4d\x2a\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x53\xa8\xe6\xaa\xe5\x02\x04\x00\x00\xff\xff\xb3\xea\x92\x0b\x16\x00\x00\x00")

func subscriptionGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_subscriptionGraphql,
		"subscription.graphql",
	)
}

func subscriptionGraphql() (*asset, error) {
	bytes, err := subscriptionGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "subscription.graphql", size: 22, mode: os.FileMode(0644), modTime: time.Unix(1610471296, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0x25, 0x27, 0xb0, 0x18, 0x69, 0xe3, 0x4, 0x9b, 0xf1, 0xde, 0x8e, 0x2a, 0x53, 0x2, 0x7f, 0x4f, 0xab, 0xde, 0xf0, 0x5f, 0xf4, 0xc7, 0xdc, 0x65, 0x6f, 0x7c, 0x8c, 0x75, 0xa1, 0x4d, 0xc0}}
	return a, nil
}

var _subscription_alphaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2e\x4d\x2a\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x53\xa8\xae\xe5\x02\x04\x00\x00\xff\xff\x4d\xe9\x40\xe8\x15\x00\x00\x00")

func subscription_alphaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_subscription_alphaGraphql,
		"subscription_alpha.graphql",
	)
}

func subscription_alphaGraphql() (*asset, error) {
	bytes, err := subscription_alphaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "subscription_alpha.graphql", size: 21, mode: os.FileMode(0644), modTime: time.Unix(1608153609, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0x20, 0x13, 0xe7, 0x39, 0xf6, 0x4e, 0x44, 0x50, 0x61, 0x33, 0x62, 0x95, 0x35, 0x1d, 0x5c, 0x43, 0x43, 0xb0, 0xe4, 0xe2, 0xf9, 0xa2, 0x94, 0xdd, 0xcc, 0xad, 0x3b, 0x5d, 0x4d, 0xce, 0x16}}
	return a, nil
}

var _tokenGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x3b\xae\x02\x31\x10\x04\x73\x9f\xa2\xdf\x1d\x9e\x08\x9c\x11\x92\xf2\x39\x80\x85\x1b\x18\xb1\x1e\x5b\x9e\xd9\xc0\x20\xee\x8e\x36\x5a\x02\x08\xbb\x4b\x25\x95\x8f\x46\x1c\xeb\x9d\x8a\x67\x00\x52\xce\x9d\x66\x11\x07\xef\xa2\xd7\xbf\x00\x68\x2a\x5c\xf7\x2b\x84\x55\xd9\xd3\x5a\x55\xe3\x2f\xb5\x88\xfa\x76\xf6\x5b\xed\xe2\xe3\x13\x5c\x3a\xf9\xe0\x57\x64\x73\x6b\xd3\x88\x38\x89\xfa\xe6\x7f\x79\x32\xcf\x52\xd2\x64\x11\x3b\xf5\xa5\xe0\x1d\x00\x00\xff\xff\x26\x2a\xf1\x44\xb4\x00\x00\x00")

func tokenGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_tokenGraphql,
		"token.graphql",
	)
}

func tokenGraphql() (*asset, error) {
	bytes, err := tokenGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "token.graphql", size: 180, mode: os.FileMode(0644), modTime: time.Unix(1608237307, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0x2c, 0x9d, 0x30, 0xbf, 0x9f, 0xfb, 0x37, 0xc8, 0x67, 0xe1, 0x9e, 0xc6, 0xb, 0xc4, 0xa3, 0xd9, 0xb7, 0x8f, 0x7b, 0x43, 0xa4, 0xec, 0x19, 0x34, 0x6, 0x65, 0x6c, 0x22, 0xbb, 0x2c, 0x9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"query.graphql":              queryGraphql,
	"query_alpha.graphql":        query_alphaGraphql,
	"registered_token.graphql":   registered_tokenGraphql,
	"schema.graphql":             schemaGraphql,
	"serum_fill.graphql":         serum_fillGraphql,
	"serum_market.graphql":       serum_marketGraphql,
	"subscription.graphql":       subscriptionGraphql,
	"subscription_alpha.graphql": subscription_alphaGraphql,
	"token.graphql":              tokenGraphql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"query.graphql": {queryGraphql, map[string]*bintree{}},
	"query_alpha.graphql": {query_alphaGraphql, map[string]*bintree{}},
	"registered_token.graphql": {registered_tokenGraphql, map[string]*bintree{}},
	"schema.graphql": {schemaGraphql, map[string]*bintree{}},
	"serum_fill.graphql": {serum_fillGraphql, map[string]*bintree{}},
	"serum_market.graphql": {serum_marketGraphql, map[string]*bintree{}},
	"subscription.graphql": {subscriptionGraphql, map[string]*bintree{}},
	"subscription_alpha.graphql": {subscription_alphaGraphql, map[string]*bintree{}},
	"token.graphql": {tokenGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
