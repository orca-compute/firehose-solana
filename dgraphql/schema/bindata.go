// Code generated by go-bindata. DO NOT EDIT.
// sources:
// analytics.graphql (56B)
// query.graphql (1.049kB)
// query_alpha.graphql (14B)
// schema.graphql (28B)
// serum_fill.graphql (1.94kB)
// serum_market.graphql (1.276kB)
// serum_order.graphql (1.247kB)
// serum_order_tracker.graphql (1.949kB)
// token.graphql (780B)

package schema

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _analyticsGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x49\xcc\xcc\xa9\x0c\xcb\xcf\x29\xcd\x4d\x55\xa8\xe6\x52\x50\x50\x50\x48\x49\x2c\x49\xb5\x52\x08\xc9\xcc\x4d\x55\x04\xf3\xcb\x12\x73\x4a\x53\xad\x14\xdc\x72\xf2\x13\x4b\xcc\x4c\x14\xb9\x6a\x01\x01\x00\x00\xff\xff\x32\x54\xee\x0b\x38\x00\x00\x00")

func analyticsGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_analyticsGraphql,
		"analytics.graphql",
	)
}

func analyticsGraphql() (*asset, error) {
	bytes, err := analyticsGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "analytics.graphql", size: 56, mode: os.FileMode(0644), modTime: time.Unix(1614612938, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0xfe, 0x8b, 0x7a, 0x9e, 0x96, 0xf, 0xc8, 0x34, 0xc6, 0xf8, 0x4a, 0x35, 0x91, 0xfd, 0x44, 0x66, 0xb1, 0xc4, 0xb9, 0x67, 0x67, 0xae, 0x31, 0x5, 0xca, 0x38, 0x48, 0x29, 0xfe, 0x2c, 0xf5}}
	return a, nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x5d\x6f\xdb\x48\x0c\x7c\xf7\xaf\x98\xe8\xe5\x72\x80\x11\xe4\x80\xc3\x3d\xf8\xf1\xd2\x06\x6d\x81\xa6\x1f\x4e\x7f\x00\x2d\x51\x16\x91\xf5\xd2\x25\x29\xa7\x46\xd0\xff\x5e\xec\xaa\x4a\xdd\x20\x45\xde\x76\x57\x33\x1c\x72\x86\x8a\xe3\x9e\xf1\x69\x64\x3b\xe2\x61\xb1\x00\x42\xef\x38\xfb\x79\xab\x63\x8e\x15\xbe\x48\x8e\xff\xfe\x5d\xa2\x1d\xcd\xd5\x56\x58\x87\x49\xde\xfe\xbd\xc2\x6d\x81\x5d\x69\xce\xdc\x86\x68\x3e\x7b\xa4\x9e\x53\xd7\x19\xbb\xcf\xd8\xb3\x19\xfc\xba\xdb\x72\x85\x35\x4d\xf3\x99\x63\xb4\x8c\x44\x1e\xf8\xe7\xf2\x12\xbd\xa4\xe4\xe8\xd5\x10\x03\x63\x2b\x07\xce\x08\xa3\x8e\x6d\x89\x1d\xd9\x1d\xc7\x12\x6a\xd8\x68\x0c\x17\x98\xc8\x0e\x31\xe3\x03\x9b\xcb\x26\x31\x34\xa7\x23\x3a\x0a\x82\x2b\x92\x1c\x78\xba\x64\x0d\x1c\x39\xb0\x27\x0b\x68\x0f\x82\x27\x0d\xc4\x40\x01\x71\x48\xae\x82\xa6\x1a\x70\x0e\xdc\x4b\x4a\x95\xb3\x61\x58\x95\xe1\x0e\xf7\x03\x67\xb4\x94\x12\x77\x17\x4d\xd3\x2c\x00\x67\x1b\x77\xd7\x92\xd2\x1b\xf1\x50\x3b\x9e\x4f\xbd\xce\x23\xcf\x3d\x9f\xd8\xb5\x9e\x19\x4f\x2c\xab\x95\xde\x57\xf4\xcb\x9e\xaf\x7f\x81\x9f\x94\x79\xb4\xd4\xcb\x84\x7b\x6e\xa5\x97\x76\xc2\xff\xe5\x98\x28\x93\x21\x27\x03\x4c\xcf\xcf\xe5\x75\x22\x74\xb6\xf8\xbe\x58\x34\x4d\x73\x55\x9b\x71\x18\x7f\x1d\xc5\xb8\x43\x28\x5a\xcd\x21\x79\x64\xb0\xc4\xc0\x56\xf2\xbb\x27\xeb\x6a\x52\xd4\xde\x95\xb3\xa3\x37\xdd\x81\x90\xc4\x6b\x00\x7b\xda\x4a\xa6\xe0\x0e\x9c\x78\xc7\x39\xbc\x74\x54\x97\xf0\x23\x6d\xf9\x6d\xee\x15\x0f\x0b\xa0\xce\x34\x89\x16\x5a\x49\xa9\x17\xf3\x98\x69\xf3\x63\xa9\xbb\xc4\xe8\x0c\x89\xd2\x93\x33\x59\x3b\xcc\xc1\xea\x7e\xaf\x2e\xc1\xe8\xc4\x26\xbb\xa6\xf9\x01\x0f\xb2\xb8\xfa\xcd\xe1\xea\xe4\x33\xba\x75\x4b\x5f\x90\x9d\xad\x98\xcb\x73\xee\xfe\x54\xfc\x15\x07\xdb\x4e\x32\x3b\xa4\x16\x33\x2e\xab\x48\xc5\x1a\x06\x1d\x48\x12\x95\x8d\xa6\x3e\x78\xfa\x1f\x34\x97\x6d\xdc\x1b\x3b\xe7\xe2\xdc\xe6\x88\x18\xc4\x27\x82\xe4\x5e\x67\xd5\x81\xfc\x86\xbf\x45\x31\x72\x85\xff\x55\x13\x53\xae\x01\x7a\x4b\x89\xec\xe7\x66\xcd\xb7\x5b\xd9\xf1\x7c\xbe\x4e\x4a\x27\x9f\xde\xad\x3f\xdc\xfc\x08\x00\x00\xff\xff\x6a\x75\x09\x09\x19\x04\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 1049, mode: os.FileMode(0644), modTime: time.Unix(1614638964, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1f, 0x9b, 0xbf, 0x5e, 0xc7, 0x92, 0xf6, 0xfc, 0x18, 0xe6, 0x24, 0x4, 0x6d, 0xc9, 0x3, 0xd0, 0x8d, 0xe5, 0x98, 0xc, 0xc1, 0xe7, 0x6e, 0xf2, 0x43, 0xdb, 0x74, 0x1b, 0x98, 0xae, 0x37, 0x1b}}
	return a, nil
}

var _query_alphaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2c\x4d\x2d\xaa\x54\xa8\xae\xe5\x02\x04\x00\x00\xff\xff\x76\xca\x60\x3d\x0e\x00\x00\x00")

func query_alphaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_query_alphaGraphql,
		"query_alpha.graphql",
	)
}

func query_alphaGraphql() (*asset, error) {
	bytes, err := query_alphaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query_alpha.graphql", size: 14, mode: os.FileMode(0644), modTime: time.Unix(1608153826, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x58, 0xf, 0x86, 0xb0, 0x43, 0x44, 0x23, 0x5f, 0x97, 0xd3, 0xde, 0x25, 0xbd, 0x4b, 0x29, 0x22, 0xad, 0x9b, 0x95, 0xef, 0x8, 0x81, 0x45, 0x11, 0x3a, 0x12, 0x62, 0xab, 0x4c, 0x93, 0xf8}}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\x9e\xeb\xeb\x5e\x1c\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 28, mode: os.FileMode(0644), modTime: time.Unix(1611874630, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0x52, 0xf, 0x8c, 0x59, 0xcb, 0xec, 0xb1, 0xfd, 0x14, 0xda, 0xdd, 0x80, 0x73, 0x37, 0xba, 0xee, 0x84, 0xf, 0x5e, 0x4d, 0x73, 0x64, 0xe3, 0xb4, 0x18, 0xb7, 0x86, 0x6e, 0xc3, 0xc5, 0x70}}
	return a, nil
}

var _serum_fillGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xcd\x6e\xdc\x36\x10\xbe\xeb\x29\xc6\xba\xc4\x06\xdc\x5d\xa0\x4d\x73\xd0\x6d\xd3\xa4\x85\xe1\xda\x4d\xac\x0d\x72\x08\x72\xe0\x52\x23\x69\x6a\x8a\x94\xf9\xb3\x1b\xa1\xe8\xbb\x17\x43\x4a\x96\xd6\xf5\x1a\x3e\x71\x25\xf1\xfb\x99\x8f\xc3\xd9\x2c\xcf\xf3\x6d\x8b\xf0\x9b\xd1\x1a\xa5\x27\xa3\xc1\x0f\x3d\x42\x6d\x2c\x08\x28\xd1\x86\xee\x77\x52\x6a\x05\x25\x22\xf8\x16\xe1\xdb\x1f\x56\xf4\xed\xe7\x3f\x41\x1a\x8b\x20\x8d\x96\xd8\x7b\xf7\xfd\xbc\xf5\xbe\x77\xc5\x7a\x5d\x19\xe9\x56\xce\x5b\x14\x1d\xe9\xa6\x16\xce\xaf\xc8\xac\x9b\x40\x15\xba\x35\x63\x7e\x9a\x30\xeb\x86\x99\x1e\xd4\xfa\x22\xcf\xf3\x2c\xaa\x3e\xea\x2d\xec\xfc\x93\x01\xe4\x1b\x50\xe4\x3c\x98\x1a\xb0\x6a\xd0\x81\x37\xf3\xde\x3c\x83\xf4\xb6\x80\x6f\x8f\x2f\x3f\x56\x0d\x9e\x7d\x3f\xcb\x18\x7c\xa5\x6b\x63\x3b\x91\x8a\x33\x20\xa8\x82\x5e\x34\xa4\xe3\x1b\x46\xf7\xa2\x41\xde\x54\xc0\xa7\xf1\xd7\x59\xf6\x6f\xc6\xd1\x64\x1b\x70\xa4\x1b\xb5\xb0\x06\xa8\xb0\x43\x1d\xcd\x70\x20\x72\xb6\xca\x1e\x57\xd9\xff\xab\x61\x33\xa9\x8e\x3c\xff\x1c\xd0\x0e\x20\x83\x75\xc6\x5e\x82\x50\xca\x1c\x48\x37\x30\x98\xc0\xde\xa4\xd1\x9e\x74\x40\xa8\xd1\xcb\x96\x3f\x58\x74\x41\x79\x07\xb8\x47\x0d\xa2\xf6\x68\x81\xb4\x47\x6b\x43\x1f\x35\x4d\xcd\x58\xbb\xb0\x71\x09\x07\xf2\xad\x09\x1e\x3a\x72\xec\x1e\x04\xec\x50\xf8\x15\x1b\x83\x51\xba\x80\xd2\x5b\xd2\x4d\x4a\x28\xf5\xc0\x5c\xa2\xd9\xfd\x8d\x72\x02\x68\x53\x61\x31\x7f\x8c\xd1\x1c\xd7\x37\xd5\xc6\x24\x3b\x65\xe4\x3d\xe8\xd0\xed\xa2\x53\x38\xb4\x24\xdb\x18\xd4\x82\x5e\xca\x60\x2d\x56\xa3\x40\x84\xdc\x86\xae\x80\x2f\xa4\xfd\xbb\xb7\x4b\x4f\xde\x0a\xed\x44\xac\xeb\x8d\x03\xd2\x15\xfe\x88\xe5\x91\x8e\x9c\x49\xed\xd0\xa2\xc5\x97\x35\x16\x3c\x57\x4c\xf2\x9c\x16\x69\xe7\x6d\x38\xa9\xb5\xa0\x78\x8d\xe2\x82\xed\xa4\xa2\xb1\x15\xda\x29\xac\xa0\xe9\x21\x20\x50\x85\xda\x53\x4d\x68\x27\x71\x01\x0d\xf1\xe9\x77\xc2\xde\xe3\x74\x2a\x11\x7a\x2a\x34\xea\xd0\x79\xd1\xf5\x53\x8f\xa6\x98\x16\xa7\x41\xee\x85\xa8\x26\x74\x01\x5b\xea\xf0\xc9\x69\x54\x68\xdf\x38\xe8\xc3\x4e\x91\x84\x7b\x1c\xe2\xa4\x38\x26\xbc\x04\x5a\xe1\x2a\x0a\x1b\xcd\x29\x09\x0f\xbb\x30\x80\xb1\xe0\x50\xa9\x19\x71\x54\x50\xe2\x7e\xae\x2f\xd3\xb6\x08\x7b\x65\x09\x09\x31\x36\xed\x4d\x7c\x98\x08\xbf\x46\xb8\xa3\x0a\x9f\x72\x90\x63\x89\x4b\x40\xf2\x2d\x5a\x78\x7f\xf5\x01\xce\xd9\x2f\xda\x0b\xb6\xbe\x29\xaf\xe1\x7c\x17\x06\xb4\x17\xa3\x0a\x93\x14\x50\x52\x85\xdb\xa1\x3f\xca\xe9\x21\x08\xed\xc9\x0f\x31\x7f\x73\x8f\x3a\x85\x70\x10\x0e\x2c\x4a\xa4\x3d\x56\x30\x76\xd5\x3c\xc6\x22\xe7\x84\xbc\x1b\xb7\x15\xb0\x65\xfc\xa6\x33\x41\xfb\x57\x4a\xf4\x3c\xe1\xf8\xfe\xbf\x2c\xf1\x49\xd0\x69\xfa\xde\x92\xc4\xc4\xf4\x78\x5c\xf8\x43\x48\xbf\xfc\x4f\xe0\x8d\x15\x6a\xd3\x91\x4c\xd3\x95\x1c\x08\x75\x10\x03\xdf\x1e\x38\xdf\x09\x87\xa3\xb7\x35\x3c\x04\xe3\xc7\xa7\x8b\xe4\x23\x4a\x9c\x9e\x43\x88\x5b\xbe\x03\x0a\xf7\xa8\x9e\x18\xa9\x59\x3d\x91\xd4\x69\x5b\x71\x04\x9a\x47\xd4\xa2\x3a\x88\x53\x6a\x2f\x54\xc0\xf9\xce\x00\x54\xe4\x7a\x25\x86\xc9\x07\x37\x22\x63\xc6\x60\x98\x08\x75\xe8\x8e\x3d\x31\xd1\xfb\x4d\xf9\x31\x03\x28\xef\x6e\x7e\x4e\xcb\x2f\x69\x79\x9b\x96\x5f\xd3\xf2\x2e\x03\xb8\x29\xef\x6e\x66\x9e\xb1\x5b\x22\xc7\xa6\xbc\x66\xa6\xab\x0f\x19\xc0\x97\xdb\xeb\xdb\xbf\xbe\xde\xf2\xc6\xff\x02\x00\x00\xff\xff\xf2\xcc\xc6\x35\x94\x07\x00\x00")

func serum_fillGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_fillGraphql,
		"serum_fill.graphql",
	)
}

func serum_fillGraphql() (*asset, error) {
	bytes, err := serum_fillGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_fill.graphql", size: 1940, mode: os.FileMode(0644), modTime: time.Unix(1635534465, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0x28, 0xa0, 0xdd, 0x6b, 0x29, 0x59, 0x9f, 0x65, 0x43, 0xc2, 0x50, 0x84, 0xd6, 0x78, 0x9c, 0x13, 0xc6, 0xcf, 0xc6, 0x92, 0x1d, 0x8e, 0xff, 0x8, 0x6b, 0x35, 0x2, 0x92, 0x55, 0xd9, 0x3f}}
	return a, nil
}

var _serum_marketGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x41\x4f\xdb\x40\x10\x85\xef\xfe\x15\x0f\x5f\x00\x09\x12\x04\x51\x91\x7c\x43\xa4\xb4\x95\x5a\xa9\x28\xd0\x0b\xe2\xb0\xd8\x63\x7b\xcb\x7a\xc7\xec\xce\x12\x59\x15\xff\xbd\x5a\xdb\x01\x43\xa8\x5a\xa9\xa7\x64\x67\xe7\xbd\x6f\xe6\xc5\x71\x9a\xa6\x57\x35\xe1\x9c\xad\xa5\x5c\x34\x5b\x48\xd7\x12\x4a\x76\x50\x58\x91\x0b\xcd\x37\xe5\xee\x49\x66\x58\x11\x41\x6a\xc2\xcd\x27\xa7\xda\xfa\xf2\x2b\x72\x76\x84\x9c\x6d\x4e\xad\xf8\xdb\xbd\x5a\xa4\xf5\xd9\x7c\x5e\x70\xee\x67\x5e\x1c\xa9\x46\xdb\xaa\x54\x5e\x66\x9a\xe7\x55\xd0\x05\xf9\x79\xd4\x1c\x6e\x34\xf3\x2a\x3a\x3d\x98\xf9\x7e\x9a\xa6\x49\xcf\x9d\x10\x27\x23\xfd\x4a\x80\x34\x4d\xcf\x60\xb4\x17\x70\x09\x2a\x2a\xf2\x10\x1e\xfa\x2f\xb4\x31\xd1\x01\x43\x3d\xc3\xcd\xc4\xe6\x63\x51\xd1\xce\xed\x4e\x32\x58\x7c\xb1\x25\xbb\x46\x0d\x8b\x32\x94\x2e\xd0\xaa\x4a\xdb\xbe\x32\x78\xb4\xaa\xa2\xd8\x96\xe1\xfb\xf8\x6d\x23\xbe\x62\x51\x06\x39\x07\xdb\x0f\xd1\xf4\xfe\x90\x5a\x09\xd6\x31\x89\x60\x0a\x38\x92\xe0\x46\x27\x89\xfd\xe7\xb1\x3d\xc3\xb5\xb6\xf2\x61\xb1\x93\x3c\x25\x49\xbc\x3c\x83\xd7\xb6\x32\xaf\x16\x8e\x93\x82\x0c\x35\x34\xf8\xc7\xb0\xf3\x97\x10\xe2\xee\xb3\xe4\xbd\xa4\x7a\xe1\x98\xd1\x65\x20\xd7\x21\x0f\xce\xb3\x3b\x80\x32\x86\xd7\xda\x56\xe8\x38\xc4\x7d\x73\xb6\xa2\x6d\x20\x94\x24\x79\x1d\x2f\x1c\xf9\x60\xc4\x83\x1e\xc9\x42\x95\x42\x0e\xda\x0a\x39\x17\xda\x9e\xca\x65\xd4\xba\xc9\x20\x07\x58\x6b\xa9\x39\x08\x1a\xed\xe3\x16\x50\xb8\x23\x25\xb3\x61\xe9\x01\x9d\x61\x25\x4e\xdb\xea\x39\xba\xfa\xd5\xc4\xe0\xbb\x9f\x94\x6f\x24\x96\x0b\xca\xa6\xd7\x7d\x4c\x6f\xb7\xc4\x66\xc5\xe8\x35\x64\xbf\xeb\xa1\x8a\xc2\x91\xf7\xa3\xd3\x78\x7a\x8f\xfe\xac\x28\xb4\x6f\x8d\xea\x60\x55\x43\x23\x5f\x35\xb4\x91\x6c\x29\x3c\xee\x94\x27\x08\xdf\x93\x1d\x29\xb1\x70\x15\xcf\x19\xfa\x8f\x6d\x8c\xc7\x43\x60\x79\xad\xea\x2b\x7f\x92\x5d\xaf\x96\x78\x64\x13\x1a\xc2\xa3\x32\x61\xf8\x03\xc6\x07\xc0\x28\x2f\x38\x5e\xa0\xe6\xe0\x3c\xf6\x76\x2d\xaf\x77\x71\x88\xe3\x45\x1d\x7f\x4f\xcb\xeb\xfd\xd1\x3e\x36\x1e\x2f\x3e\xc7\xb6\x1f\xbd\xd1\xf5\x6a\x99\xe1\xc2\xb0\xea\x9f\xbb\x7f\x45\x9d\xa2\x50\xdd\x04\x34\x9e\xb7\x59\xa7\x4b\xd5\xfd\x17\xe9\xe4\xe8\x0d\x6a\x53\xd8\x66\x9d\x1c\xfd\x1d\x56\x28\x6d\x3a\x14\x4a\xd4\x28\xec\x0b\x13\xcd\xcd\xf2\xa5\x10\x5f\x08\x4f\xc9\xef\x00\x00\x00\xff\xff\xb0\x7c\xad\x71\xfc\x04\x00\x00")

func serum_marketGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_marketGraphql,
		"serum_market.graphql",
	)
}

func serum_marketGraphql() (*asset, error) {
	bytes, err := serum_marketGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_market.graphql", size: 1276, mode: os.FileMode(0644), modTime: time.Unix(1629943087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0xdc, 0x2e, 0xbe, 0x6b, 0xbf, 0x95, 0xbb, 0xf6, 0x62, 0x2a, 0x41, 0xe8, 0xee, 0xf, 0xfd, 0x18, 0xf5, 0x9f, 0xb1, 0x6d, 0x1d, 0xf7, 0xa9, 0x68, 0x45, 0x49, 0x31, 0xbe, 0xf8, 0x30, 0x80}}
	return a, nil
}

var _serum_orderGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xcb\x6a\xdb\x40\x14\x86\xf7\x7a\x8a\x3f\xda\x24\x81\xe0\x6e\x4a\x17\xda\xb9\x89\x4b\x45\xe3\x38\xc4\x2a\x25\x94\x62\x46\x9a\xe3\xea\x60\x69\x46\x99\x0b\xae\x28\x79\xf7\x32\xa3\xb8\x56\x1a\x85\x16\xba\x94\x35\xff\xf7\xcd\xb9\x58\x89\xeb\x3b\xc2\x9a\x8c\x6f\x57\x46\x92\xc1\xcf\x04\x48\xd3\xb4\xa8\x09\x3a\xfe\xa0\x7c\x5b\x92\x81\x57\xfc\xe0\x09\x2c\x49\x39\xde\x32\x99\x34\x4d\x13\x84\xb7\x19\x3e\xb3\x72\xef\xde\x9e\x24\xc7\xa8\x6d\xb4\x3b\x24\x59\x61\x5f\x73\x55\xc3\xd5\xcf\x4c\xba\xaa\xbc\x31\x24\x67\x03\x29\x44\x6e\xa6\x69\xce\x08\x65\x45\xe5\x58\xab\x53\x8b\x5a\xd8\x1a\x7b\x76\x35\xab\x88\x8c\xae\x7d\x4d\x86\xfe\x62\x18\x61\x3e\x0a\x5b\x67\x58\x3b\xc3\xea\xfb\xeb\x26\x56\x92\x7e\xfc\xaf\x2a\x0f\x90\xa9\xaa\x58\x59\x67\xfc\xab\xae\x11\xe2\x9f\x94\x23\xdc\xab\x4a\xc7\x2d\x59\x27\xda\x0e\x7a\x1b\x71\x65\xa3\xab\xdd\x78\x42\x6c\x07\xc5\x07\x6e\x9a\x17\x45\x1d\xd2\x19\x0a\x6e\xe9\x8f\xbe\x49\x32\xa7\x16\x9d\x2f\x1b\xae\xb0\xa3\x1e\x5b\x6d\x46\xc0\x78\xe7\x0b\xf0\x8c\x66\xd1\xac\x55\x28\x48\x38\x94\xbe\x87\x36\xb0\xd4\x34\xc7\x48\x2b\xcc\x8e\xdc\xb1\x99\x92\xcc\xd4\xb8\x86\x63\x31\x36\x51\xc3\x64\x9b\x86\x48\x36\x9c\x58\xc6\x87\x03\xf1\x4b\xcc\x5b\x96\xf4\x02\xc2\x36\x48\x2e\x40\xec\x6a\x32\x78\x9f\x5f\xe1\x2c\xdc\x98\xcc\x79\xb8\xfc\x7c\xfd\x09\x67\xa5\xef\xc9\x9c\x1f\xb6\x99\x25\x65\x58\xb3\xa4\xa2\xef\x9e\xb5\xaa\x33\x5c\x11\x6c\x47\x55\xf8\x1b\x49\x3c\x8d\xfb\x28\x9b\x21\x1c\x93\xa4\x74\xcb\x95\x88\xf3\x67\x0b\xd1\xec\x45\x1f\xd6\x04\x67\xa5\xb0\x04\xa7\x77\xa4\xf0\x06\x0f\x5e\xbb\xa7\xa7\xf3\x41\x1d\x05\x53\xdd\x92\x64\xd9\x90\xc4\x83\x17\xca\xb1\xeb\x5f\xaa\x07\xc0\xe1\x7d\x86\x22\x60\xe7\xad\xf6\xca\x8d\x41\xa3\xc6\x84\xcf\xc7\xd3\x94\xfa\x8e\x32\xac\xee\xae\x16\x77\x9b\xe2\xfe\x76\x31\x0e\x6c\xb9\x69\x2c\x84\xb5\xba\x62\xe1\x48\xc2\xe9\x61\x09\x8e\xd2\x78\x24\xc3\xd7\xdf\xdb\x77\xf2\xed\x24\x79\x4c\x12\x52\xbe\x1d\x51\xe3\xf7\xe9\x3a\x5f\xe6\x45\x02\xe4\xcb\xe5\xe2\x2a\x9f\x17\x8b\xcd\xea\x6e\x73\x39\xbf\xb9\x5c\x5c\x27\xc0\xed\x6a\x5d\x6c\x56\x37\xd7\xf7\xc9\x63\xf2\x2b\x00\x00\xff\xff\x68\xe1\x2d\x12\xdf\x04\x00\x00")

func serum_orderGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_orderGraphql,
		"serum_order.graphql",
	)
}

func serum_orderGraphql() (*asset, error) {
	bytes, err := serum_orderGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_order.graphql", size: 1247, mode: os.FileMode(0644), modTime: time.Unix(1614613053, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0x27, 0xa0, 0xe2, 0x2a, 0xa4, 0x62, 0x76, 0x44, 0x6, 0xaa, 0x31, 0x85, 0x21, 0x74, 0x90, 0x56, 0x78, 0x33, 0xa6, 0x8d, 0x4f, 0x45, 0xe3, 0x6c, 0x31, 0x7e, 0x39, 0x61, 0x1e, 0xf7, 0xc3}}
	return a, nil
}

var _serum_order_trackerGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xcb\x6e\xeb\x36\x10\xdd\xfb\x2b\x26\xea\xa2\x9b\xdb\xbb\x2a\xba\x30\x50\x14\x82\xa3\xa0\x42\x53\xd9\xb0\x95\xf6\xee\x1a\x5a\x1c\x5b\x83\x48\x43\x87\x1c\xc6\x31\xd2\xfe\x7b\x41\xbd\xed\xc4\xed\x26\x5e\x99\x33\xc3\x73\x0e\xe7\xa5\xd9\x0c\xd9\xd7\xb0\x5c\xdf\x26\xeb\xbf\x36\x79\x9c\x27\xf0\x36\x03\x00\x78\xc8\x7e\xcb\x96\x7f\x66\xb3\xe6\x10\x45\x11\xa4\xac\xa9\x50\x82\x0e\x8e\x25\x32\x48\x89\x60\xac\x46\x0b\xa5\x72\xb0\x45\x64\x88\x8b\x02\x0f\x82\x1a\xb6\xa7\xc6\x8d\xaf\x45\xa9\x78\x8f\x51\x14\x35\x28\xf1\x6a\xb5\x5e\xfe\x91\xdc\x8e\x98\x31\x77\x18\xe4\x80\x02\x26\x39\x70\xa2\xc4\x77\x24\x24\x23\x7a\x61\xea\x43\x85\x82\xd5\x09\x0a\xc5\x05\x56\x15\x6a\x50\xac\x27\x4a\xc8\x01\x1b\xa8\x0c\xef\xd1\x82\x39\x20\xf7\xcc\x8b\x38\x5b\x24\xf7\xf7\x13\xea\x18\x0e\xca\x0a\xa9\x0a\x9e\xbd\x62\x21\x39\x8d\x4c\xf8\x8a\x85\x17\xd4\x5f\x60\xeb\x25\xc0\x5b\x04\x65\x11\x9c\x50\x55\x81\x2b\x95\x45\xd7\xc0\x83\x94\x4a\x1a\xd7\x51\x91\x10\xef\x41\x0c\x6c\x11\x76\xd4\x88\x1b\xbc\xca\x39\x53\x90\x0a\xa9\x39\x92\x94\xa3\xe2\xaf\xbd\xc0\x55\xbc\xce\xd3\xf8\x7e\x90\x97\x87\xf4\xb1\x90\xc5\x51\x9f\xd9\x81\xe2\xcb\x9c\x4f\xb2\xd2\xb2\xf6\x88\xc9\xb7\x64\xf1\x90\x27\xb7\xb3\x7f\x66\x33\x39\x1d\x10\x36\x68\x7d\xbd\x0c\xb7\x37\xa2\x04\xbb\x32\x77\x5c\x2d\x2a\xfb\x7a\x8b\x16\x3c\xd3\xb3\x47\x20\x1d\x14\xec\x08\x6d\x8f\xc9\xbe\x9e\xc3\x03\xb1\xfc\xf4\xe3\xcd\x20\xf5\x60\xf1\x85\x8c\x77\x2d\x2a\xb9\xe6\x75\xbd\x31\x88\x0e\xe7\x91\x7c\x78\xf2\xd9\xbd\xf9\xb4\x03\x47\xec\xc2\x5b\x8b\x2c\x67\xd0\x9d\x0d\x9e\xd8\x1c\xb9\xe9\x16\xfc\x0f\x96\x29\xc2\x15\x12\xb1\x8a\x1d\x09\x19\xce\x54\xfd\x8e\x66\xf4\xf6\x2c\x8d\x45\x15\xc1\x34\xd0\x9c\x63\xf4\x44\xf9\x3a\xce\x36\x69\x9e\x2e\xb3\x8e\x6d\x0c\x9b\x43\xa3\x33\x1f\x0c\x37\xa1\x50\x9e\x03\xcf\x85\x07\x7e\xbe\xb4\xa4\x4c\x02\x7f\x5f\x5a\x87\xf1\x7b\xe7\x59\x0c\xf3\xf2\xce\xb5\x6a\xa7\xa0\x3a\xdd\xd1\xc7\x01\x49\x37\x0c\x5d\x17\x7d\xa4\xa4\xed\xa4\xef\xe0\x2e\xfd\xf6\x7b\x02\x9b\xd2\xf8\x6a\x3a\x95\x3b\xc2\x4a\x87\xb1\xb0\xf8\xec\xc9\xa2\xfe\x05\x92\x97\x30\xdc\x1c\xfa\x99\x02\x42\x8d\xce\xa9\x3d\x7e\x81\x14\xb4\xe1\xef\x05\x1c\x22\x94\xe6\x08\x47\x84\xa2\x81\x8b\xd8\x48\x04\xa5\x7a\xc1\xb6\x3a\xc6\x5a\x74\x07\xc3\x9a\x78\xdf\xd1\xb7\xbf\x76\xae\x7a\x15\x5b\x04\x6d\xfc\xb6\xc2\x1f\x8a\x12\x8b\xa7\x71\x63\x30\xb4\xbb\x49\x7f\xed\xdb\xe0\xb1\xb9\xf9\xd8\xd7\x7f\xec\x25\xd0\x28\x8a\x2a\x37\x14\xbb\x09\x9c\x4f\x22\x86\x19\xbb\x56\x91\xb7\x4f\x20\xb9\xb9\xc6\x32\x56\xb7\xa5\x19\xb6\xe3\xa6\x32\x92\x4d\x47\xf6\xcc\x9b\x8f\x6d\xfc\xab\x72\xe5\x1c\x36\x62\x89\xf7\xd7\xa3\x52\xd6\xf8\x7a\x05\x2c\x65\x27\xd6\xff\x6f\x58\x2c\x73\xc8\xa9\xc6\xab\x6f\xb9\x6c\xc7\x21\x71\x19\x1e\x9b\x05\xd7\x2e\xd5\x7e\xeb\x4d\xda\xac\xcf\x9b\xd2\x1a\x75\xb8\xdd\xe5\x2e\xfc\xbd\x4a\xd7\x37\xf7\xe7\x15\x68\xf2\x35\x1d\xa7\xbf\x83\x8f\x17\x8b\x64\x15\x56\xf2\xf9\x27\x29\x9c\xee\xd2\xe1\xef\x64\x71\xff\x1b\x00\x00\xff\xff\xbb\xe8\x84\x2c\x9d\x07\x00\x00")

func serum_order_trackerGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_order_trackerGraphql,
		"serum_order_tracker.graphql",
	)
}

func serum_order_trackerGraphql() (*asset, error) {
	bytes, err := serum_order_trackerGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_order_tracker.graphql", size: 1949, mode: os.FileMode(0644), modTime: time.Unix(1614613044, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0x64, 0xa5, 0xec, 0xa4, 0x52, 0xcb, 0x11, 0x43, 0x21, 0xfe, 0xd1, 0xcc, 0x3e, 0x62, 0x89, 0xe6, 0xd, 0xa1, 0xb, 0xc, 0x25, 0x88, 0xfb, 0x91, 0xaf, 0x35, 0x89, 0x43, 0x42, 0x7, 0x19}}
	return a, nil
}

var _tokenGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6f\xd4\x3e\x10\xc5\xef\xfe\x14\xaf\x39\xfd\xff\x52\xd9\x5c\x10\x87\xdc\x0a\x42\xa8\x12\x48\x54\x2d\xa7\xaa\x07\xaf\x33\x71\x0c\xce\x4c\xb0\x27\x5d\x05\xd4\xef\x8e\xec\xec\xb2\x5b\x89\x5b\x32\x33\x6f\xde\x6f\x9e\x8d\x69\x9a\xe6\x61\x24\x7c\x10\x66\x72\x1a\x84\xa1\xeb\x4c\x18\x24\xc1\xe2\x41\x7e\x10\xef\x70\x4f\x04\x1d\x09\x8f\x9f\x92\x9d\xc7\xbb\xcf\x70\x92\x08\x4e\xd8\xd1\xac\xf9\xe9\xbf\x51\x75\xce\x5d\xdb\xf6\xe2\xf2\x2e\x6b\x22\x3b\x05\xf6\x83\xcd\xba\x0b\xd2\xfa\x25\xf4\x94\xdb\xa2\x79\x73\xd2\xb4\xbe\x6c\xfa\x19\xdb\xff\x9b\xa6\x31\xd5\xb1\x7a\x5d\x60\xfc\x36\x40\x73\x83\x18\xb2\x42\x06\x50\xef\x29\x43\x65\x9b\x43\x63\xb0\x95\x3a\x3c\xd6\xca\xc7\xde\xd3\xd5\xd3\x95\x29\xaa\x5b\x1e\x24\x4d\x76\xbb\x46\x60\x43\x8f\xd9\xfa\xc0\xb5\x52\x94\xb3\xf5\x54\x86\x3a\x7c\x3d\x7e\x5d\x99\x97\x9a\x85\xb9\x41\x0e\xec\xe3\x91\x07\x14\x69\x22\xae\x04\x25\x01\x77\xe6\x2b\x60\x3b\xf3\x1a\xbf\x40\x6c\xe0\x4d\x73\xb7\x50\x5a\xe1\x96\x94\x25\x5d\xc3\xc6\x28\x87\xc0\x1e\xab\x2c\x85\xc9\x09\x6b\xe0\x85\x30\x90\xba\xb1\x34\x12\xe5\x25\x6a\x06\x3d\x13\xc3\x0e\x4a\x09\x81\x95\x52\x5a\xe6\xea\x27\x43\xd1\xa6\x0b\x84\x6b\x1c\x82\x8e\xb2\x28\xa6\x90\x0b\x35\x2c\xf6\x64\x75\x57\xa0\x70\xb4\xee\x70\xaf\x29\xb0\xdf\x92\xd9\x1e\x7b\x3b\x4d\xf6\xdf\xc9\x9d\x86\x59\x7a\xea\xb6\x46\x8d\xe2\x7c\x53\xbd\xc7\xf6\x7d\xa2\x9c\xcf\xcb\x80\x29\xb0\xde\x2c\x3a\x4a\x0a\xba\x9e\x1a\x06\x18\x12\xd1\x2f\xfa\x57\x27\x2f\xf3\x1c\xd7\x0e\xdf\x02\xeb\xbb\xb7\x06\xe8\xc9\x85\xc9\xc6\xdc\xe1\x96\xd5\x00\xcf\x94\xc2\x10\xa8\xef\xf0\x5e\x24\x92\xe5\xea\x43\x6a\x8f\x64\x5f\x48\xed\x6b\xb8\x52\xa9\x80\x79\x9d\xf6\x12\x2f\xf9\xd8\x4e\x74\xf9\x1f\xc5\xcb\x05\xcc\x81\xf6\x39\xe8\xdf\x09\xf3\x62\xfe\x04\x00\x00\xff\xff\xc6\xc4\x01\x1e\x0c\x03\x00\x00")

func tokenGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_tokenGraphql,
		"token.graphql",
	)
}

func tokenGraphql() (*asset, error) {
	bytes, err := tokenGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "token.graphql", size: 780, mode: os.FileMode(0644), modTime: time.Unix(1629943087, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5c, 0x58, 0xad, 0x64, 0xc7, 0xac, 0x1c, 0xad, 0x7f, 0xe3, 0x2a, 0x5c, 0xf7, 0x5e, 0xf, 0x98, 0xd7, 0x4b, 0x84, 0x57, 0x71, 0xec, 0x9b, 0xb4, 0x3c, 0xd6, 0xe7, 0xb8, 0xab, 0xa4, 0x92, 0x85}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"analytics.graphql":           analyticsGraphql,
	"query.graphql":               queryGraphql,
	"query_alpha.graphql":         query_alphaGraphql,
	"schema.graphql":              schemaGraphql,
	"serum_fill.graphql":          serum_fillGraphql,
	"serum_market.graphql":        serum_marketGraphql,
	"serum_order.graphql":         serum_orderGraphql,
	"serum_order_tracker.graphql": serum_order_trackerGraphql,
	"token.graphql":               tokenGraphql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"analytics.graphql": {analyticsGraphql, map[string]*bintree{}},
	"query.graphql": {queryGraphql, map[string]*bintree{}},
	"query_alpha.graphql": {query_alphaGraphql, map[string]*bintree{}},
	"schema.graphql": {schemaGraphql, map[string]*bintree{}},
	"serum_fill.graphql": {serum_fillGraphql, map[string]*bintree{}},
	"serum_market.graphql": {serum_marketGraphql, map[string]*bintree{}},
	"serum_order.graphql": {serum_orderGraphql, map[string]*bintree{}},
	"serum_order_tracker.graphql": {serum_order_trackerGraphql, map[string]*bintree{}},
	"token.graphql": {tokenGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
