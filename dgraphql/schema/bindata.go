// Code generated by go-bindata.
// sources:
// query.graphql
// query_alpha.graphql
// schema.graphql
// serum_fill.graphql
// serum_market.graphql
// token.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xd4\x58\x10\xbc\xfb\x2b\x6a\xbc\x87\xcd\x4a\x51\x94\x95\x56\x7b\x98\x23\x81\x08\x90\x08\x90\x81\x13\xe2\xd0\x63\xb7\x67\x5a\xf3\xe6\xb5\xe9\x6e\x4f\x18\x45\xfc\x3b\x7a\x36\x0e\x09\x4a\x94\x9b\xdf\x73\x57\xd5\xeb\xaa\x8a\x63\xcf\xf8\x38\xb0\x1d\x71\x5b\x55\x40\xe8\x8e\xb3\x9f\x34\x3a\xe4\x58\xe2\xb3\xe4\xf8\xff\xbf\x53\x34\x83\xb9\xda\x12\xab\x30\xc9\x9b\x7f\x96\xf8\x54\xc6\x2e\x34\x67\x6e\x42\x34\x2f\xee\xa0\x27\xd4\xb6\xc6\xee\xf3\xec\x62\x1e\x7e\xd5\x6e\x78\x51\x55\x7f\x01\xc6\x1b\xf1\x60\xe3\x76\xfc\xe1\x4b\x7c\xb9\x7e\x78\x75\xcd\xde\x6b\x76\x5e\x7c\x7d\x14\xf1\x98\xc6\x13\x0c\xe5\x5d\x75\x5d\x5f\x73\x0c\x96\x91\xc8\x03\xff\x9e\x9f\xa3\x93\x94\x1c\x9d\x1a\x62\xcb\xd8\xc8\x81\x33\xc2\xa8\x65\xfb\xdb\xd1\x0f\xeb\x24\x0d\x76\x7c\x3c\xc3\x04\x74\x88\x19\x1f\xd8\x5c\xd6\x89\xa1\x39\x1d\xd1\x52\x10\x5c\x91\xe4\xc0\xd3\x21\x6b\xe0\xc8\x81\x9e\x2c\xa0\x1d\x08\x9e\x34\x10\x5b\x0a\x88\x43\xf2\x28\x66\xaa\x01\xe7\xc0\x8d\xa4\x34\x62\xd6\x0c\x1b\x65\xb8\xc5\xcd\x96\x33\x1a\x4a\x89\xdb\xb3\xba\xae\x2b\xc0\xd9\x86\xfd\xa5\xa4\xf4\x5a\x3c\xd4\x8e\x27\xd3\x3b\xef\x76\x3f\xc5\x9e\x6c\xc7\x71\x2f\x9c\xd5\x0c\xf9\x23\xa0\x91\xea\xdd\x38\xfd\x7c\xc2\xab\xdf\xc3\xf7\x69\x7e\x54\x55\x5d\xd7\x17\xe3\xb4\xc3\xf8\xdb\x20\xc6\x2d\x42\xd1\x68\x0e\xc9\x03\x83\x25\xb6\x6c\xc5\xdd\x1b\xb2\x16\x6a\x58\x53\xb3\x2b\xdf\x8e\xce\x74\x0f\x42\x12\x1f\x2d\xea\x69\x23\x99\x82\x5b\x70\xe2\x3d\xe7\xf0\xb2\xf4\xd8\xc9\x0f\xb4\xe1\x37\xb9\x53\xdc\x56\xc0\x18\xe2\x24\x5a\x60\xc5\xc7\x4e\xcc\x63\x86\xcd\x97\x85\xf7\x14\x83\x33\x24\xca\x9b\x9c\xc9\x9a\xed\x6c\xbd\xf6\xbd\xba\x04\xa3\x15\x9b\xf6\x99\x2c\x06\x3c\xc8\xe2\xe2\x81\x05\xa3\x63\x8f\xe8\x8e\x1d\x7a\x46\x76\xb6\x62\xa6\xe7\xdc\x3e\x45\xfe\x92\x83\x6d\x2f\x99\x1d\x32\x92\x19\x97\xb2\x50\xb1\x86\x41\x07\x92\x44\xa5\x73\xd4\x05\x4f\x6d\xd5\x5c\xfa\xd2\x1b\x3b\xe7\xe2\xdc\xfa\x88\xd8\x8a\x4f\x00\xc9\x9d\xce\xaa\x5b\xf2\x2b\xfe\x1e\xc5\xc8\x25\x5e\xa8\x26\xa6\x29\x40\x6f\x28\x91\xfd\x8a\x7e\x3e\x5d\x26\xa5\x7b\xc7\xb7\xab\xf7\x57\x3f\x03\x00\x00\xff\xff\xee\xee\x35\x2f\x1c\x04\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1612203653, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _query_alphaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2c\x4d\x2d\xaa\x54\xa8\xae\xe5\x02\x04\x00\x00\xff\xff\x76\xca\x60\x3d\x0e\x00\x00\x00")

func query_alphaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_query_alphaGraphql,
		"query_alpha.graphql",
	)
}

func query_alphaGraphql() (*asset, error) {
	bytes, err := query_alphaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query_alpha.graphql", size: 14, mode: os.FileMode(420), modTime: time.Unix(1608159398, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\x9e\xeb\xeb\x5e\x1c\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 28, mode: os.FileMode(420), modTime: time.Unix(1611886197, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serum_fillGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x4f\x6f\xdc\x36\x10\xc5\xef\xfa\x14\xcf\xba\xc4\x06\xdc\x5d\xa0\x4d\x73\xd0\x6d\xd3\xa4\x85\xe1\xda\x4d\x2c\x07\x39\x04\x39\x70\xc5\x91\x34\x35\x45\xca\xfc\x63\x57\x28\xfa\xdd\x8b\x11\xb5\xde\xf5\xbf\x7b\x4e\xdc\x25\x67\xde\xfc\xde\x68\xc8\xa2\x2c\xcb\xeb\x9e\xf0\x9b\xb3\x96\x9a\xc8\xce\x22\x4e\x23\xa1\x75\x1e\x0a\x35\xf9\x34\xfc\xce\xc6\xac\x50\x13\x21\xf6\x84\x6f\x7f\x78\x35\xf6\x9f\xff\x44\xe3\x3c\xa1\x71\xb6\xa1\x31\x86\xef\xc7\x7d\x8c\x63\xa8\xd6\x6b\xed\x9a\xb0\xd2\x6d\x0a\xb4\x62\xb7\xee\x12\x6b\x0a\x6b\x89\xfd\x69\x17\xbb\xee\x44\xe1\xd6\xac\x4f\xca\xb2\x2c\xe6\x6a\x0f\x75\x0e\x30\xfe\x2d\x80\x72\x03\xc3\x21\xc2\xb5\x20\xdd\x51\x40\x74\xfb\xd8\xb2\x40\xde\xad\xf0\xed\x61\xf3\xa3\xee\xe8\xfb\x51\x21\xb9\x67\xb6\x75\x7e\x50\xd9\x93\x83\x62\x8d\x51\x75\x6c\xe7\x1d\x49\x1e\x55\x47\x12\x54\xe1\xd3\xf2\xeb\xa8\xf8\xaf\x90\x8e\x14\x1b\x04\xb6\x9d\x39\x20\x03\x19\x1a\xc8\xce\x2c\xd2\x87\x66\x4f\x2a\x88\xab\xe2\xb9\x19\x61\xc9\x36\xca\xf2\x73\x22\x3f\xa1\x49\x3e\x38\x7f\x0a\x65\x8c\xbb\x67\xdb\x61\x72\x49\xd8\x1a\x67\x23\xdb\x44\x68\x29\x36\xbd\x1c\x78\x0a\xc9\xc4\x00\xba\x23\x0b\xd5\x46\xf2\x60\x1b\xc9\xfb\x34\xce\x35\x5d\x2b\xb9\xfe\x00\xe3\x14\xf7\x1c\x7b\x97\x22\x06\x0e\x42\x0f\x85\x2d\xa9\xb8\x12\x30\x2c\xa5\x2b\xd4\xd1\xb3\xed\x72\x87\xf2\xa7\xdf\x5b\x74\xdb\xbf\xa9\xd9\x25\x58\xa7\xa9\xda\x1f\xce\xad\x79\xec\x6f\xe7\x4d\x44\x9c\xd7\xe4\x91\x2c\xdf\x26\x02\x6b\xb2\x91\x5b\x26\x3f\xcf\xd1\x7d\xcf\x4d\x8f\xd8\x73\x38\xc8\xe5\x80\xad\x4b\x56\x23\xba\xa5\xe0\x2c\x71\xa6\x5f\x42\x8c\x5e\x69\xf2\x6f\x02\xc6\xb4\x35\xdc\xe0\x86\xa6\x59\xf9\xb1\xe6\x29\x78\x45\xab\xf9\xeb\x38\x2b\xd3\xaa\x22\xb6\x69\x82\xf3\x08\x64\xcc\x3e\x63\x50\xfe\x86\x76\x3e\xb3\xf6\x4b\x55\x73\xd8\xab\x16\xde\x84\xc5\xf5\x73\x2b\x39\x73\xe9\xde\xc5\xfc\x67\x27\xfc\x75\x56\x0a\xac\xe9\x85\x8e\xb4\x32\x1c\xc4\xb1\x27\x8f\xf7\x67\x1f\x70\x2c\xdc\xe4\x4f\xc4\xc2\xa6\x3e\xc7\xf1\x36\x4d\xe4\x4f\x96\x2a\x22\x52\xa1\x66\x4d\xd7\xd3\x48\x87\xe4\x36\x0d\x5b\xf2\x32\x24\xc6\xc5\xa7\x75\x5a\x36\x86\x74\x6e\xd3\xcc\x2f\x73\x73\x0a\x4f\xa3\xa7\x40\x36\x86\xf9\x68\x24\xdf\x90\x8d\xaa\xa3\xdd\xc4\xe7\xe0\x27\x62\x9a\xf5\x42\x73\x9b\x94\x8d\x1c\xa7\x2b\x6a\x88\xef\x48\x57\xb8\x76\x37\x64\x37\x83\x4b\x36\xfe\x28\x70\x9f\x14\xbf\x0e\x36\x7a\x6e\x08\xa3\x3c\x14\x0f\xa3\x42\xff\xa8\x26\x1e\xbe\x83\x12\xa8\xc9\xba\x81\x9b\xfc\xb4\x70\x80\x32\xf7\x6a\x0a\x60\x8b\xe3\xad\x0a\x84\x28\xfa\x58\xe3\x36\xb9\xb8\xfc\x3b\xc9\x1c\x73\x89\xd7\x2f\x21\xd1\xb5\x5c\x1a\x43\x77\x64\x9e\x80\x48\x63\x16\x33\x6d\x0e\xab\x1e\x25\xed\xef\xe7\x81\x3b\xcc\x57\xf4\x4e\x99\x44\x15\xbe\xb0\x8d\xef\xde\x1e\x15\x80\xe6\x30\x1a\x35\xed\x38\xe4\x12\x48\xce\xd2\x18\x11\x22\x9b\x86\xc7\x4c\x22\xf4\x7e\x53\x7f\x2c\x80\xfa\xea\xe2\xe7\xbc\xfc\x92\x97\xb7\x79\xf9\x35\x2f\xef\x0a\xe0\xa2\xbe\xba\xd8\xeb\x2c\x13\x3a\x6b\x6c\xea\x73\x51\x3a\xfb\x50\x00\x5f\x2e\xcf\x2f\xff\xfa\x7a\x29\x81\xff\x07\x00\x00\xff\xff\xb0\xc3\x8d\xfc\x88\x06\x00\x00")

func serum_fillGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_fillGraphql,
		"serum_fill.graphql",
	)
}

func serum_fillGraphql() (*asset, error) {
	bytes, err := serum_fillGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_fill.graphql", size: 1672, mode: os.FileMode(420), modTime: time.Unix(1611689678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serum_marketGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x50\x4d\x6f\xd4\x30\x10\xbd\xe7\x57\xbc\xe6\x02\x48\x25\xb9\x20\x0e\xb9\x55\x15\x20\x24\x90\xa8\x76\x39\x55\x3d\x78\xed\x49\x62\xea\x78\x52\x7b\xcc\x6a\x85\xfa\xdf\x91\xf3\x51\xb2\x74\x4f\x89\x67\xde\xc7\xbc\x57\x96\xe5\xbe\x27\xdc\xb2\xf7\xa4\xc5\xb2\x87\x9c\x46\x42\xcb\x01\x0a\x3b\x0a\x69\xf8\xae\xc2\x23\x49\x85\x1d\x11\xa4\x27\xdc\x7f\x09\x6a\xec\xef\xbe\x41\x73\x20\x68\xf6\x9a\x46\x89\x0f\x6f\x7b\x91\x31\x36\x75\x6d\x58\xc7\xca\xb4\x29\x52\x65\xb9\xee\x92\x35\x14\xeb\x8c\x7d\xbf\x62\xeb\x2e\x2b\x3c\xb9\xfa\x5d\x59\x96\xc5\xe4\xb7\x71\xda\x9c\xf2\xa7\x00\xca\xb2\xbc\x81\xb3\x51\xc0\x2d\xc8\x74\x14\x21\x3c\xe3\x3f\x5b\xe7\xb2\x02\xe6\x79\x83\xfb\x8d\xcc\x27\xd3\xd1\xc3\x55\x31\x2b\x7c\xf5\x2d\x87\x41\xcd\xf9\x18\xca\x1a\x8c\xaa\xb3\x7e\x9a\xcc\x12\xa3\xea\x28\xc3\x1a\xfc\x58\xfe\x56\xf2\x9e\x45\x39\x68\x4e\x7e\xba\x61\x98\xe4\x21\xbd\x12\x1c\x73\x01\xc9\x19\x04\x92\x14\x16\x25\xc9\xf8\xdb\x0c\x6f\xf0\xd3\x7a\xf9\xf8\xe1\xaa\x78\x2e\x8a\xbc\xbc\x41\xb4\xbe\x73\x67\x79\xf3\xa1\x20\x47\x03\xcd\xfa\xb9\x63\xfd\xaf\x83\x1c\xbd\x2a\x2e\x15\x35\x11\x97\x8a\xee\x12\x85\x13\x74\x0a\x91\xc3\x35\x94\x73\x7c\xb4\xbe\xc3\x89\x53\xce\xab\xd9\x8b\xf5\x89\xd0\x92\xe8\x3e\x2f\x02\xc5\xe4\x24\x82\x7e\x93\x87\x6a\x85\x02\xac\x17\x0a\x21\x8d\x93\x2b\xb7\x99\x1b\x36\x87\x5c\xe3\x68\xa5\xe7\x24\x18\x6c\xcc\x29\xa0\x70\x20\x25\xd5\x1c\x7a\xb6\x6e\xb0\x93\x60\x7d\xf7\x52\x5d\x7f\x76\x31\xf8\xf0\x8b\xf4\x4a\xf1\x6c\xa8\xd9\xae\xa7\x9a\xfe\x4f\x89\x35\x62\xd6\x9a\xbb\x7f\x13\xa1\x8c\x09\x14\xe3\xa2\xb4\xbc\x2e\xb9\xbf\x30\x8c\x8d\xa3\x53\x27\x78\x35\xd0\xe2\xaf\x06\x5a\x29\xaf\x18\x11\x07\x15\x09\xc2\x8f\xe4\x17\x97\x3c\xd8\xe7\x77\x83\xe9\x73\x81\xf3\x94\x58\xce\x49\xd3\xe4\x8c\xf5\xfc\x37\x00\x00\xff\xff\x7a\x87\x38\xaa\x73\x03\x00\x00")

func serum_marketGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_marketGraphql,
		"serum_market.graphql",
	)
}

func serum_marketGraphql() (*asset, error) {
	bytes, err := serum_marketGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_market.graphql", size: 883, mode: os.FileMode(420), modTime: time.Unix(1611886197, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tokenGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6f\xd4\x30\x10\x85\xef\xfe\x15\xaf\x39\x81\x54\x92\x0b\xe2\x90\x5b\x41\x08\x55\x02\x89\xaa\xe5\x54\xf5\xe0\xb5\x27\x89\xc1\xf1\x04\x7b\xdc\x55\x40\xfd\xef\xc8\xce\x2e\x1b\x24\x6e\xf1\x9b\x67\xbf\xef\x4d\x94\x6a\x9a\xe6\x61\x22\x7c\xe0\x10\xc8\x88\xe3\x00\x59\x17\xc2\xc0\x11\x1a\x0f\xfc\x83\x42\x8b\x7b\x22\xc8\x44\x78\xfc\x14\xf5\x32\xdd\x7d\x86\xe1\x48\x30\x1c\x0c\x2d\x92\x9e\x5e\x4d\x22\x4b\xea\xbb\xce\xb2\x49\xad\x1d\x72\xa2\xd6\x71\x37\x66\x67\x29\x75\xc5\xfb\xe6\xec\xed\xc6\xf2\xc2\x4f\xdf\xbd\x6e\x9a\x46\xd5\xa4\x9a\xb1\x8b\xff\xad\x80\xe6\x06\xde\x25\x01\x0f\x20\x3b\x52\x82\xf0\xe6\x43\xa3\xb0\x49\x3d\x1e\xab\xf2\xd1\x8e\xf4\x74\xa5\xca\xa5\xdb\x30\x70\x9c\xf5\x56\x82\xa1\x9d\xc5\xa2\x47\x17\xaa\x52\x2e\x2e\x7a\xa4\x62\xea\xf1\xf5\xf4\x75\xa5\x5e\xea\x0a\xd4\x0d\x92\x0b\xa3\x3f\xe1\x80\x3c\xcd\x14\x2a\x40\x29\x6e\x2e\x78\x85\xab\x55\xff\xd2\x17\x86\x8d\xbb\x69\xee\x32\xc5\x15\x26\xc7\xc4\xf1\x1a\xda\x7b\x3e\xba\x30\x62\xe5\x5c\x98\x0c\x07\x71\x21\x13\x06\x12\x33\x95\x41\xa4\x94\xbd\x24\xd0\x33\x05\xe8\x41\x28\xc2\x05\xa1\x18\xf3\x52\xf3\x78\x28\x77\xe3\x0e\xe1\x1a\x47\x27\x13\x67\xc1\xec\x52\xa1\x86\xc6\x81\xb4\xb4\x05\x0a\xa7\xe8\x1e\xf7\x12\x5d\x18\xb7\xcd\x6c\xff\x78\xab\xc6\x87\xef\x64\xce\xe6\xc0\x96\xfa\x6d\x50\x57\xb1\x2b\x55\x0b\x69\x6b\x23\xa5\x74\x79\x0d\x98\x5d\x90\x9b\x2c\x13\x47\x27\xeb\x7e\x30\x44\xa2\x5f\xf4\xdf\x51\xca\xcb\xe2\xd7\x1e\xdf\x5c\x90\x77\x6f\x8b\x62\xc9\xb8\x59\xfb\xd4\xe3\x36\x48\x11\x9e\x29\xba\xc1\x91\xed\xf1\x9e\xd9\x93\x0e\x35\x8b\x44\x9f\xf0\xbe\x90\xe8\x42\x78\x01\x2c\x4a\x85\x4c\xeb\x7c\x60\xbf\xcf\x0b\x7a\xa6\xfd\xd9\xf3\xc8\xe7\xb3\x02\x8e\x74\x48\x4e\xfe\x3a\xd4\x8b\xfa\x13\x00\x00\xff\xff\xa5\x9b\x3c\x1f\x08\x03\x00\x00")

func tokenGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_tokenGraphql,
		"token.graphql",
	)
}

func tokenGraphql() (*asset, error) {
	bytes, err := tokenGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "token.graphql", size: 776, mode: os.FileMode(420), modTime: time.Unix(1612206111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"query.graphql": queryGraphql,
	"query_alpha.graphql": query_alphaGraphql,
	"schema.graphql": schemaGraphql,
	"serum_fill.graphql": serum_fillGraphql,
	"serum_market.graphql": serum_marketGraphql,
	"token.graphql": tokenGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"query.graphql": &bintree{queryGraphql, map[string]*bintree{}},
	"query_alpha.graphql": &bintree{query_alphaGraphql, map[string]*bintree{}},
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
	"serum_fill.graphql": &bintree{serum_fillGraphql, map[string]*bintree{}},
	"serum_market.graphql": &bintree{serum_marketGraphql, map[string]*bintree{}},
	"token.graphql": &bintree{tokenGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

