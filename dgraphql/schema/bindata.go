// Code generated by go-bindata. DO NOT EDIT.
// sources:
// query.graphql (886B)
// query_alpha.graphql (14B)
// registered_token.graphql (208B)
// schema.graphql (59B)
// serum_fill.graphql (1.672kB)
// serum_market.graphql (802B)
// subscription.graphql (22B)
// subscription_alpha.graphql (21B)
// token.graphql (266B)

package schema

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4f\x6b\x1b\x4d\x0c\xc6\xef\xfb\x29\x9e\xec\xe5\x4d\x20\x84\xbc\x50\x7a\xf0\xd5\x10\xda\x42\xff\xd9\xe9\xa9\xf4\x30\xde\xd1\xda\xc2\xe3\xd1\x56\xd2\xda\x2c\x21\xdf\xbd\xec\x2c\x1b\x62\x93\xd2\xdb\x48\xa3\xe7\x91\xf4\x9b\xf1\xa1\x23\x7c\xef\x49\x07\x3c\x55\x15\xe0\xb2\xa7\x6c\x0b\xfc\x7c\x1c\x0f\x2b\xb2\x4e\xb2\xd1\xd5\xaf\xab\x97\xcb\xeb\x10\xa3\x92\xd9\x02\x6b\x57\xce\xdb\xab\x9b\x05\xce\x8a\xc7\x4a\xa5\x2d\x9b\x93\x52\x7c\x9c\x0d\x57\xe7\xa9\x0b\xeb\x0b\xc1\x5b\x4d\xfe\x62\x30\xaa\xeb\xba\x5e\x91\xf7\x9a\x91\x82\x39\xfe\xbf\xbf\x47\xcb\x29\x19\x5a\x51\xf8\x8e\xb0\xe5\x23\x65\xb8\x86\x48\xfa\x9f\xa1\xeb\x37\x89\x1b\xec\x69\xb8\xc3\x24\x34\xb0\x2a\x1d\x49\x8d\x37\x89\x20\x39\x0d\x88\xc1\x03\x4c\x90\xf8\x48\x53\x90\xc5\x31\x90\xa3\x0b\xea\x90\x16\x01\x96\xc4\xe1\xbb\xe0\x60\x03\xe7\xd2\x4c\x45\x1c\x46\x8e\x13\xa7\x54\x34\x1b\x82\x96\x36\x14\x71\xda\x51\x46\x13\x52\xa2\x78\x57\xd7\x75\x05\x18\x69\x7f\x78\xe0\x94\x3e\xb0\xb9\xe8\x70\x3d\xcd\xf9\xb2\xfb\x2d\x0e\x41\xf7\xe4\x73\xe2\x66\x81\xf5\x2c\x59\x4a\xce\xd4\x38\x4b\x2e\x18\x8b\xd5\xe7\x52\x6d\xd7\x4d\xaf\x26\x7a\xa9\x9a\x6e\x5f\xeb\x9e\xab\xaa\xae\xeb\x65\xa9\x36\x28\xfd\xee\x59\x29\xc2\x05\x8d\x64\xe7\xdc\x13\x88\x7d\x47\x3a\xe2\x3c\x05\x8d\x10\xc5\x26\x34\xfb\xf1\x6c\x68\x55\x0e\x08\x48\x6c\x85\x49\x17\xb6\x9c\x83\x53\x04\x25\x3a\x50\x76\x1b\xb7\x2c\xff\xec\x5b\xd8\xd2\xc7\xdc\xca\x53\x05\x94\x47\x9b\x26\x1c\x55\x23\xb7\x96\xd5\x7c\x56\xcd\xc9\xd1\xf6\x16\xbd\x11\xd8\xc7\x91\x8c\x82\x36\xbb\x19\xb5\x74\x9d\x18\x3b\x21\xb2\x4e\xeb\x4c\x48\x01\xf3\xa0\xbe\x3c\x23\x50\x08\xbd\xd1\xb7\xfc\x99\x7f\xb4\x9d\x49\xcc\xf6\x94\xe3\xa5\xf9\x73\x55\x59\x13\x52\x50\xfc\xe0\xec\xef\xdf\xcd\xd1\x43\x92\xf0\x2a\xfc\xb4\xfe\xfa\xe5\x4f\x00\x00\x00\xff\xff\x97\xdf\xfe\x88\x76\x03\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 886, mode: os.FileMode(0644), modTime: time.Unix(1611850889, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0x55, 0x34, 0xd2, 0x3c, 0xb4, 0x24, 0x8, 0x38, 0xc8, 0x5d, 0x90, 0xe0, 0xb2, 0x8c, 0x9, 0x5c, 0xa5, 0xfb, 0x99, 0x1e, 0xa9, 0x9d, 0x66, 0xc9, 0x47, 0x62, 0x76, 0x3b, 0x3d, 0x13, 0x7c}}
	return a, nil
}

var _query_alphaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2c\x4d\x2d\xaa\x54\xa8\xae\xe5\x02\x04\x00\x00\xff\xff\x76\xca\x60\x3d\x0e\x00\x00\x00")

func query_alphaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_query_alphaGraphql,
		"query_alpha.graphql",
	)
}

func query_alphaGraphql() (*asset, error) {
	bytes, err := query_alphaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query_alpha.graphql", size: 14, mode: os.FileMode(0644), modTime: time.Unix(1608153826, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x58, 0xf, 0x86, 0xb0, 0x43, 0x44, 0x23, 0x5f, 0x97, 0xd3, 0xde, 0x25, 0xbd, 0x4b, 0x29, 0x22, 0xad, 0x9b, 0x95, 0xef, 0x8, 0x81, 0x45, 0x11, 0x3a, 0x12, 0x62, 0xab, 0x4c, 0x93, 0xf8}}
	return a, nil
}

var _registered_tokenGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8b\x31\x0e\xc2\x30\x0c\x45\xf7\x9e\xc2\xdc\x01\x31\x74\x63\x64\x2d\x70\x80\x96\x7c\x82\x45\x62\x47\xb1\x2b\x14\x10\x77\x47\x30\x65\x60\x7c\xff\xbd\xef\xad\x80\x26\x44\x36\x47\x45\x38\xe9\x1d\x32\xc1\x8a\x8a\x81\x5e\x03\xd1\x1c\x42\x85\xd9\x48\x47\xaf\x2c\x71\x33\x10\x65\x16\xdf\xaf\x7e\xd3\xca\xde\x7a\x71\xad\xc0\x13\x7f\x95\xad\xa5\xa4\x36\xd2\x99\xc5\x77\xdb\xef\x12\x70\xe1\x3c\x27\x1b\xe9\x20\xfe\x4b\x5a\x5e\x34\xf5\x27\x99\x33\x7a\x4e\x1a\xb5\xe7\x07\x16\x63\xef\x92\xf7\xf0\x09\x00\x00\xff\xff\x65\x08\x1e\x7a\xd0\x00\x00\x00")

func registered_tokenGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_registered_tokenGraphql,
		"registered_token.graphql",
	)
}

func registered_tokenGraphql() (*asset, error) {
	bytes, err := registered_tokenGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registered_token.graphql", size: 208, mode: os.FileMode(0644), modTime: time.Unix(1608153758, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xad, 0xf8, 0x27, 0xfd, 0xab, 0x5a, 0x68, 0x60, 0x15, 0x89, 0x72, 0xbe, 0xcc, 0xcf, 0x4f, 0xcf, 0x8c, 0x4c, 0x3b, 0xe6, 0xcb, 0x89, 0x83, 0xe7, 0x3c, 0x5d, 0x1a, 0xf6, 0xe1, 0xec, 0xb5}}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x60\x81\xe2\xd2\xa4\xe2\xe4\xa2\xcc\x82\x92\xcc\xfc\x3c\x2b\x85\x60\x24\x1e\x57\x2d\x17\x20\x00\x00\xff\xff\x52\xd9\x58\xe5\x3b\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 59, mode: os.FileMode(0644), modTime: time.Unix(1608156028, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0xba, 0x8f, 0x74, 0x29, 0x4e, 0xaf, 0x41, 0x66, 0x2b, 0x4e, 0x31, 0x85, 0x84, 0x19, 0x59, 0x50, 0x81, 0xda, 0x72, 0x50, 0x56, 0xaf, 0xe3, 0xd8, 0xb7, 0x35, 0xbc, 0xd1, 0x85, 0xf3, 0xc6}}
	return a, nil
}

var _serum_fillGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x4f\x6f\xdc\x36\x10\xc5\xef\xfa\x14\xcf\xba\xc4\x06\xdc\x5d\xa0\x4d\x73\xd0\x6d\xd3\xa4\x85\xe1\xda\x4d\x2c\x07\x39\x04\x39\x70\xc5\x91\x34\x35\x45\xca\xfc\x63\x57\x28\xfa\xdd\x8b\x11\xb5\xde\xf5\xbf\x7b\x4e\xdc\x25\x67\xde\xfc\xde\x68\xc8\xa2\x2c\xcb\xeb\x9e\xf0\x9b\xb3\x96\x9a\xc8\xce\x22\x4e\x23\xa1\x75\x1e\x0a\x35\xf9\x34\xfc\xce\xc6\xac\x50\x13\x21\xf6\x84\x6f\x7f\x78\x35\xf6\x9f\xff\x44\xe3\x3c\xa1\x71\xb6\xa1\x31\x86\xef\xc7\x7d\x8c\x63\xa8\xd6\x6b\xed\x9a\xb0\xd2\x6d\x0a\xb4\x62\xb7\xee\x12\x6b\x0a\x6b\x89\xfd\x69\x17\xbb\xee\x44\xe1\xd6\xac\x4f\xca\xb2\x2c\xe6\x6a\x0f\x75\x0e\x30\xfe\x2d\x80\x72\x03\xc3\x21\xc2\xb5\x20\xdd\x51\x40\x74\xfb\xd8\xb2\x40\xde\xad\xf0\xed\x61\xf3\xa3\xee\xe8\xfb\x51\x21\xb9\x67\xb6\x75\x7e\x50\xd9\x93\x83\x62\x8d\x51\x75\x6c\xe7\x1d\x49\x1e\x55\x47\x12\x54\xe1\xd3\xf2\xeb\xa8\xf8\xaf\x90\x8e\x14\x1b\x04\xb6\x9d\x39\x20\x03\x19\x1a\xc8\xce\x2c\xd2\x87\x66\x4f\x2a\x88\xab\xe2\xb9\x19\x61\xc9\x36\xca\xf2\x73\x22\x3f\xa1\x49\x3e\x38\x7f\x0a\x65\x8c\xbb\x67\xdb\x61\x72\x49\xd8\x1a\x67\x23\xdb\x44\x68\x29\x36\xbd\x1c\x78\x0a\xc9\xc4\x00\xba\x23\x0b\xd5\x46\xf2\x60\x1b\xc9\xfb\x34\xce\x35\x5d\x2b\xb9\xfe\x00\xe3\x14\xf7\x1c\x7b\x97\x22\x06\x0e\x42\x0f\x85\x2d\xa9\xb8\x12\x30\x2c\xa5\x2b\xd4\xd1\xb3\xed\x72\x87\xf2\xa7\xdf\x5b\x74\xdb\xbf\xa9\xd9\x25\x58\xa7\xa9\xda\x1f\xce\xad\x79\xec\x6f\xe7\x4d\x44\x9c\xd7\xe4\x91\x2c\xdf\x26\x02\x6b\xb2\x91\x5b\x26\x3f\xcf\xd1\x7d\xcf\x4d\x8f\xd8\x73\x38\xc8\xe5\x80\xad\x4b\x56\x23\xba\xa5\xe0\x2c\x71\xa6\x5f\x42\x8c\x5e\x69\xf2\x6f\x02\xc6\xb4\x35\xdc\xe0\x86\xa6\x59\xf9\xb1\xe6\x29\x78\x45\xab\xf9\xeb\x38\x2b\xd3\xaa\x22\xb6\x69\x82\xf3\x08\x64\xcc\x3e\x63\x50\xfe\x86\x76\x3e\xb3\xf6\x4b\x55\x73\xd8\xab\x16\xde\x84\xc5\xf5\x73\x2b\x39\x73\xe9\xde\xc5\xfc\x67\x27\xfc\x75\x56\x0a\xac\xe9\x85\x8e\xb4\x32\x1c\xc4\xb1\x27\x8f\xf7\x67\x1f\x70\x2c\xdc\xe4\x4f\xc4\xc2\xa6\x3e\xc7\xf1\x36\x4d\xe4\x4f\x96\x2a\x22\x52\xa1\x66\x4d\xd7\xd3\x48\x87\xe4\x36\x0d\x5b\xf2\x32\x24\xc6\xc5\xa7\x75\x5a\x36\x86\x74\x6e\xd3\xcc\x2f\x73\x73\x0a\x4f\xa3\xa7\x40\x36\x86\xf9\x68\x24\xdf\x90\x8d\xaa\xa3\xdd\xc4\xe7\xe0\x27\x62\x9a\xf5\x42\x73\x9b\x94\x8d\x1c\xa7\x2b\x6a\x88\xef\x48\x57\xb8\x76\x37\x64\x37\x83\x4b\x36\xfe\x28\x70\x9f\x14\xbf\x0e\x36\x7a\x6e\x08\xa3\x3c\x14\x0f\xa3\x42\xff\xa8\x26\x1e\xbe\x83\x12\xa8\xc9\xba\x81\x9b\xfc\xb4\x70\x80\x32\xf7\x6a\x0a\x60\x8b\xe3\xad\x0a\x84\x28\xfa\x58\xe3\x36\xb9\xb8\xfc\x3b\xc9\x1c\x73\x89\xd7\x2f\x21\xd1\xb5\x5c\x1a\x43\x77\x64\x9e\x80\x48\x63\x16\x33\x6d\x0e\xab\x1e\x25\xed\xef\xe7\x81\x3b\xcc\x57\xf4\x4e\x99\x44\x15\xbe\xb0\x8d\xef\xde\x1e\x15\x80\xe6\x30\x1a\x35\xed\x38\xe4\x12\x48\xce\xd2\x18\x11\x22\x9b\x86\xc7\x4c\x22\xf4\x7e\x53\x7f\x2c\x80\xfa\xea\xe2\xe7\xbc\xfc\x92\x97\xb7\x79\xf9\x35\x2f\xef\x0a\xe0\xa2\xbe\xba\xd8\xeb\x2c\x13\x3a\x6b\x6c\xea\x73\x51\x3a\xfb\x50\x00\x5f\x2e\xcf\x2f\xff\xfa\x7a\x29\x81\xff\x07\x00\x00\xff\xff\xb0\xc3\x8d\xfc\x88\x06\x00\x00")

func serum_fillGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_fillGraphql,
		"serum_fill.graphql",
	)
}

func serum_fillGraphql() (*asset, error) {
	bytes, err := serum_fillGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_fill.graphql", size: 1672, mode: os.FileMode(0644), modTime: time.Unix(1611849359, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x69, 0x59, 0x8b, 0xe4, 0x44, 0x81, 0x5e, 0x3d, 0x34, 0x3b, 0x28, 0xd, 0xe5, 0x9b, 0x30, 0xad, 0xe4, 0x27, 0x31, 0x80, 0xbe, 0x3f, 0xed, 0x8b, 0xb1, 0x16, 0x60, 0x9e, 0x45, 0xbd, 0xd7}}
	return a, nil
}

var _serum_marketGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x41\x6f\xd4\x30\x10\x85\xef\xf9\x15\xaf\xbe\x00\x52\x49\xee\xb9\x55\x08\x10\x12\x48\x54\xed\xad\xea\xc1\x6b\x4f\x12\x53\xc7\x93\xda\x63\xaa\x15\xea\x7f\x47\x76\xb2\x90\x85\x3d\x25\x1e\xcf\x37\xef\xbd\x91\x95\x52\xf7\x13\xe1\x03\x87\x40\x46\x1c\x07\xc8\x71\x21\x0c\x1c\xa1\x71\x47\x31\xcf\xdf\x74\x7c\x22\x69\x71\x47\x04\x99\x08\x0f\x9f\xa3\x5e\xa6\xdb\xaf\x30\x1c\x09\x86\x83\xa1\x45\xd2\xe3\xdb\x49\x64\x49\x7d\xd7\x59\x36\xa9\xb5\x43\x4e\xd4\x3a\xee\xc6\xec\x2c\xa5\xae\xf4\xbe\x3f\xf5\x76\x63\x99\xf0\xec\xbb\x77\x4a\xa9\xa6\xea\xed\x94\x76\x56\x7e\x35\x80\xba\x81\x77\x49\xc0\x03\xc8\x8e\x94\x20\xbc\x76\x7f\x72\xde\xab\x06\x6b\xb5\xc7\xc3\x6e\xc4\x47\x3b\xd2\xe3\x55\x53\xe8\x2f\x61\xe0\x38\xeb\x35\x19\x43\x3b\x8b\x45\x8f\x2e\xd4\x4a\xc1\x17\x3d\x52\x69\xea\xf1\x7d\xfb\xbb\x6a\x5e\x9b\xa6\x38\xbb\x41\x72\x61\xf4\x67\xee\xca\x68\x90\xa7\x99\x42\xf5\x54\x36\x62\xfe\x3a\x2e\x56\xdb\xe6\x52\xac\x0a\xd6\x40\x4a\xdd\x66\x8a\x47\x98\x1c\x13\xc7\x6b\x68\xef\xf9\xc5\x85\x11\x47\xce\xc5\xa3\xe1\x20\x2e\x64\xc2\x40\x62\xa6\x72\x11\x29\x65\x2f\x09\xf4\x93\x02\xf4\x20\x14\xe1\x82\x50\x8c\x79\xa9\xaa\x3c\x14\x36\xee\x8c\x5c\xe3\xc5\xc9\xc4\x59\x30\xbb\x54\x52\x40\xe3\x40\x5a\xda\x62\x0d\x9b\x74\x8f\x3b\x89\x2e\x8c\xeb\xa6\xd6\x87\xb0\x73\x0c\x3e\xfc\x20\x73\x42\x02\x5b\xea\xf7\xd7\x75\x4d\xff\xa6\xc4\x29\x62\x99\x35\xd7\xd2\x9b\x04\x6d\x6d\xa4\x94\xb6\x49\xdb\xe9\x92\xfa\x1f\xc2\xba\xb4\x78\x7d\x44\xd0\x33\x6d\xfa\x7a\xa6\x13\xf2\x1f\x91\x70\xd0\x89\x20\xfc\x44\x61\x53\x29\x85\xfb\x72\xee\x51\x3f\x17\x98\xe7\xcc\x72\x0e\xd5\xca\x39\xf5\xfa\x3b\x00\x00\xff\xff\x79\x3e\xe2\x94\x22\x03\x00\x00")

func serum_marketGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_marketGraphql,
		"serum_market.graphql",
	)
}

func serum_marketGraphql() (*asset, error) {
	bytes, err := serum_marketGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_market.graphql", size: 802, mode: os.FileMode(0644), modTime: time.Unix(1611850560, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0xff, 0x10, 0x52, 0x63, 0x4, 0x0, 0xc, 0x2a, 0xc5, 0xad, 0x4d, 0xa9, 0xbc, 0x35, 0x5c, 0xea, 0xbc, 0x25, 0xb1, 0x60, 0xc3, 0x62, 0x22, 0x2c, 0x45, 0x51, 0x38, 0xad, 0xee, 0xf7, 0xcd}}
	return a, nil
}

var _subscriptionGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2e\x4d\x2a\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x53\xa8\xe6\xaa\xe5\x02\x04\x00\x00\xff\xff\xb3\xea\x92\x0b\x16\x00\x00\x00")

func subscriptionGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_subscriptionGraphql,
		"subscription.graphql",
	)
}

func subscriptionGraphql() (*asset, error) {
	bytes, err := subscriptionGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "subscription.graphql", size: 22, mode: os.FileMode(0644), modTime: time.Unix(1610471296, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0x25, 0x27, 0xb0, 0x18, 0x69, 0xe3, 0x4, 0x9b, 0xf1, 0xde, 0x8e, 0x2a, 0x53, 0x2, 0x7f, 0x4f, 0xab, 0xde, 0xf0, 0x5f, 0xf4, 0xc7, 0xdc, 0x65, 0x6f, 0x7c, 0x8c, 0x75, 0xa1, 0x4d, 0xc0}}
	return a, nil
}

var _subscription_alphaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2e\x4d\x2a\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x53\xa8\xae\xe5\x02\x04\x00\x00\xff\xff\x4d\xe9\x40\xe8\x15\x00\x00\x00")

func subscription_alphaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_subscription_alphaGraphql,
		"subscription_alpha.graphql",
	)
}

func subscription_alphaGraphql() (*asset, error) {
	bytes, err := subscription_alphaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "subscription_alpha.graphql", size: 21, mode: os.FileMode(0644), modTime: time.Unix(1608153609, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0x20, 0x13, 0xe7, 0x39, 0xf6, 0x4e, 0x44, 0x50, 0x61, 0x33, 0x62, 0x95, 0x35, 0x1d, 0x5c, 0x43, 0x43, 0xb0, 0xe4, 0xe2, 0xf9, 0xa2, 0x94, 0xdd, 0xcc, 0xad, 0x3b, 0x5d, 0x4d, 0xce, 0x16}}
	return a, nil
}

var _tokenGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xce\x2d\x0e\x02\x31\x10\x05\x60\x3f\xa7\x78\x7b\x07\x82\x58\x87\xc4\xf2\x73\x80\x86\x3e\xa0\x61\x3b\x6d\x3a\xb3\xa2\x10\xee\x4e\x10\x04\x04\x48\xe4\xfb\x11\x9f\xf7\x4a\xec\xca\x85\x8a\x9b\x00\x21\xc6\x46\xb3\x11\x5b\x6f\x49\x4f\x83\x00\x1a\x32\x5f\x59\x80\x9c\xd4\x57\xb3\x9f\x4b\x4b\xde\x3f\x7f\xc7\x46\x5e\xf9\x75\xb2\xb9\xd6\xa9\x8f\xd8\x27\xf5\xe5\xe2\xd9\x44\x1e\x52\x0e\x93\x8d\x58\xab\x0f\x72\x17\x79\x43\x36\xb4\x5a\xd4\xf8\x0b\xf4\x27\xc1\x23\x00\x00\xff\xff\x13\x7e\x6d\x9e\x0a\x01\x00\x00")

func tokenGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_tokenGraphql,
		"token.graphql",
	)
}

func tokenGraphql() (*asset, error) {
	bytes, err := tokenGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "token.graphql", size: 266, mode: os.FileMode(0644), modTime: time.Unix(1611849359, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0xdf, 0x92, 0x97, 0x73, 0x4f, 0xc, 0x67, 0xec, 0x61, 0x3c, 0xfc, 0x34, 0xf, 0x4d, 0x78, 0x42, 0xd3, 0x18, 0xb7, 0x1f, 0xae, 0x28, 0x7, 0xdc, 0x2b, 0x7d, 0xa9, 0xf3, 0x72, 0x85, 0x37}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"query.graphql":              queryGraphql,
	"query_alpha.graphql":        query_alphaGraphql,
	"registered_token.graphql":   registered_tokenGraphql,
	"schema.graphql":             schemaGraphql,
	"serum_fill.graphql":         serum_fillGraphql,
	"serum_market.graphql":       serum_marketGraphql,
	"subscription.graphql":       subscriptionGraphql,
	"subscription_alpha.graphql": subscription_alphaGraphql,
	"token.graphql":              tokenGraphql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"query.graphql": {queryGraphql, map[string]*bintree{}},
	"query_alpha.graphql": {query_alphaGraphql, map[string]*bintree{}},
	"registered_token.graphql": {registered_tokenGraphql, map[string]*bintree{}},
	"schema.graphql": {schemaGraphql, map[string]*bintree{}},
	"serum_fill.graphql": {serum_fillGraphql, map[string]*bintree{}},
	"serum_market.graphql": {serum_marketGraphql, map[string]*bintree{}},
	"subscription.graphql": {subscriptionGraphql, map[string]*bintree{}},
	"subscription_alpha.graphql": {subscription_alphaGraphql, map[string]*bintree{}},
	"token.graphql": {tokenGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
