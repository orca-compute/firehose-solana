// Code generated by go-bindata.
// sources:
// query.graphql
// query_alpha.graphql
// registered_token.graphql
// schema.graphql
// serum_fill.graphql
// serum_market.graphql
// subscription.graphql
// subscription_alpha.graphql
// token.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x3c\xeb\xd2\x04\x42\x48\xa1\xf4\xe0\x6b\x20\xb4\x3d\xf4\xc3\x4e\x4f\xa5\x87\xb5\x76\x64\x0f\x5e\xef\xa8\x33\x23\x1b\x11\xf2\xdf\xcb\x4a\xc8\x34\x26\x25\xb7\x99\xd1\xbc\xf7\xe6\x3d\xad\x0f\x1d\xe1\x47\x4f\x3a\xe0\xa9\xaa\x00\x97\x3d\x65\x5b\xe2\xd7\x63\x29\x56\x64\x9d\x64\xa3\xc5\xef\xc5\xf9\xe3\x55\x88\x51\xc9\x6c\x89\xb5\x2b\xe7\xed\xe2\x7a\x89\x17\xcb\x65\x53\x69\xcb\xe6\xa4\x14\x1f\x67\xc2\xd5\xcb\xd1\x05\xf5\x05\xe0\x35\x91\xff\x10\x14\x74\x5d\xd7\x2b\xf2\x5e\x33\x52\x30\xc7\xfb\xbb\x3b\xb4\x9c\x92\xa1\x15\x85\xef\x08\x5b\x3e\x52\x86\x6b\x88\xa4\xef\x0c\x5d\xbf\x49\xdc\x60\x4f\xc3\x2d\x26\xa0\x81\x55\xe9\x48\x6a\xbc\x49\x04\xc9\x69\x40\x0c\x1e\x60\x82\xc4\x47\x9a\x9a\x2c\x8e\x81\x1c\x5d\x50\x87\xb4\x08\xb0\x24\x0e\xdf\x05\x07\x1b\x38\x8f\x62\x2a\xe2\x30\x72\x9c\x38\xa5\x11\xb3\x21\xe8\x28\x43\x11\xa7\x1d\x65\x34\x21\x25\x8a\xb7\x75\x5d\x57\x80\x91\xf6\x87\x07\x4e\xe9\x13\x9b\x8b\x0e\x57\xd3\x9d\x67\xef\x37\x38\x04\xdd\x93\xcf\x83\xeb\x25\xd6\x33\xe4\x5e\x72\xa6\xc6\x59\xf2\xa2\x7a\xae\xaa\xba\xae\xef\x7b\x35\x51\x83\xd2\x9f\x9e\x95\x22\x5c\xd0\x48\x76\xce\x3d\x81\xd8\x77\xa4\x25\x96\x53\xd0\x08\x51\x6c\x42\xb3\x2f\xb5\xa1\x55\x39\x20\x20\xb1\x8d\xde\xba\xb0\xe5\x1c\x9c\x22\x28\xd1\x81\xb2\x5b\xb9\x76\x7c\x2f\xdf\xc3\x96\x3e\xe7\x56\x9e\x2a\x60\x0c\xbf\x19\x35\x0b\xaa\xf8\x6f\x59\xcd\x67\xd4\x3c\x2c\xb4\x37\xe8\x8d\xc0\x5e\x4e\x32\x0a\xda\xec\xe6\xc8\xa4\xeb\xc4\xd8\x09\x91\x75\xb2\x33\x45\x03\x98\x07\xf5\xc9\xd3\x39\x90\xea\x75\xdd\xf1\xdf\xbf\x21\x3b\x27\x31\xd3\x53\x8e\x97\xe4\xcf\x55\x65\x4d\x48\x41\xf1\x93\xb3\x7f\xfc\x30\x77\x0f\x49\xc2\x3f\xed\x97\xf5\xb7\xaf\x7f\x03\x00\x00\xff\xff\xe2\x85\xe1\x5c\x3e\x03\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 830, mode: os.FileMode(420), modTime: time.Unix(1611681974, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _query_alphaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2c\x4d\x2d\xaa\x54\xa8\xae\xe5\x02\x04\x00\x00\xff\xff\x76\xca\x60\x3d\x0e\x00\x00\x00")

func query_alphaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_query_alphaGraphql,
		"query_alpha.graphql",
	)
}

func query_alphaGraphql() (*asset, error) {
	bytes, err := query_alphaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query_alpha.graphql", size: 14, mode: os.FileMode(420), modTime: time.Unix(1608159398, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _registered_tokenGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8b\x31\x0e\xc2\x30\x0c\x45\xf7\x9e\xc2\xdc\x01\x31\x74\x63\x64\x2d\x70\x80\x96\x7c\x82\x45\x62\x47\xb1\x2b\x14\x10\x77\x47\x30\x65\x60\x7c\xff\xbd\xef\xad\x80\x26\x44\x36\x47\x45\x38\xe9\x1d\x32\xc1\x8a\x8a\x81\x5e\x03\xd1\x1c\x42\x85\xd9\x48\x47\xaf\x2c\x71\x33\x10\x65\x16\xdf\xaf\x7e\xd3\xca\xde\x7a\x71\xad\xc0\x13\x7f\x95\xad\xa5\xa4\x36\xd2\x99\xc5\x77\xdb\xef\x12\x70\xe1\x3c\x27\x1b\xe9\x20\xfe\x4b\x5a\x5e\x34\xf5\x27\x99\x33\x7a\x4e\x1a\xb5\xe7\x07\x16\x63\xef\x92\xf7\xf0\x09\x00\x00\xff\xff\x65\x08\x1e\x7a\xd0\x00\x00\x00")

func registered_tokenGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_registered_tokenGraphql,
		"registered_token.graphql",
	)
}

func registered_tokenGraphql() (*asset, error) {
	bytes, err := registered_tokenGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registered_token.graphql", size: 208, mode: os.FileMode(420), modTime: time.Unix(1608159398, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x60\x81\xe2\xd2\xa4\xe2\xe4\xa2\xcc\x82\x92\xcc\xfc\x3c\x2b\x85\x60\x24\x1e\x57\x2d\x17\x20\x00\x00\xff\xff\x52\xd9\x58\xe5\x3b\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 59, mode: os.FileMode(420), modTime: time.Unix(1608159398, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serum_fillGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x4f\x6f\xdc\x36\x10\xc5\xef\xfa\x14\xcf\xba\xc4\x06\xdc\x5d\xa0\x4d\x73\xd0\x6d\xd3\xa4\x85\xe1\xda\x4d\x2c\x07\x39\x04\x39\x70\xc5\x91\x34\x35\x45\xca\xfc\x63\x57\x28\xfa\xdd\x8b\x11\xb5\xde\xf5\xbf\x7b\x4e\xdc\x25\x67\xde\xfc\xde\x68\xc8\xa2\x2c\xcb\xeb\x9e\xf0\x9b\xb3\x96\x9a\xc8\xce\x22\x4e\x23\xa1\x75\x1e\x0a\x35\xf9\x34\xfc\xce\xc6\xac\x50\x13\x21\xf6\x84\x6f\x7f\x78\x35\xf6\x9f\xff\x44\xe3\x3c\xa1\x71\xb6\xa1\x31\x86\xef\xc7\x7d\x8c\x63\xa8\xd6\x6b\xed\x9a\xb0\xd2\x6d\x0a\xb4\x62\xb7\xee\x12\x6b\x0a\x6b\x89\xfd\x69\x17\xbb\xee\x44\xe1\xd6\xac\x4f\xca\xb2\x2c\xe6\x6a\x0f\x75\x0e\x30\xfe\x2d\x80\x72\x03\xc3\x21\xc2\xb5\x20\xdd\x51\x40\x74\xfb\xd8\xb2\x40\xde\xad\xf0\xed\x61\xf3\xa3\xee\xe8\xfb\x51\x21\xb9\x67\xb6\x75\x7e\x50\xd9\x93\x83\x62\x8d\x51\x75\x6c\xe7\x1d\x49\x1e\x55\x47\x12\x54\xe1\xd3\xf2\xeb\xa8\xf8\xaf\x90\x8e\x14\x1b\x04\xb6\x9d\x39\x20\x03\x19\x1a\xc8\xce\x2c\xd2\x87\x66\x4f\x2a\x88\xab\xe2\xb9\x19\x61\xc9\x36\xca\xf2\x73\x22\x3f\xa1\x49\x3e\x38\x7f\x0a\x65\x8c\xbb\x67\xdb\x61\x72\x49\xd8\x1a\x67\x23\xdb\x44\x68\x29\x36\xbd\x1c\x78\x0a\xc9\xc4\x00\xba\x23\x0b\xd5\x46\xf2\x60\x1b\xc9\xfb\x34\xce\x35\x5d\x2b\xb9\xfe\x00\xe3\x14\xf7\x1c\x7b\x97\x22\x06\x0e\x42\x0f\x85\x2d\xa9\xb8\x12\x30\x2c\xa5\x2b\xd4\xd1\xb3\xed\x72\x87\xf2\xa7\xdf\x5b\x74\xdb\xbf\xa9\xd9\x25\x58\xa7\xa9\xda\x1f\xce\xad\x79\xec\x6f\xe7\x4d\x44\x9c\xd7\xe4\x91\x2c\xdf\x26\x02\x6b\xb2\x91\x5b\x26\x3f\xcf\xd1\x7d\xcf\x4d\x8f\xd8\x73\x38\xc8\xe5\x80\xad\x4b\x56\x23\xba\xa5\xe0\x2c\x71\xa6\x5f\x42\x8c\x5e\x69\xf2\x6f\x02\xc6\xb4\x35\xdc\xe0\x86\xa6\x59\xf9\xb1\xe6\x29\x78\x45\xab\xf9\xeb\x38\x2b\xd3\xaa\x22\xb6\x69\x82\xf3\x08\x64\xcc\x3e\x63\x50\xfe\x86\x76\x3e\xb3\xf6\x4b\x55\x73\xd8\xab\x16\xde\x84\xc5\xf5\x73\x2b\x39\x73\xe9\xde\xc5\xfc\x67\x27\xfc\x75\x56\x0a\xac\xe9\x85\x8e\xb4\x32\x1c\xc4\xb1\x27\x8f\xf7\x67\x1f\x70\x2c\xdc\xe4\x4f\xc4\xc2\xa6\x3e\xc7\xf1\x36\x4d\xe4\x4f\x96\x2a\x22\x52\xa1\x66\x4d\xd7\xd3\x48\x87\xe4\x36\x0d\x5b\xf2\x32\x24\xc6\xc5\xa7\x75\x5a\x36\x86\x74\x6e\xd3\xcc\x2f\x73\x73\x0a\x4f\xa3\xa7\x40\x36\x86\xf9\x68\x24\xdf\x90\x8d\xaa\xa3\xdd\xc4\xe7\xe0\x27\x62\x9a\xf5\x42\x73\x9b\x94\x8d\x1c\xa7\x2b\x6a\x88\xef\x48\x57\xb8\x76\x37\x64\x37\x83\x4b\x36\xfe\x28\x70\x9f\x14\xbf\x0e\x36\x7a\x6e\x08\xa3\x3c\x14\x0f\xa3\x42\xff\xa8\x26\x1e\xbe\x83\x12\xa8\xc9\xba\x81\x9b\xfc\xb4\x70\x80\x32\xf7\x6a\x0a\x60\x8b\xe3\xad\x0a\x84\x28\xfa\x58\xe3\x36\xb9\xb8\xfc\x3b\xc9\x1c\x73\x89\xd7\x2f\x21\xd1\xb5\x5c\x1a\x43\x77\x64\x9e\x80\x48\x63\x16\x33\x6d\x0e\xab\x1e\x25\xed\xef\xe7\x81\x3b\xcc\x57\xf4\x4e\x99\x44\x15\xbe\xb0\x8d\xef\xde\x1e\x15\x80\xe6\x30\x1a\x35\xed\x38\xe4\x12\x48\xce\xd2\x18\x11\x22\x9b\x86\xc7\x4c\x22\xf4\x7e\x53\x7f\x2c\x80\xfa\xea\xe2\xe7\xbc\xfc\x92\x97\xb7\x79\xf9\x35\x2f\xef\x0a\xe0\xa2\xbe\xba\xd8\xeb\x2c\x13\x3a\x6b\x6c\xea\x73\x51\x3a\xfb\x50\x00\x5f\x2e\xcf\x2f\xff\xfa\x7a\x29\x81\xff\x07\x00\x00\xff\xff\xb0\xc3\x8d\xfc\x88\x06\x00\x00")

func serum_fillGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_fillGraphql,
		"serum_fill.graphql",
	)
}

func serum_fillGraphql() (*asset, error) {
	bytes, err := serum_fillGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_fill.graphql", size: 1672, mode: os.FileMode(420), modTime: time.Unix(1611689678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serum_marketGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x31\x0e\xc2\x30\x0c\x85\xe1\x3d\xa7\x78\x78\x61\xe3\x00\xbd\x03\x53\x7b\x01\xa3\x58\x50\x95\xa4\xc5\x76\x87\x0a\x71\x77\x94\x40\x87\xaa\x9d\x92\xf7\x4b\x9f\xec\xcb\x24\x68\x45\xe7\x74\x65\x1d\xc4\x81\x77\x00\x88\xa8\x7b\x08\x52\x4d\x67\x03\xc7\xa8\x62\x76\x21\xa2\x80\x75\x35\x68\x5d\xfb\x7c\x3f\x85\x03\x11\x7b\x9b\x9e\xbc\x20\x73\x92\x9f\x2a\xbf\x95\xec\x84\xe1\xc6\x26\xf0\x71\x90\xfc\xbf\x52\x42\x57\x76\x83\xfa\x1c\x98\xd7\x3c\xfa\x16\xd5\xb2\x55\x9f\x6f\x00\x00\x00\xff\xff\x72\x92\x96\x35\xe3\x00\x00\x00")

func serum_marketGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_marketGraphql,
		"serum_market.graphql",
	)
}

func serum_marketGraphql() (*asset, error) {
	bytes, err := serum_marketGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_market.graphql", size: 227, mode: os.FileMode(420), modTime: time.Unix(1611685854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _subscriptionGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2e\x4d\x2a\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x53\xa8\xe6\xaa\xe5\x02\x04\x00\x00\xff\xff\xb3\xea\x92\x0b\x16\x00\x00\x00")

func subscriptionGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_subscriptionGraphql,
		"subscription.graphql",
	)
}

func subscriptionGraphql() (*asset, error) {
	bytes, err := subscriptionGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "subscription.graphql", size: 22, mode: os.FileMode(420), modTime: time.Unix(1610381284, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _subscription_alphaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2e\x4d\x2a\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x53\xa8\xae\xe5\x02\x04\x00\x00\xff\xff\x4d\xe9\x40\xe8\x15\x00\x00\x00")

func subscription_alphaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_subscription_alphaGraphql,
		"subscription_alpha.graphql",
	)
}

func subscription_alphaGraphql() (*asset, error) {
	bytes, err := subscription_alphaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "subscription_alpha.graphql", size: 21, mode: os.FileMode(420), modTime: time.Unix(1608159398, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tokenGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xce\x2d\x0e\x02\x31\x10\x05\x60\x3f\xa7\x78\x7b\x07\x82\x58\x87\xc4\xf2\x73\x80\x86\x3e\xa0\x61\x3b\x6d\x3a\xb3\xa2\x10\xee\x4e\x10\x04\x04\x48\xe4\xfb\x11\x9f\xf7\x4a\xec\xca\x85\x8a\x9b\x00\x21\xc6\x46\xb3\x11\x5b\x6f\x49\x4f\x83\x00\x1a\x32\x5f\x59\x80\x9c\xd4\x57\xb3\x9f\x4b\x4b\xde\x3f\x7f\xc7\x46\x5e\xf9\x75\xb2\xb9\xd6\xa9\x8f\xd8\x27\xf5\xe5\xe2\xd9\x44\x1e\x52\x0e\x93\x8d\x58\xab\x0f\x72\x17\x79\x43\x36\xb4\x5a\xd4\xf8\x0b\xf4\x27\xc1\x23\x00\x00\xff\xff\x13\x7e\x6d\x9e\x0a\x01\x00\x00")

func tokenGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_tokenGraphql,
		"token.graphql",
	)
}

func tokenGraphql() (*asset, error) {
	bytes, err := tokenGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "token.graphql", size: 266, mode: os.FileMode(420), modTime: time.Unix(1611691113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"query.graphql": queryGraphql,
	"query_alpha.graphql": query_alphaGraphql,
	"registered_token.graphql": registered_tokenGraphql,
	"schema.graphql": schemaGraphql,
	"serum_fill.graphql": serum_fillGraphql,
	"serum_market.graphql": serum_marketGraphql,
	"subscription.graphql": subscriptionGraphql,
	"subscription_alpha.graphql": subscription_alphaGraphql,
	"token.graphql": tokenGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"query.graphql": &bintree{queryGraphql, map[string]*bintree{}},
	"query_alpha.graphql": &bintree{query_alphaGraphql, map[string]*bintree{}},
	"registered_token.graphql": &bintree{registered_tokenGraphql, map[string]*bintree{}},
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
	"serum_fill.graphql": &bintree{serum_fillGraphql, map[string]*bintree{}},
	"serum_market.graphql": &bintree{serum_marketGraphql, map[string]*bintree{}},
	"subscription.graphql": &bintree{subscriptionGraphql, map[string]*bintree{}},
	"subscription_alpha.graphql": &bintree{subscription_alphaGraphql, map[string]*bintree{}},
	"token.graphql": &bintree{tokenGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

