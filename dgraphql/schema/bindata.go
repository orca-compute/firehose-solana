// Code generated by go-bindata.
// sources:
// query.graphql
// query_alpha.graphql
// schema.graphql
// serum_fill.graphql
// serum_market.graphql
// token.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _queryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xcb\x6e\xd4\x40\x10\xbc\xfb\x2b\x6a\xcd\x81\x20\x45\x51\x90\x10\x87\x3d\x12\x88\x00\x89\x00\xd9\x70\x42\x1c\x7a\xed\xf6\x6e\x6b\x67\x67\x4c\x77\x7b\x83\x15\xf1\xef\x68\xc6\x38\x24\x28\x51\x6e\xf3\xe8\xaa\x9a\xa9\x2a\x1f\x7b\xc6\xd7\x81\x75\xc4\x4d\x55\x01\x9e\x76\x1c\xed\xa8\x49\x43\xf4\x25\xbe\x49\xf4\xd7\xaf\x8e\xd1\x0c\x6a\x49\x97\x58\xb9\x4a\xdc\xbc\x58\xe2\x2a\x8f\x9d\xa5\x18\xb9\x71\x49\x71\x71\x0b\x3d\xa2\xb6\x55\x36\x9b\x67\x17\xf3\xf0\xbb\x76\xc3\x8b\xaa\x7a\x06\x28\x6f\xc4\x9c\x95\xdb\x72\x61\x4b\x7c\xbf\xbc\x7f\x74\xc9\xd6\xa7\x68\xbc\xf8\xf1\x20\xe2\x21\x8d\x47\x18\xf2\xbb\xea\xba\xbe\x64\x1f\x34\x22\x90\x39\x5e\x9e\x9e\xa2\x93\x10\x0c\x5d\x52\xf8\x96\xb1\x91\x03\x47\xb8\x52\xcb\xfa\xdc\xd0\x0f\xeb\x20\x0d\x76\x3c\x9e\x60\x02\x1a\x44\x95\x0f\xac\x26\xeb\xc0\x48\x31\x8c\x68\xc9\x09\x96\x10\xe4\xc0\xd3\x26\x26\xc7\xc8\x8e\x9e\xd4\x91\x3a\x10\x2c\x24\x87\x6f\xc9\x21\x06\x89\x45\x4c\x53\x72\x18\x3b\xae\x25\x84\x82\x59\x33\xb4\xc8\x70\x8b\xeb\x2d\x47\x34\x14\x02\xb7\x27\x75\x5d\x57\x80\xb1\x0e\xfb\x73\x09\xe1\xbd\x98\x27\x1d\x8f\xa6\x77\xde\xfe\xfd\x18\x7b\xd2\x1d\xfb\x9d\x70\x56\x33\xe4\xbf\x80\x0a\xd5\xa7\x32\xfd\x74\xc2\xab\x7f\xc3\x77\x69\x7e\x57\x55\x5d\xd7\x67\x65\xda\xa0\xfc\x73\x10\xe5\x16\x9e\xd0\xa4\xe8\x12\x07\x06\x8b\x6f\x59\xb3\xbb\xd7\xa4\x2d\x92\x62\x4d\xcd\x2e\xaf\x0d\x9d\xa6\x3d\x08\x41\xac\x58\xd4\xd3\x46\x22\x39\xb7\xe0\xc0\x7b\x8e\x6e\xf9\xd3\xa5\x93\x5f\x68\xc3\x1f\x62\x97\x70\x53\x01\x25\xc4\x49\x34\xc3\xb2\x8f\x9d\xa8\xf9\x0c\x9b\x0f\x33\xef\x31\x06\x63\x88\xe7\x37\x19\x93\x36\xdb\xd9\xfa\xd4\xf7\xc9\xc4\x19\xad\xe8\xf4\x9f\xc9\x62\xc0\x9c\xd4\xcf\xee\x59\x50\x1c\x7b\x40\xb7\x74\xe8\x09\xd9\xd9\x8a\x99\x9e\x63\xfb\x18\xf9\x5b\x76\xd6\xbd\x44\x36\x48\x21\x53\xce\x65\xa1\x6c\x0d\x83\x0e\x24\x81\x72\xe7\xa8\x73\x9e\xda\x9a\x62\xee\x4b\xaf\x6c\x1c\xb3\x73\xeb\x11\xbe\x15\x9b\x00\x12\xbb\x34\xab\x6e\xc9\x2e\xf8\x97\x67\x23\x97\x78\x93\x52\x60\x9a\x02\xb4\x86\x02\xe9\xdf\xe8\xe7\xdd\x95\xec\x79\x5e\x9f\x87\x44\x77\xae\x3e\xae\x3e\x5f\xfc\x09\x00\x00\xff\xff\x00\x6f\xfc\xb2\x28\x04\x00\x00")

func queryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_queryGraphql,
		"query.graphql",
	)
}

func queryGraphql() (*asset, error) {
	bytes, err := queryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.graphql", size: 1064, mode: os.FileMode(420), modTime: time.Unix(1612371795, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _query_alphaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2c\x4d\x2d\xaa\x54\xa8\xae\xe5\x02\x04\x00\x00\xff\xff\x76\xca\x60\x3d\x0e\x00\x00\x00")

func query_alphaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_query_alphaGraphql,
		"query_alpha.graphql",
	)
}

func query_alphaGraphql() (*asset, error) {
	bytes, err := query_alphaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query_alpha.graphql", size: 14, mode: os.FileMode(420), modTime: time.Unix(1608159398, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\x9e\xeb\xeb\x5e\x1c\x00\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 28, mode: os.FileMode(420), modTime: time.Unix(1611886197, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serum_fillGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xcd\x6e\xdc\x36\x10\xbe\xeb\x29\x26\xba\xc4\x06\xdc\x5d\xa0\x4d\x73\xd0\x6d\xd3\xa4\x85\xe1\xda\x4d\xbc\x1b\xe4\x10\xe4\xc0\x25\x47\xd2\xd4\x14\x29\xf3\xc7\x1b\xa1\xe8\xbb\x17\x43\x4a\x96\xd6\xcd\x1a\x3e\x71\x25\xcd\xf7\x33\x1f\xc9\xd9\xa2\x2c\xcb\x5d\x8b\xf0\x9b\x35\x06\x65\x20\x6b\x20\x0c\x3d\x42\x6d\x1d\x08\xd8\xa2\x8b\xdd\xef\xa4\xf5\x0a\xb6\x88\x10\x5a\x84\xaf\x7f\x38\xd1\xb7\x9f\xfe\x04\x69\x1d\x82\xb4\x46\x62\x1f\xfc\xb7\xb3\x36\x84\xde\x57\xeb\xb5\xb2\xd2\xaf\x54\x1d\x3d\xae\xc8\xae\x9b\x48\x0a\xfd\x9a\x6b\x7f\x9a\x6a\xd7\x0d\x33\xdc\xeb\xf5\x79\x59\x96\x45\x52\x7b\xd4\x59\xd8\xf8\xa7\x00\x28\x37\xa0\xc9\x07\xb0\x35\xa0\x6a\xd0\x43\xb0\x73\x6d\x59\x40\x7e\x5b\xc1\xd7\xc7\x97\x1f\x54\x83\xdf\x5e\x15\x8c\xbd\x34\xb5\x75\x9d\xc8\x3d\x59\x10\xa4\xa0\x17\x0d\x99\xf4\x86\xc1\xbd\x68\x90\x8b\x2a\xf8\x38\xfe\x7a\x55\xfc\x5b\x70\x22\xc5\x06\x3c\x99\x46\x2f\x9c\x01\x6a\xec\xd0\x24\x2f\x9c\x83\x9c\x9d\xb2\xc5\x55\xf1\xff\x66\xd8\x4b\x6e\xa3\x2c\x3f\x45\x74\x03\xc8\xe8\xbc\x75\x17\x20\xb4\xb6\x07\x32\x0d\x0c\x36\xb2\x37\x69\x4d\x20\x13\x11\x6a\x0c\xb2\xe5\x0f\x0e\x7d\xd4\xc1\x03\x3e\xa0\x01\x51\x07\x74\x40\x26\xa0\x73\xb1\x4f\x9a\xb6\x66\xac\x5b\xd8\xb8\x80\x03\x85\xd6\xc6\x00\x1d\x79\x76\x0f\x02\xf6\x28\xc2\x8a\x8d\xc1\x28\x5d\xc1\x36\x38\x32\x4d\x4e\x28\x6f\xfd\xdc\xa2\xdd\xff\x8d\x72\x02\x18\xab\xb0\x9a\x3f\xa6\x68\x8e\xfb\x9b\x7a\x63\x12\xaf\x6d\x00\x13\xbb\x7d\x32\x0a\x87\x96\x64\x9b\x72\x5a\xb0\x4b\x19\x9d\x43\x35\xf2\x33\xe2\x26\x76\x15\x7c\x26\x13\xde\xbe\x59\x3a\x0a\x4e\x18\x2f\x52\x57\xaf\x3d\x90\x51\xf8\x3d\x35\x47\x26\x51\x26\xad\x43\x8b\x0e\x9f\x57\x58\xd0\x5c\x32\xc7\x8f\xa4\xc8\xf8\xe0\xe2\x49\xa9\x05\xc5\x4b\x14\x17\x6c\x27\x15\xad\x53\xe8\xa6\xa8\xa2\xa1\xfb\x88\x40\x0a\x4d\xa0\x9a\xd0\x4d\xe2\x02\x1a\xe2\xad\xef\x84\xbb\xc3\x69\x4b\x12\xf4\x54\x66\xd4\xa1\x0f\xa2\xeb\xa7\x03\xba\xd7\x56\xde\x2d\xf7\x82\xfc\x33\x51\x4d\xe8\x0a\x76\xd4\xe1\x93\xcd\x50\xe8\x5e\x7b\xe8\xe3\x5e\x93\x84\x3b\x1c\xd2\x74\x38\x26\xbc\x00\x5a\xe1\x2a\x09\x5b\xc3\x29\x89\x00\xfb\x38\x80\x75\xe0\x51\xeb\x19\x71\xd4\x50\xe6\xfe\xd1\xa1\xcc\x65\x09\xf6\xc2\x16\x32\x62\x3c\xb1\xd7\xe9\x61\x22\xfc\x92\xe0\x9e\x14\x3e\xe5\x20\xcf\x12\x17\x80\x14\x5a\x74\xf0\xee\xf2\x3d\x9c\xb1\x5f\x74\xe7\x6c\x7d\xb3\xbd\x82\xb3\x7d\x1c\xd0\x9d\x4f\xa7\x96\xd2\xad\x20\x85\xbb\xa1\x3f\xca\xe9\x3e\x0a\x13\x28\x0c\x29\x7f\x7b\x87\x26\x87\x70\x10\x1e\x1c\x4a\xa4\x07\x54\x30\x9e\xaa\x79\x84\x25\xce\x09\x79\x3b\x96\x55\xb0\x63\xfc\xa6\xb3\xd1\x84\x17\x4a\xf4\x3c\xde\xf8\xf2\x3f\x2f\xf1\x51\xd0\x69\xfa\xde\x91\xc4\xcc\xf4\xb8\x5d\xf8\x5d\xc8\xb0\xfc\x1f\xe0\x42\x85\xc6\x76\x24\xf3\x68\x25\x0f\x42\x1f\xc4\xc0\xb7\x07\xce\xf6\xc2\xe3\xe8\x6d\x0d\xf7\xd1\x86\xf1\xe9\x3c\xfb\x48\x12\xa7\x87\x10\xe2\x8e\xef\x80\xc6\x07\xd4\x4f\x8c\xd4\xac\x9e\x49\xea\x5c\x56\x1d\x81\xe6\xf9\xb4\xe8\x0e\xd2\x88\x7a\x10\x3a\xe2\x7c\x67\x00\x14\xf9\x5e\x8b\x61\xf2\xc1\x07\x91\x31\x63\x30\x4c\x84\x26\x76\xc7\x9e\x98\xe8\xdd\x66\xfb\xa1\x00\xd8\xde\x5e\xff\x9c\x97\x5f\xf2\xf2\x26\x2f\xbf\xe6\xe5\x6d\x01\x70\xbd\xbd\xbd\x9e\x79\xc6\xd3\x92\x38\x36\xdb\x2b\x66\xba\x7c\x5f\x00\x7c\xbe\xb9\xba\xf9\xeb\xcb\x0d\x17\xfe\x17\x00\x00\xff\xff\x66\x61\x75\x98\x88\x07\x00\x00")

func serum_fillGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_fillGraphql,
		"serum_fill.graphql",
	)
}

func serum_fillGraphql() (*asset, error) {
	bytes, err := serum_fillGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_fill.graphql", size: 1928, mode: os.FileMode(420), modTime: time.Unix(1612374293, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serum_marketGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x50\x4d\x6f\xd4\x30\x10\xbd\xe7\x57\xbc\xe6\x02\x48\x25\xb9\x20\x0e\xb9\x55\x15\x20\x24\x90\xa8\x76\x39\x55\x3d\x78\xed\x49\x62\xea\x78\x52\x7b\xcc\x6a\x85\xfa\xdf\x91\xf3\x51\xb2\x74\x4f\x89\x67\xde\xc7\xbc\x57\x96\xe5\xbe\x27\xdc\xb2\xf7\xa4\xc5\xb2\x87\x9c\x46\x42\xcb\x01\x0a\x3b\x0a\x69\xf8\xae\xc2\x23\x49\x85\x1d\x11\xa4\x27\xdc\x7f\x09\x6a\xec\xef\xbe\x41\x73\x20\x68\xf6\x9a\x46\x89\x0f\x6f\x7b\x91\x31\x36\x75\x6d\x58\xc7\xca\xb4\x29\x52\x65\xb9\xee\x92\x35\x14\xeb\x8c\x7d\xbf\x62\xeb\x2e\x2b\x3c\xb9\xfa\x5d\x59\x96\xc5\xe4\xb7\x71\xda\x9c\xf2\xa7\x00\xca\xb2\xbc\x81\xb3\x51\xc0\x2d\xc8\x74\x14\x21\x3c\xe3\x3f\x5b\xe7\xb2\x02\xe6\x79\x83\xfb\x8d\xcc\x27\xd3\xd1\xc3\x55\x31\x2b\x7c\xf5\x2d\x87\x41\xcd\xf9\x18\xca\x1a\x8c\xaa\xb3\x7e\x9a\xcc\x12\xa3\xea\x28\xc3\x1a\xfc\x58\xfe\x56\xf2\x9e\x45\x39\x68\x4e\x7e\xba\x61\x98\xe4\x21\xbd\x12\x1c\x73\x01\xc9\x19\x04\x92\x14\x16\x25\xc9\xf8\xdb\x0c\x6f\xf0\xd3\x7a\xf9\xf8\xe1\xaa\x78\x2e\x8a\xbc\xbc\x41\xb4\xbe\x73\x67\x79\xf3\xa1\x20\x47\x03\xcd\xfa\xb9\x63\xfd\xaf\x83\x1c\xbd\x2a\x2e\x15\x35\x11\x97\x8a\xee\x12\x85\x13\x74\x0a\x91\xc3\x35\x94\x73\x7c\xb4\xbe\xc3\x89\x53\xce\xab\xd9\x8b\xf5\x89\xd0\x92\xe8\x3e\x2f\x02\xc5\xe4\x24\x82\x7e\x93\x87\x6a\x85\x02\xac\x17\x0a\x21\x8d\x93\x2b\xb7\x99\x1b\x36\x87\x5c\xe3\x68\xa5\xe7\x24\x18\x6c\xcc\x29\xa0\x70\x20\x25\xd5\x1c\x7a\xb6\x6e\xb0\x93\x60\x7d\xf7\x52\x5d\x7f\x76\x31\xf8\xf0\x8b\xf4\x4a\xf1\x6c\xa8\xd9\xae\xa7\x9a\xfe\x4f\x89\x35\x62\xd6\x9a\xbb\x7f\x13\xa1\x8c\x09\x14\xe3\xa2\xb4\xbc\x2e\xb9\xbf\x30\x8c\x8d\xa3\x53\x27\x78\x35\xd0\xe2\xaf\x06\x5a\x29\xaf\x18\x11\x07\x15\x09\xc2\x8f\xe4\x17\x97\x3c\xd8\xe7\x77\x83\xe9\x73\x81\xf3\x94\x58\xce\x49\xd3\xe4\x8c\xf5\xfc\x37\x00\x00\xff\xff\x7a\x87\x38\xaa\x73\x03\x00\x00")

func serum_marketGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_serum_marketGraphql,
		"serum_market.graphql",
	)
}

func serum_marketGraphql() (*asset, error) {
	bytes, err := serum_marketGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "serum_market.graphql", size: 883, mode: os.FileMode(420), modTime: time.Unix(1611886197, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tokenGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6f\xd4\x30\x10\x85\xef\xfe\x15\xaf\x39\x81\x54\x92\x0b\xe2\x90\x5b\x41\x08\x55\x02\x89\xaa\xe5\x54\xf5\xe0\xb5\x27\x89\xc1\xf1\x04\x7b\xdc\x55\x40\xfd\xef\xc8\xce\x2e\x1b\x24\x6e\xf1\x9b\x67\xbf\xef\x4d\x94\x6a\x9a\xe6\x61\x22\x7c\xe0\x10\xc8\x88\xe3\x00\x59\x17\xc2\xc0\x11\x1a\x0f\xfc\x83\x42\x8b\x7b\x22\xc8\x44\x78\xfc\x14\xf5\x32\xdd\x7d\x86\xe1\x48\x30\x1c\x0c\x2d\x92\x9e\x5e\x4d\x22\x4b\xea\xbb\xce\xb2\x49\xad\x1d\x72\xa2\xd6\x71\x37\x66\x67\x29\x75\xc5\xfb\xe6\xec\xed\xc6\xf2\xc2\x4f\xdf\xbd\x6e\x9a\x46\xd5\xa4\x9a\xb1\x8b\xff\xad\x80\xe6\x06\xde\x25\x01\x0f\x20\x3b\x52\x82\xf0\xe6\x43\xa3\xb0\x49\x3d\x1e\xab\xf2\xd1\x8e\xf4\x74\xa5\xca\xa5\xdb\x30\x70\x9c\xf5\x56\x82\xa1\x9d\xc5\xa2\x47\x17\xaa\x52\x2e\x2e\x7a\xa4\x62\xea\xf1\xf5\xf4\x75\xa5\x5e\xea\x0a\xd4\x0d\x92\x0b\xa3\x3f\xe1\x80\x3c\xcd\x14\x2a\x40\x29\x6e\x2e\x78\x85\xab\x55\xff\xd2\x17\x86\x8d\xbb\x69\xee\x32\xc5\x15\x26\xc7\xc4\xf1\x1a\xda\x7b\x3e\xba\x30\x62\xe5\x5c\x98\x0c\x07\x71\x21\x13\x06\x12\x33\x95\x41\xa4\x94\xbd\x24\xd0\x33\x05\xe8\x41\x28\xc2\x05\xa1\x18\xf3\x52\xf3\x78\x28\x77\xe3\x0e\xe1\x1a\x47\x27\x13\x67\xc1\xec\x52\xa1\x86\xc6\x81\xb4\xb4\x05\x0a\xa7\xe8\x1e\xf7\x12\x5d\x18\xb7\xcd\x6c\xff\x78\xab\xc6\x87\xef\x64\xce\xe6\xc0\x96\xfa\x6d\x50\x57\xb1\x2b\x55\x0b\x69\x6b\x23\xa5\x74\x79\x0d\x98\x5d\x90\x9b\x2c\x13\x47\x27\xeb\x7e\x30\x44\xa2\x5f\xf4\xdf\x51\xca\xcb\xe2\xd7\x1e\xdf\x5c\x90\x77\x6f\x8b\x62\xc9\xb8\x59\xfb\xd4\xe3\x36\x48\x11\x9e\x29\xba\xc1\x91\xed\xf1\x9e\xd9\x93\x0e\x35\x8b\x44\x9f\xf0\xbe\x90\xe8\x42\x78\x01\x2c\x4a\x85\x4c\xeb\x7c\x60\xbf\xcf\x0b\x7a\xa6\xfd\xd9\xf3\xc8\xe7\xb3\x02\x8e\x74\x48\x4e\xfe\x3a\xd4\x8b\xfa\x13\x00\x00\xff\xff\xa5\x9b\x3c\x1f\x08\x03\x00\x00")

func tokenGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_tokenGraphql,
		"token.graphql",
	)
}

func tokenGraphql() (*asset, error) {
	bytes, err := tokenGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "token.graphql", size: 776, mode: os.FileMode(420), modTime: time.Unix(1612206111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"query.graphql": queryGraphql,
	"query_alpha.graphql": query_alphaGraphql,
	"schema.graphql": schemaGraphql,
	"serum_fill.graphql": serum_fillGraphql,
	"serum_market.graphql": serum_marketGraphql,
	"token.graphql": tokenGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"query.graphql": &bintree{queryGraphql, map[string]*bintree{}},
	"query_alpha.graphql": &bintree{query_alphaGraphql, map[string]*bintree{}},
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
	"serum_fill.graphql": &bintree{serum_fillGraphql, map[string]*bintree{}},
	"serum_market.graphql": &bintree{serum_marketGraphql, map[string]*bintree{}},
	"token.graphql": &bintree{tokenGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

